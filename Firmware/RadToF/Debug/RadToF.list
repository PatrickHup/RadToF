
RadToF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4e4  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  0800b730  0800b730  0000c730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf74  0800bf74  0000d068  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf74  0800bf74  0000cf74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf7c  0800bf7c  0000d068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf7c  0800bf7c  0000cf7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bf80  0800bf80  0000cf80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800bf84  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008f1c  20000068  0800bfec  0000d068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008f84  0800bfec  0000df84  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000d068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015cdf  00000000  00000000  0000d09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002643  00000000  00000000  00022d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  000253c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d0a  00000000  00000000  00026490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f1a8  00000000  00000000  0002719a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000173be  00000000  00000000  00056342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012c70e  00000000  00000000  0006d700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00199e0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fe4  00000000  00000000  00199e54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0019ee38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000068 	.word	0x20000068
 8000268:	00000000 	.word	0x00000000
 800026c:	0800b718 	.word	0x0800b718

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	2000006c 	.word	0x2000006c
 8000288:	0800b718 	.word	0x0800b718

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b97e 	b.w	80005a0 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c2:	460c      	mov	r4, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14d      	bne.n	8000364 <__udivmoddi4+0xa8>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	460f      	mov	r7, r1
 80002cc:	4684      	mov	ip, r0
 80002ce:	4696      	mov	lr, r2
 80002d0:	fab2 f382 	clz	r3, r2
 80002d4:	d960      	bls.n	8000398 <__udivmoddi4+0xdc>
 80002d6:	b14b      	cbz	r3, 80002ec <__udivmoddi4+0x30>
 80002d8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f0:	fa1f f48e 	uxth.w	r4, lr
 80002f4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002f8:	fbb7 f1f6 	udiv	r1, r7, r6
 80002fc:	fb06 7711 	mls	r7, r6, r1, r7
 8000300:	fb01 f004 	mul.w	r0, r1, r4
 8000304:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000308:	4290      	cmp	r0, r2
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x62>
 800030c:	eb1e 0202 	adds.w	r2, lr, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x60>
 8000316:	4290      	cmp	r0, r2
 8000318:	f200 812d 	bhi.w	8000576 <__udivmoddi4+0x2ba>
 800031c:	4639      	mov	r1, r7
 800031e:	1a12      	subs	r2, r2, r0
 8000320:	fa1f fc8c 	uxth.w	ip, ip
 8000324:	fbb2 f0f6 	udiv	r0, r2, r6
 8000328:	fb06 2210 	mls	r2, r6, r0, r2
 800032c:	fb00 f404 	mul.w	r4, r0, r4
 8000330:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000334:	4564      	cmp	r4, ip
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x8e>
 8000338:	eb1e 0c0c 	adds.w	ip, lr, ip
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x8c>
 8000342:	4564      	cmp	r4, ip
 8000344:	f200 811a 	bhi.w	800057c <__udivmoddi4+0x2c0>
 8000348:	4610      	mov	r0, r2
 800034a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034e:	ebac 0c04 	sub.w	ip, ip, r4
 8000352:	2100      	movs	r1, #0
 8000354:	b125      	cbz	r5, 8000360 <__udivmoddi4+0xa4>
 8000356:	fa2c f303 	lsr.w	r3, ip, r3
 800035a:	2200      	movs	r2, #0
 800035c:	e9c5 3200 	strd	r3, r2, [r5]
 8000360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d905      	bls.n	8000374 <__udivmoddi4+0xb8>
 8000368:	b10d      	cbz	r5, 800036e <__udivmoddi4+0xb2>
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	2100      	movs	r1, #0
 8000370:	4608      	mov	r0, r1
 8000372:	e7f5      	b.n	8000360 <__udivmoddi4+0xa4>
 8000374:	fab3 f183 	clz	r1, r3
 8000378:	2900      	cmp	r1, #0
 800037a:	d14d      	bne.n	8000418 <__udivmoddi4+0x15c>
 800037c:	42a3      	cmp	r3, r4
 800037e:	f0c0 80f2 	bcc.w	8000566 <__udivmoddi4+0x2aa>
 8000382:	4290      	cmp	r0, r2
 8000384:	f080 80ef 	bcs.w	8000566 <__udivmoddi4+0x2aa>
 8000388:	4606      	mov	r6, r0
 800038a:	4623      	mov	r3, r4
 800038c:	4608      	mov	r0, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e6      	beq.n	8000360 <__udivmoddi4+0xa4>
 8000392:	e9c5 6300 	strd	r6, r3, [r5]
 8000396:	e7e3      	b.n	8000360 <__udivmoddi4+0xa4>
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 80a2 	bne.w	80004e2 <__udivmoddi4+0x226>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a4:	fa1f f68e 	uxth.w	r6, lr
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ae:	fb07 2014 	mls	r0, r7, r4, r2
 80003b2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb06 f004 	mul.w	r0, r6, r4
 80003be:	4290      	cmp	r0, r2
 80003c0:	d90f      	bls.n	80003e2 <__udivmoddi4+0x126>
 80003c2:	eb1e 0202 	adds.w	r2, lr, r2
 80003c6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003ca:	bf2c      	ite	cs
 80003cc:	f04f 0901 	movcs.w	r9, #1
 80003d0:	f04f 0900 	movcc.w	r9, #0
 80003d4:	4290      	cmp	r0, r2
 80003d6:	d903      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003d8:	f1b9 0f00 	cmp.w	r9, #0
 80003dc:	f000 80c8 	beq.w	8000570 <__udivmoddi4+0x2b4>
 80003e0:	4644      	mov	r4, r8
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	fa1f fc8c 	uxth.w	ip, ip
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	fb00 f606 	mul.w	r6, r0, r6
 80003f4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003f8:	4566      	cmp	r6, ip
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x152>
 80003fc:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x150>
 8000406:	4566      	cmp	r6, ip
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c6>
 800040c:	4610      	mov	r0, r2
 800040e:	ebac 0c06 	sub.w	ip, ip, r6
 8000412:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000416:	e79d      	b.n	8000354 <__udivmoddi4+0x98>
 8000418:	f1c1 0620 	rsb	r6, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	fa20 fc06 	lsr.w	ip, r0, r6
 800042a:	40f4      	lsrs	r4, r6
 800042c:	408a      	lsls	r2, r1
 800042e:	431f      	orrs	r7, r3
 8000430:	ea4e 030c 	orr.w	r3, lr, ip
 8000434:	fa00 fe01 	lsl.w	lr, r0, r1
 8000438:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800043c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000440:	fa1f fc87 	uxth.w	ip, r7
 8000444:	fbb4 f0f8 	udiv	r0, r4, r8
 8000448:	fb08 4410 	mls	r4, r8, r0, r4
 800044c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000450:	fb00 f90c 	mul.w	r9, r0, ip
 8000454:	45a1      	cmp	r9, r4
 8000456:	d90e      	bls.n	8000476 <__udivmoddi4+0x1ba>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 3aff 	add.w	sl, r0, #4294967295
 800045e:	bf2c      	ite	cs
 8000460:	f04f 0b01 	movcs.w	fp, #1
 8000464:	f04f 0b00 	movcc.w	fp, #0
 8000468:	45a1      	cmp	r9, r4
 800046a:	d903      	bls.n	8000474 <__udivmoddi4+0x1b8>
 800046c:	f1bb 0f00 	cmp.w	fp, #0
 8000470:	f000 8093 	beq.w	800059a <__udivmoddi4+0x2de>
 8000474:	4650      	mov	r0, sl
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000482:	fb08 4413 	mls	r4, r8, r3, r4
 8000486:	fb03 fc0c 	mul.w	ip, r3, ip
 800048a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048e:	45a4      	cmp	ip, r4
 8000490:	d906      	bls.n	80004a0 <__udivmoddi4+0x1e4>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 38ff 	add.w	r8, r3, #4294967295
 8000498:	d201      	bcs.n	800049e <__udivmoddi4+0x1e2>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d87a      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 800049e:	4643      	mov	r3, r8
 80004a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a4:	eba4 040c 	sub.w	r4, r4, ip
 80004a8:	fba0 9802 	umull	r9, r8, r0, r2
 80004ac:	4544      	cmp	r4, r8
 80004ae:	46cc      	mov	ip, r9
 80004b0:	4643      	mov	r3, r8
 80004b2:	d302      	bcc.n	80004ba <__udivmoddi4+0x1fe>
 80004b4:	d106      	bne.n	80004c4 <__udivmoddi4+0x208>
 80004b6:	45ce      	cmp	lr, r9
 80004b8:	d204      	bcs.n	80004c4 <__udivmoddi4+0x208>
 80004ba:	3801      	subs	r0, #1
 80004bc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c0:	eb68 0307 	sbc.w	r3, r8, r7
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x222>
 80004c6:	ebbe 020c 	subs.w	r2, lr, ip
 80004ca:	eb64 0403 	sbc.w	r4, r4, r3
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	40cc      	lsrs	r4, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e73e      	b.n	8000360 <__udivmoddi4+0xa4>
 80004e2:	fa02 fe03 	lsl.w	lr, r2, r3
 80004e6:	f1c3 0120 	rsb	r1, r3, #32
 80004ea:	fa04 f203 	lsl.w	r2, r4, r3
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	40cc      	lsrs	r4, r1
 80004f4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004f8:	fa20 f101 	lsr.w	r1, r0, r1
 80004fc:	fa1f f68e 	uxth.w	r6, lr
 8000500:	fbb4 f0f7 	udiv	r0, r4, r7
 8000504:	430a      	orrs	r2, r1
 8000506:	fb07 4410 	mls	r4, r7, r0, r4
 800050a:	0c11      	lsrs	r1, r2, #16
 800050c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000510:	fb00 f406 	mul.w	r4, r0, r6
 8000514:	428c      	cmp	r4, r1
 8000516:	d90e      	bls.n	8000536 <__udivmoddi4+0x27a>
 8000518:	eb1e 0101 	adds.w	r1, lr, r1
 800051c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000520:	bf2c      	ite	cs
 8000522:	f04f 0901 	movcs.w	r9, #1
 8000526:	f04f 0900 	movcc.w	r9, #0
 800052a:	428c      	cmp	r4, r1
 800052c:	d902      	bls.n	8000534 <__udivmoddi4+0x278>
 800052e:	f1b9 0f00 	cmp.w	r9, #0
 8000532:	d02c      	beq.n	800058e <__udivmoddi4+0x2d2>
 8000534:	4640      	mov	r0, r8
 8000536:	1b09      	subs	r1, r1, r4
 8000538:	b292      	uxth	r2, r2
 800053a:	fbb1 f4f7 	udiv	r4, r1, r7
 800053e:	fb07 1114 	mls	r1, r7, r4, r1
 8000542:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000546:	fb04 f106 	mul.w	r1, r4, r6
 800054a:	4291      	cmp	r1, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x2a2>
 800054e:	eb1e 0202 	adds.w	r2, lr, r2
 8000552:	f104 38ff 	add.w	r8, r4, #4294967295
 8000556:	d201      	bcs.n	800055c <__udivmoddi4+0x2a0>
 8000558:	4291      	cmp	r1, r2
 800055a:	d815      	bhi.n	8000588 <__udivmoddi4+0x2cc>
 800055c:	4644      	mov	r4, r8
 800055e:	1a52      	subs	r2, r2, r1
 8000560:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000564:	e721      	b.n	80003aa <__udivmoddi4+0xee>
 8000566:	1a86      	subs	r6, r0, r2
 8000568:	eb64 0303 	sbc.w	r3, r4, r3
 800056c:	2001      	movs	r0, #1
 800056e:	e70e      	b.n	800038e <__udivmoddi4+0xd2>
 8000570:	3c02      	subs	r4, #2
 8000572:	4472      	add	r2, lr
 8000574:	e735      	b.n	80003e2 <__udivmoddi4+0x126>
 8000576:	3902      	subs	r1, #2
 8000578:	4472      	add	r2, lr
 800057a:	e6d0      	b.n	800031e <__udivmoddi4+0x62>
 800057c:	44f4      	add	ip, lr
 800057e:	3802      	subs	r0, #2
 8000580:	e6e3      	b.n	800034a <__udivmoddi4+0x8e>
 8000582:	44f4      	add	ip, lr
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x152>
 8000588:	3c02      	subs	r4, #2
 800058a:	4472      	add	r2, lr
 800058c:	e7e7      	b.n	800055e <__udivmoddi4+0x2a2>
 800058e:	3802      	subs	r0, #2
 8000590:	4471      	add	r1, lr
 8000592:	e7d0      	b.n	8000536 <__udivmoddi4+0x27a>
 8000594:	3b02      	subs	r3, #2
 8000596:	443c      	add	r4, r7
 8000598:	e782      	b.n	80004a0 <__udivmoddi4+0x1e4>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e76a      	b.n	8000476 <__udivmoddi4+0x1ba>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <read_regs_1>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Functions for handle struct
bgt60utr13d_err_t read_regs_1(const uint8_t *send_buf, uint32_t n, uint8_t *buf)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af02      	add	r7, sp, #8
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	60b9      	str	r1, [r7, #8]
 80005ae:	607a      	str	r2, [r7, #4]
  //Enable CS (LOW)
  HAL_GPIO_WritePin(RAD_1_CS_PORT, RAD_1_CS_PIN, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005b6:	4810      	ldr	r0, [pc, #64]	@ (80005f8 <read_regs_1+0x54>)
 80005b8:	f001 ff06 	bl	80023c8 <HAL_GPIO_WritePin>
  //Transmit and Receive Message
  if(HAL_SPI_TransmitReceive(&hspi1, send_buf, buf, n, HAL_MAX_DELAY) != HAL_OK){
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	b29b      	uxth	r3, r3
 80005c0:	f04f 32ff 	mov.w	r2, #4294967295
 80005c4:	9200      	str	r2, [sp, #0]
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	68f9      	ldr	r1, [r7, #12]
 80005ca:	480c      	ldr	r0, [pc, #48]	@ (80005fc <read_regs_1+0x58>)
 80005cc:	f008 fb98 	bl	8008d00 <HAL_SPI_TransmitReceive>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d004      	beq.n	80005e0 <read_regs_1+0x3c>
    printf("--[READ] Failed\r\n");
 80005d6:	480a      	ldr	r0, [pc, #40]	@ (8000600 <read_regs_1+0x5c>)
 80005d8:	f00a fa1c 	bl	800aa14 <puts>
    return E_BGT60UTR13D_COM_ERR;
 80005dc:	2302      	movs	r3, #2
 80005de:	e006      	b.n	80005ee <read_regs_1+0x4a>
  }
  //Release CS (HIGH)
  HAL_GPIO_WritePin(RAD_1_CS_PORT, RAD_1_CS_PIN, GPIO_PIN_SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005e6:	4804      	ldr	r0, [pc, #16]	@ (80005f8 <read_regs_1+0x54>)
 80005e8:	f001 feee 	bl	80023c8 <HAL_GPIO_WritePin>
  return E_BGT60UTR13D_SUCCESS;
 80005ec:	2300      	movs	r3, #0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	42020800 	.word	0x42020800
 80005fc:	20000084 	.word	0x20000084
 8000600:	0800b730 	.word	0x0800b730

08000604 <write_regs_1>:

bgt60utr13d_err_t write_regs_1(const uint8_t *send_buf, uint32_t n)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
  //Enable CS (LOW)
  HAL_GPIO_WritePin(RAD_1_CS_PORT, RAD_1_CS_PIN, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000614:	480e      	ldr	r0, [pc, #56]	@ (8000650 <write_regs_1+0x4c>)
 8000616:	f001 fed7 	bl	80023c8 <HAL_GPIO_WritePin>
  //Transmit Message
  if(HAL_SPI_Transmit(&hspi1, send_buf, n, HAL_MAX_DELAY) != HAL_OK){
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	b29a      	uxth	r2, r3
 800061e:	f04f 33ff 	mov.w	r3, #4294967295
 8000622:	6879      	ldr	r1, [r7, #4]
 8000624:	480b      	ldr	r0, [pc, #44]	@ (8000654 <write_regs_1+0x50>)
 8000626:	f007 ffab 	bl	8008580 <HAL_SPI_Transmit>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d004      	beq.n	800063a <write_regs_1+0x36>
    printf("--[WRITE] Failed\r\n");
 8000630:	4809      	ldr	r0, [pc, #36]	@ (8000658 <write_regs_1+0x54>)
 8000632:	f00a f9ef 	bl	800aa14 <puts>
    return E_BGT60UTR13D_COM_ERR;
 8000636:	2302      	movs	r3, #2
 8000638:	e006      	b.n	8000648 <write_regs_1+0x44>
  }
  //Release CS (HIGH)
  HAL_GPIO_WritePin(RAD_1_CS_PORT, RAD_1_CS_PIN, GPIO_PIN_SET);
 800063a:	2201      	movs	r2, #1
 800063c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000640:	4803      	ldr	r0, [pc, #12]	@ (8000650 <write_regs_1+0x4c>)
 8000642:	f001 fec1 	bl	80023c8 <HAL_GPIO_WritePin>
  return E_BGT60UTR13D_SUCCESS;
 8000646:	2300      	movs	r3, #0
}
 8000648:	4618      	mov	r0, r3
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	42020800 	.word	0x42020800
 8000654:	20000084 	.word	0x20000084
 8000658:	0800b744 	.word	0x0800b744

0800065c <read_regs_2>:

bgt60utr13d_err_t read_regs_2(const uint8_t *send_buf, uint32_t n, uint8_t *buf)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af02      	add	r7, sp, #8
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
  //Enable CS (LOW)
  HAL_GPIO_WritePin(RAD_2_CS_PORT, RAD_2_CS_PIN, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800066e:	4810      	ldr	r0, [pc, #64]	@ (80006b0 <read_regs_2+0x54>)
 8000670:	f001 feaa 	bl	80023c8 <HAL_GPIO_WritePin>
  //Transmit and Receive Message
  if(HAL_SPI_TransmitReceive(&hspi2, send_buf, buf, n, HAL_MAX_DELAY) != HAL_OK){
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	b29b      	uxth	r3, r3
 8000678:	f04f 32ff 	mov.w	r2, #4294967295
 800067c:	9200      	str	r2, [sp, #0]
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	68f9      	ldr	r1, [r7, #12]
 8000682:	480c      	ldr	r0, [pc, #48]	@ (80006b4 <read_regs_2+0x58>)
 8000684:	f008 fb3c 	bl	8008d00 <HAL_SPI_TransmitReceive>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d004      	beq.n	8000698 <read_regs_2+0x3c>
    printf("--[READ] Failed\r\n");
 800068e:	480a      	ldr	r0, [pc, #40]	@ (80006b8 <read_regs_2+0x5c>)
 8000690:	f00a f9c0 	bl	800aa14 <puts>
    return E_BGT60UTR13D_COM_ERR;
 8000694:	2302      	movs	r3, #2
 8000696:	e006      	b.n	80006a6 <read_regs_2+0x4a>
  }
  //Release CS (HIGH)
  HAL_GPIO_WritePin(RAD_2_CS_PORT, RAD_2_CS_PIN, GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800069e:	4804      	ldr	r0, [pc, #16]	@ (80006b0 <read_regs_2+0x54>)
 80006a0:	f001 fe92 	bl	80023c8 <HAL_GPIO_WritePin>
  return E_BGT60UTR13D_SUCCESS;
 80006a4:	2300      	movs	r3, #0
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	42020400 	.word	0x42020400
 80006b4:	20000114 	.word	0x20000114
 80006b8:	0800b730 	.word	0x0800b730

080006bc <write_regs_2>:

bgt60utr13d_err_t write_regs_2(const uint8_t *send_buf, uint32_t n)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
  //Enable CS (LOW)
  HAL_GPIO_WritePin(RAD_2_CS_PORT, RAD_2_CS_PIN, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006cc:	480e      	ldr	r0, [pc, #56]	@ (8000708 <write_regs_2+0x4c>)
 80006ce:	f001 fe7b 	bl	80023c8 <HAL_GPIO_WritePin>
  //Transmit Message
  if(HAL_SPI_Transmit(&hspi2, send_buf, n, HAL_MAX_DELAY) != HAL_OK){
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	b29a      	uxth	r2, r3
 80006d6:	f04f 33ff 	mov.w	r3, #4294967295
 80006da:	6879      	ldr	r1, [r7, #4]
 80006dc:	480b      	ldr	r0, [pc, #44]	@ (800070c <write_regs_2+0x50>)
 80006de:	f007 ff4f 	bl	8008580 <HAL_SPI_Transmit>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d004      	beq.n	80006f2 <write_regs_2+0x36>
    printf("--[WRITE] Failed\r\n");
 80006e8:	4809      	ldr	r0, [pc, #36]	@ (8000710 <write_regs_2+0x54>)
 80006ea:	f00a f993 	bl	800aa14 <puts>
    return E_BGT60UTR13D_COM_ERR;
 80006ee:	2302      	movs	r3, #2
 80006f0:	e006      	b.n	8000700 <write_regs_2+0x44>
  }
  //Release CS (HIGH)
  HAL_GPIO_WritePin(RAD_2_CS_PORT, RAD_2_CS_PIN, GPIO_PIN_SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006f8:	4803      	ldr	r0, [pc, #12]	@ (8000708 <write_regs_2+0x4c>)
 80006fa:	f001 fe65 	bl	80023c8 <HAL_GPIO_WritePin>
  return E_BGT60UTR13D_SUCCESS;
 80006fe:	2300      	movs	r3, #0
}
 8000700:	4618      	mov	r0, r3
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	42020400 	.word	0x42020400
 800070c:	20000114 	.word	0x20000114
 8000710:	0800b744 	.word	0x0800b744

08000714 <drvrlog>:

void drvrlog(char *msg, bool is_err, bool has_int_arg, uint32_t arg)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	460b      	mov	r3, r1
 8000720:	72fb      	strb	r3, [r7, #11]
 8000722:	4613      	mov	r3, r2
 8000724:	72bb      	strb	r3, [r7, #10]
  if(!PRINT_ERRORS_ONLY | is_err)
  {
    if (has_int_arg) {
 8000726:	7abb      	ldrb	r3, [r7, #10]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d00b      	beq.n	8000744 <drvrlog+0x30>
      printf("%s: %s %#010x\r\n", is_err ? "ERR" : "LOG", msg, arg);
 800072c:	7afb      	ldrb	r3, [r7, #11]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <drvrlog+0x22>
 8000732:	490c      	ldr	r1, [pc, #48]	@ (8000764 <drvrlog+0x50>)
 8000734:	e000      	b.n	8000738 <drvrlog+0x24>
 8000736:	490c      	ldr	r1, [pc, #48]	@ (8000768 <drvrlog+0x54>)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	68fa      	ldr	r2, [r7, #12]
 800073c:	480b      	ldr	r0, [pc, #44]	@ (800076c <drvrlog+0x58>)
 800073e:	f00a f901 	bl	800a944 <iprintf>
    } else {
      printf("%s: %s\r\n", is_err ? "ERR" : "LOG", msg);
    }
  }
}
 8000742:	e00a      	b.n	800075a <drvrlog+0x46>
      printf("%s: %s\r\n", is_err ? "ERR" : "LOG", msg);
 8000744:	7afb      	ldrb	r3, [r7, #11]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <drvrlog+0x3a>
 800074a:	4b06      	ldr	r3, [pc, #24]	@ (8000764 <drvrlog+0x50>)
 800074c:	e000      	b.n	8000750 <drvrlog+0x3c>
 800074e:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <drvrlog+0x54>)
 8000750:	68fa      	ldr	r2, [r7, #12]
 8000752:	4619      	mov	r1, r3
 8000754:	4806      	ldr	r0, [pc, #24]	@ (8000770 <drvrlog+0x5c>)
 8000756:	f00a f8f5 	bl	800a944 <iprintf>
}
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	0800b758 	.word	0x0800b758
 8000768:	0800b75c 	.word	0x0800b75c
 800076c:	0800b760 	.word	0x0800b760
 8000770:	0800b770 	.word	0x0800b770

08000774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	@ 0x28
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077a:	f001 fa8d 	bl	8001c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077e:	f000 f8c1 	bl	8000904 <SystemClock_Config>

  printf("board booted\n");
 8000782:	4850      	ldr	r0, [pc, #320]	@ (80008c4 <main+0x150>)
 8000784:	f00a f946 	bl	800aa14 <puts>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000788:	f000 fac8 	bl	8000d1c <MX_GPIO_Init>
  MX_SPI1_Init();
 800078c:	f000 f928 	bl	80009e0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000790:	f000 f97c 	bl	8000a8c <MX_SPI2_Init>
  MX_SPI3_Init();
 8000794:	f000 f9d0 	bl	8000b38 <MX_SPI3_Init>
  MX_SPI6_Init();
 8000798:	f000 fa24 	bl	8000be4 <MX_SPI6_Init>
  MX_USART1_UART_Init();
 800079c:	f000 fa72 	bl	8000c84 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /*CHECK RADAR FOR CONNECTIVITY ______________________________________________________*/
  struct bgt60utr13d_h h_1 = {
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	4b46      	ldr	r3, [pc, #280]	@ (80008c8 <main+0x154>)
 80007b0:	617b      	str	r3, [r7, #20]
 80007b2:	4b46      	ldr	r3, [pc, #280]	@ (80008cc <main+0x158>)
 80007b4:	61bb      	str	r3, [r7, #24]
 80007b6:	4b46      	ldr	r3, [pc, #280]	@ (80008d0 <main+0x15c>)
 80007b8:	623b      	str	r3, [r7, #32]
      .read_regs = read_regs_1,
      .write_regs = write_regs_1,
      .log = drvrlog,
  };

  struct bgt60utr13d_h h_2 = {
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	4b43      	ldr	r3, [pc, #268]	@ (80008d4 <main+0x160>)
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b43      	ldr	r3, [pc, #268]	@ (80008d8 <main+0x164>)
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	4b40      	ldr	r3, [pc, #256]	@ (80008d0 <main+0x15c>)
 80007d0:	613b      	str	r3, [r7, #16]
        .read_regs = read_regs_2,
        .write_regs = write_regs_2,
        .log = drvrlog,
    };

  if (bgt60utr13d_init(&h_1) != E_BGT60UTR13D_SUCCESS) {
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4618      	mov	r0, r3
 80007d8:	f009 fbe8 	bl	8009fac <bgt60utr13d_init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d005      	beq.n	80007ee <main+0x7a>
	  printf("Driver Init failed!\n");
 80007e2:	483e      	ldr	r0, [pc, #248]	@ (80008dc <main+0x168>)
 80007e4:	f00a f916 	bl	800aa14 <puts>
      return -1;
 80007e8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ec:	e065      	b.n	80008ba <main+0x146>
  }

  if (bgt60utr13d_init(&h_2) != E_BGT60UTR13D_SUCCESS) {
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	4618      	mov	r0, r3
 80007f2:	f009 fbdb 	bl	8009fac <bgt60utr13d_init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d005      	beq.n	8000808 <main+0x94>
  	  printf("Driver Init failed!\n");
 80007fc:	4837      	ldr	r0, [pc, #220]	@ (80008dc <main+0x168>)
 80007fe:	f00a f909 	bl	800aa14 <puts>
        return -1;
 8000802:	f04f 33ff 	mov.w	r3, #4294967295
 8000806:	e058      	b.n	80008ba <main+0x146>
    }
  /*CHECK RADAR FOR CONNECTIVITY ______________________________________________________*/

  /*CHECK TOF FOR CONNECTIVITY ______________________________________________________*/
  status = vl53l8cx_is_alive(&Dev, &isAlive);
 8000808:	4935      	ldr	r1, [pc, #212]	@ (80008e0 <main+0x16c>)
 800080a:	4836      	ldr	r0, [pc, #216]	@ (80008e4 <main+0x170>)
 800080c:	f001 f9fb 	bl	8001c06 <vl53l8cx_is_alive>
 8000810:	4603      	mov	r3, r0
 8000812:	461a      	mov	r2, r3
 8000814:	4b34      	ldr	r3, [pc, #208]	@ (80008e8 <main+0x174>)
 8000816:	601a      	str	r2, [r3, #0]
  if(!isAlive)
 8000818:	4b31      	ldr	r3, [pc, #196]	@ (80008e0 <main+0x16c>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d107      	bne.n	8000830 <main+0xbc>
  {
	  printf("VL53L8CX with SPI communication not detected, error : %d\n", status);
 8000820:	4b31      	ldr	r3, [pc, #196]	@ (80008e8 <main+0x174>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4619      	mov	r1, r3
 8000826:	4831      	ldr	r0, [pc, #196]	@ (80008ec <main+0x178>)
 8000828:	f00a f88c 	bl	800a944 <iprintf>
	  return 255;
 800082c:	23ff      	movs	r3, #255	@ 0xff
 800082e:	e044      	b.n	80008ba <main+0x146>
  }
  printf("VL53l8cx is alive!\n");
 8000830:	482f      	ldr	r0, [pc, #188]	@ (80008f0 <main+0x17c>)
 8000832:	f00a f8ef 	bl	800aa14 <puts>

  printf("proceeding to GPIO port check\n");
 8000836:	482f      	ldr	r0, [pc, #188]	@ (80008f4 <main+0x180>)
 8000838:	f00a f8ec 	bl	800aa14 <puts>

  for(int i = 0; i < 10; i++) {
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000840:	e036      	b.n	80008b0 <main+0x13c>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000842:	2201      	movs	r2, #1
 8000844:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000848:	482b      	ldr	r0, [pc, #172]	@ (80008f8 <main+0x184>)
 800084a:	f001 fdbd 	bl	80023c8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800084e:	2201      	movs	r2, #1
 8000850:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000854:	4828      	ldr	r0, [pc, #160]	@ (80008f8 <main+0x184>)
 8000856:	f001 fdb7 	bl	80023c8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800085a:	2201      	movs	r2, #1
 800085c:	2108      	movs	r1, #8
 800085e:	4827      	ldr	r0, [pc, #156]	@ (80008fc <main+0x188>)
 8000860:	f001 fdb2 	bl	80023c8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000864:	2201      	movs	r2, #1
 8000866:	2108      	movs	r1, #8
 8000868:	4825      	ldr	r0, [pc, #148]	@ (8000900 <main+0x18c>)
 800086a:	f001 fdad 	bl	80023c8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 800086e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000872:	f001 facf 	bl	8001e14 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800087c:	481e      	ldr	r0, [pc, #120]	@ (80008f8 <main+0x184>)
 800087e:	f001 fda3 	bl	80023c8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000888:	481b      	ldr	r0, [pc, #108]	@ (80008f8 <main+0x184>)
 800088a:	f001 fd9d 	bl	80023c8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	2108      	movs	r1, #8
 8000892:	481a      	ldr	r0, [pc, #104]	@ (80008fc <main+0x188>)
 8000894:	f001 fd98 	bl	80023c8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	2108      	movs	r1, #8
 800089c:	4818      	ldr	r0, [pc, #96]	@ (8000900 <main+0x18c>)
 800089e:	f001 fd93 	bl	80023c8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80008a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008a6:	f001 fab5 	bl	8001e14 <HAL_Delay>
  for(int i = 0; i < 10; i++) {
 80008aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008ac:	3301      	adds	r3, #1
 80008ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80008b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008b2:	2b09      	cmp	r3, #9
 80008b4:	ddc5      	ble.n	8000842 <main+0xce>
  /*CHECK TOF FOR CONNECTIVITY ______________________________________________________*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008b6:	bf00      	nop
 80008b8:	e7fd      	b.n	80008b6 <main+0x142>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3728      	adds	r7, #40	@ 0x28
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	0800b77c 	.word	0x0800b77c
 80008c8:	080005a5 	.word	0x080005a5
 80008cc:	08000605 	.word	0x08000605
 80008d0:	08000715 	.word	0x08000715
 80008d4:	0800065d 	.word	0x0800065d
 80008d8:	080006bd 	.word	0x080006bd
 80008dc:	0800b78c 	.word	0x0800b78c
 80008e0:	20008e2c 	.word	0x20008e2c
 80008e4:	2000035c 	.word	0x2000035c
 80008e8:	20000358 	.word	0x20000358
 80008ec:	0800b7a0 	.word	0x0800b7a0
 80008f0:	0800b7dc 	.word	0x0800b7dc
 80008f4:	0800b7f0 	.word	0x0800b7f0
 80008f8:	42020400 	.word	0x42020400
 80008fc:	42020000 	.word	0x42020000
 8000900:	42020800 	.word	0x42020800

08000904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b09c      	sub	sp, #112	@ 0x70
 8000908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090a:	f107 0320 	add.w	r3, r7, #32
 800090e:	2250      	movs	r2, #80	@ 0x50
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f00a f95e 	bl	800abd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000918:	f107 0308 	add.w	r3, r7, #8
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
 8000928:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800092a:	4b2c      	ldr	r3, [pc, #176]	@ (80009dc <SystemClock_Config+0xd8>)
 800092c:	691b      	ldr	r3, [r3, #16]
 800092e:	4a2b      	ldr	r2, [pc, #172]	@ (80009dc <SystemClock_Config+0xd8>)
 8000930:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000934:	6113      	str	r3, [r2, #16]
 8000936:	4b29      	ldr	r3, [pc, #164]	@ (80009dc <SystemClock_Config+0xd8>)
 8000938:	691b      	ldr	r3, [r3, #16]
 800093a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000942:	bf00      	nop
 8000944:	4b25      	ldr	r3, [pc, #148]	@ (80009dc <SystemClock_Config+0xd8>)
 8000946:	695b      	ldr	r3, [r3, #20]
 8000948:	f003 0308 	and.w	r3, r3, #8
 800094c:	2b08      	cmp	r3, #8
 800094e:	d1f9      	bne.n	8000944 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_CSI;
 8000950:	2312      	movs	r3, #18
 8000952:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000954:	2301      	movs	r3, #1
 8000956:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 8000958:	2308      	movs	r3, #8
 800095a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800095c:	2340      	movs	r3, #64	@ 0x40
 800095e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000960:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000964:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000966:	2320      	movs	r3, #32
 8000968:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096a:	2302      	movs	r3, #2
 800096c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 800096e:	2302      	movs	r3, #2
 8000970:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000972:	2301      	movs	r3, #1
 8000974:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000976:	2320      	movs	r3, #32
 8000978:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800097a:	2302      	movs	r3, #2
 800097c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800097e:	2302      	movs	r3, #2
 8000980:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000982:	2302      	movs	r3, #2
 8000984:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8000986:	2308      	movs	r3, #8
 8000988:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800098a:	2300      	movs	r3, #0
 800098c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000992:	f107 0320 	add.w	r3, r7, #32
 8000996:	4618      	mov	r0, r3
 8000998:	f001 fd2e 	bl	80023f8 <HAL_RCC_OscConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80009a2:	f000 fa7d 	bl	8000ea0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a6:	231f      	movs	r3, #31
 80009a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	2101      	movs	r1, #1
 80009c4:	4618      	mov	r0, r3
 80009c6:	f002 f94f 	bl	8002c68 <HAL_RCC_ClockConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80009d0:	f000 fa66 	bl	8000ea0 <Error_Handler>
  }
}
 80009d4:	bf00      	nop
 80009d6:	3770      	adds	r7, #112	@ 0x70
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	44020800 	.word	0x44020800

080009e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009e4:	4b27      	ldr	r3, [pc, #156]	@ (8000a84 <MX_SPI1_Init+0xa4>)
 80009e6:	4a28      	ldr	r2, [pc, #160]	@ (8000a88 <MX_SPI1_Init+0xa8>)
 80009e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009ea:	4b26      	ldr	r3, [pc, #152]	@ (8000a84 <MX_SPI1_Init+0xa4>)
 80009ec:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80009f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009f2:	4b24      	ldr	r3, [pc, #144]	@ (8000a84 <MX_SPI1_Init+0xa4>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009f8:	4b22      	ldr	r3, [pc, #136]	@ (8000a84 <MX_SPI1_Init+0xa4>)
 80009fa:	2207      	movs	r2, #7
 80009fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009fe:	4b21      	ldr	r3, [pc, #132]	@ (8000a84 <MX_SPI1_Init+0xa4>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a04:	4b1f      	ldr	r3, [pc, #124]	@ (8000a84 <MX_SPI1_Init+0xa4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000a84 <MX_SPI1_Init+0xa4>)
 8000a0c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000a10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a12:	4b1c      	ldr	r3, [pc, #112]	@ (8000a84 <MX_SPI1_Init+0xa4>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a18:	4b1a      	ldr	r3, [pc, #104]	@ (8000a84 <MX_SPI1_Init+0xa4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a1e:	4b19      	ldr	r3, [pc, #100]	@ (8000a84 <MX_SPI1_Init+0xa4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a24:	4b17      	ldr	r3, [pc, #92]	@ (8000a84 <MX_SPI1_Init+0xa4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000a2a:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <MX_SPI1_Init+0xa4>)
 8000a2c:	2207      	movs	r2, #7
 8000a2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a30:	4b14      	ldr	r3, [pc, #80]	@ (8000a84 <MX_SPI1_Init+0xa4>)
 8000a32:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a36:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a38:	4b12      	ldr	r3, [pc, #72]	@ (8000a84 <MX_SPI1_Init+0xa4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a3e:	4b11      	ldr	r3, [pc, #68]	@ (8000a84 <MX_SPI1_Init+0xa4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <MX_SPI1_Init+0xa4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <MX_SPI1_Init+0xa4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <MX_SPI1_Init+0xa4>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	@ (8000a84 <MX_SPI1_Init+0xa4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <MX_SPI1_Init+0xa4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000a62:	4b08      	ldr	r3, [pc, #32]	@ (8000a84 <MX_SPI1_Init+0xa4>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000a68:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <MX_SPI1_Init+0xa4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a6e:	4805      	ldr	r0, [pc, #20]	@ (8000a84 <MX_SPI1_Init+0xa4>)
 8000a70:	f007 fc16 	bl	80082a0 <HAL_SPI_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000a7a:	f000 fa11 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000084 	.word	0x20000084
 8000a88:	40013000 	.word	0x40013000

08000a8c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a90:	4b27      	ldr	r3, [pc, #156]	@ (8000b30 <MX_SPI2_Init+0xa4>)
 8000a92:	4a28      	ldr	r2, [pc, #160]	@ (8000b34 <MX_SPI2_Init+0xa8>)
 8000a94:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a96:	4b26      	ldr	r3, [pc, #152]	@ (8000b30 <MX_SPI2_Init+0xa4>)
 8000a98:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000a9c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a9e:	4b24      	ldr	r3, [pc, #144]	@ (8000b30 <MX_SPI2_Init+0xa4>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000aa4:	4b22      	ldr	r3, [pc, #136]	@ (8000b30 <MX_SPI2_Init+0xa4>)
 8000aa6:	2207      	movs	r2, #7
 8000aa8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aaa:	4b21      	ldr	r3, [pc, #132]	@ (8000b30 <MX_SPI2_Init+0xa4>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b30 <MX_SPI2_Init+0xa4>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b30 <MX_SPI2_Init+0xa4>)
 8000ab8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000abc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000abe:	4b1c      	ldr	r3, [pc, #112]	@ (8000b30 <MX_SPI2_Init+0xa4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b30 <MX_SPI2_Init+0xa4>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aca:	4b19      	ldr	r3, [pc, #100]	@ (8000b30 <MX_SPI2_Init+0xa4>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ad0:	4b17      	ldr	r3, [pc, #92]	@ (8000b30 <MX_SPI2_Init+0xa4>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8000ad6:	4b16      	ldr	r3, [pc, #88]	@ (8000b30 <MX_SPI2_Init+0xa4>)
 8000ad8:	2207      	movs	r2, #7
 8000ada:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000adc:	4b14      	ldr	r3, [pc, #80]	@ (8000b30 <MX_SPI2_Init+0xa4>)
 8000ade:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ae2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	@ (8000b30 <MX_SPI2_Init+0xa4>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000aea:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <MX_SPI2_Init+0xa4>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b30 <MX_SPI2_Init+0xa4>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000af6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <MX_SPI2_Init+0xa4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <MX_SPI2_Init+0xa4>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	@ (8000b30 <MX_SPI2_Init+0xa4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b08:	4b09      	ldr	r3, [pc, #36]	@ (8000b30 <MX_SPI2_Init+0xa4>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000b0e:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <MX_SPI2_Init+0xa4>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000b14:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <MX_SPI2_Init+0xa4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b1a:	4805      	ldr	r0, [pc, #20]	@ (8000b30 <MX_SPI2_Init+0xa4>)
 8000b1c:	f007 fbc0 	bl	80082a0 <HAL_SPI_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000b26:	f000 f9bb 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000114 	.word	0x20000114
 8000b34:	40003800 	.word	0x40003800

08000b38 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b3c:	4b27      	ldr	r3, [pc, #156]	@ (8000bdc <MX_SPI3_Init+0xa4>)
 8000b3e:	4a28      	ldr	r2, [pc, #160]	@ (8000be0 <MX_SPI3_Init+0xa8>)
 8000b40:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b42:	4b26      	ldr	r3, [pc, #152]	@ (8000bdc <MX_SPI3_Init+0xa4>)
 8000b44:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000b48:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b4a:	4b24      	ldr	r3, [pc, #144]	@ (8000bdc <MX_SPI3_Init+0xa4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b50:	4b22      	ldr	r3, [pc, #136]	@ (8000bdc <MX_SPI3_Init+0xa4>)
 8000b52:	2207      	movs	r2, #7
 8000b54:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b56:	4b21      	ldr	r3, [pc, #132]	@ (8000bdc <MX_SPI3_Init+0xa4>)
 8000b58:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000b5c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bdc <MX_SPI3_Init+0xa4>)
 8000b60:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000b64:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b66:	4b1d      	ldr	r3, [pc, #116]	@ (8000bdc <MX_SPI3_Init+0xa4>)
 8000b68:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b6c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bdc <MX_SPI3_Init+0xa4>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b74:	4b19      	ldr	r3, [pc, #100]	@ (8000bdc <MX_SPI3_Init+0xa4>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b7a:	4b18      	ldr	r3, [pc, #96]	@ (8000bdc <MX_SPI3_Init+0xa4>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b80:	4b16      	ldr	r3, [pc, #88]	@ (8000bdc <MX_SPI3_Init+0xa4>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x7;
 8000b86:	4b15      	ldr	r3, [pc, #84]	@ (8000bdc <MX_SPI3_Init+0xa4>)
 8000b88:	2207      	movs	r2, #7
 8000b8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b8c:	4b13      	ldr	r3, [pc, #76]	@ (8000bdc <MX_SPI3_Init+0xa4>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b92:	4b12      	ldr	r3, [pc, #72]	@ (8000bdc <MX_SPI3_Init+0xa4>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b98:	4b10      	ldr	r3, [pc, #64]	@ (8000bdc <MX_SPI3_Init+0xa4>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <MX_SPI3_Init+0xa4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8000bdc <MX_SPI3_Init+0xa4>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000baa:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <MX_SPI3_Init+0xa4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bdc <MX_SPI3_Init+0xa4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000bb6:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <MX_SPI3_Init+0xa4>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi3.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000bbc:	4b07      	ldr	r3, [pc, #28]	@ (8000bdc <MX_SPI3_Init+0xa4>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi3.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000bc2:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <MX_SPI3_Init+0xa4>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000bc8:	4804      	ldr	r0, [pc, #16]	@ (8000bdc <MX_SPI3_Init+0xa4>)
 8000bca:	f007 fb69 	bl	80082a0 <HAL_SPI_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8000bd4:	f000 f964 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	200001a4 	.word	0x200001a4
 8000be0:	40003c00 	.word	0x40003c00

08000be4 <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  hspi6.Instance = SPI6;
 8000be8:	4b24      	ldr	r3, [pc, #144]	@ (8000c7c <MX_SPI6_Init+0x98>)
 8000bea:	4a25      	ldr	r2, [pc, #148]	@ (8000c80 <MX_SPI6_Init+0x9c>)
 8000bec:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_SLAVE;
 8000bee:	4b23      	ldr	r3, [pc, #140]	@ (8000c7c <MX_SPI6_Init+0x98>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8000bf4:	4b21      	ldr	r3, [pc, #132]	@ (8000c7c <MX_SPI6_Init+0x98>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_4BIT;
 8000bfa:	4b20      	ldr	r3, [pc, #128]	@ (8000c7c <MX_SPI6_Init+0x98>)
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c00:	4b1e      	ldr	r3, [pc, #120]	@ (8000c7c <MX_SPI6_Init+0x98>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c06:	4b1d      	ldr	r3, [pc, #116]	@ (8000c7c <MX_SPI6_Init+0x98>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8000c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c7c <MX_SPI6_Init+0x98>)
 8000c0e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000c12:	619a      	str	r2, [r3, #24]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c14:	4b19      	ldr	r3, [pc, #100]	@ (8000c7c <MX_SPI6_Init+0x98>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c1a:	4b18      	ldr	r3, [pc, #96]	@ (8000c7c <MX_SPI6_Init+0x98>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c20:	4b16      	ldr	r3, [pc, #88]	@ (8000c7c <MX_SPI6_Init+0x98>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi6.Init.CRCPolynomial = 0x7;
 8000c26:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <MX_SPI6_Init+0x98>)
 8000c28:	2207      	movs	r2, #7
 8000c2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c2c:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <MX_SPI6_Init+0x98>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c32:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <MX_SPI6_Init+0x98>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c38:	4b10      	ldr	r3, [pc, #64]	@ (8000c7c <MX_SPI6_Init+0x98>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <MX_SPI6_Init+0x98>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c44:	4b0d      	ldr	r3, [pc, #52]	@ (8000c7c <MX_SPI6_Init+0x98>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <MX_SPI6_Init+0x98>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c50:	4b0a      	ldr	r3, [pc, #40]	@ (8000c7c <MX_SPI6_Init+0x98>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c56:	4b09      	ldr	r3, [pc, #36]	@ (8000c7c <MX_SPI6_Init+0x98>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi6.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000c5c:	4b07      	ldr	r3, [pc, #28]	@ (8000c7c <MX_SPI6_Init+0x98>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi6.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000c62:	4b06      	ldr	r3, [pc, #24]	@ (8000c7c <MX_SPI6_Init+0x98>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8000c68:	4804      	ldr	r0, [pc, #16]	@ (8000c7c <MX_SPI6_Init+0x98>)
 8000c6a:	f007 fb19 	bl	80082a0 <HAL_SPI_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_SPI6_Init+0x94>
  {
    Error_Handler();
 8000c74:	f000 f914 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000234 	.word	0x20000234
 8000c80:	40015000 	.word	0x40015000

08000c84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c88:	4b22      	ldr	r3, [pc, #136]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000c8a:	4a23      	ldr	r2, [pc, #140]	@ (8000d18 <MX_USART1_UART_Init+0x94>)
 8000c8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c8e:	4b21      	ldr	r3, [pc, #132]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000c90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c96:	4b1f      	ldr	r3, [pc, #124]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000caa:	220c      	movs	r2, #12
 8000cac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cae:	4b19      	ldr	r3, [pc, #100]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb4:	4b17      	ldr	r3, [pc, #92]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cba:	4b16      	ldr	r3, [pc, #88]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cc0:	4b14      	ldr	r3, [pc, #80]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc6:	4b13      	ldr	r3, [pc, #76]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ccc:	4811      	ldr	r0, [pc, #68]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000cce:	f008 fb6a 	bl	80093a6 <HAL_UART_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000cd8:	f000 f8e2 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cdc:	2100      	movs	r1, #0
 8000cde:	480d      	ldr	r0, [pc, #52]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000ce0:	f008 fff8 	bl	8009cd4 <HAL_UARTEx_SetTxFifoThreshold>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000cea:	f000 f8d9 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4808      	ldr	r0, [pc, #32]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000cf2:	f009 f82d 	bl	8009d50 <HAL_UARTEx_SetRxFifoThreshold>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000cfc:	f000 f8d0 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d00:	4804      	ldr	r0, [pc, #16]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000d02:	f008 ffae 	bl	8009c62 <HAL_UARTEx_DisableFifoMode>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d0c:	f000 f8c8 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	200002c4 	.word	0x200002c4
 8000d18:	40013800 	.word	0x40013800

08000d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	@ 0x28
 8000d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
 8000d30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d32:	4b56      	ldr	r3, [pc, #344]	@ (8000e8c <MX_GPIO_Init+0x170>)
 8000d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d38:	4a54      	ldr	r2, [pc, #336]	@ (8000e8c <MX_GPIO_Init+0x170>)
 8000d3a:	f043 0304 	orr.w	r3, r3, #4
 8000d3e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d42:	4b52      	ldr	r3, [pc, #328]	@ (8000e8c <MX_GPIO_Init+0x170>)
 8000d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d48:	f003 0304 	and.w	r3, r3, #4
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d50:	4b4e      	ldr	r3, [pc, #312]	@ (8000e8c <MX_GPIO_Init+0x170>)
 8000d52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d56:	4a4d      	ldr	r2, [pc, #308]	@ (8000e8c <MX_GPIO_Init+0x170>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d60:	4b4a      	ldr	r3, [pc, #296]	@ (8000e8c <MX_GPIO_Init+0x170>)
 8000d62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	4b47      	ldr	r3, [pc, #284]	@ (8000e8c <MX_GPIO_Init+0x170>)
 8000d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d74:	4a45      	ldr	r2, [pc, #276]	@ (8000e8c <MX_GPIO_Init+0x170>)
 8000d76:	f043 0302 	orr.w	r3, r3, #2
 8000d7a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d7e:	4b43      	ldr	r3, [pc, #268]	@ (8000e8c <MX_GPIO_Init+0x170>)
 8000d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d84:	f003 0302 	and.w	r3, r3, #2
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8c:	4b3f      	ldr	r3, [pc, #252]	@ (8000e8c <MX_GPIO_Init+0x170>)
 8000d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d92:	4a3e      	ldr	r2, [pc, #248]	@ (8000e8c <MX_GPIO_Init+0x170>)
 8000d94:	f043 0308 	orr.w	r3, r3, #8
 8000d98:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d9c:	4b3b      	ldr	r3, [pc, #236]	@ (8000e8c <MX_GPIO_Init+0x170>)
 8000d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000da2:	f003 0308 	and.w	r3, r3, #8
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 8000daa:	2200      	movs	r2, #0
 8000dac:	f24e 11c8 	movw	r1, #57800	@ 0xe1c8
 8000db0:	4837      	ldr	r0, [pc, #220]	@ (8000e90 <MX_GPIO_Init+0x174>)
 8000db2:	f001 fb09 	bl	80023c8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	210f      	movs	r1, #15
 8000dba:	4836      	ldr	r0, [pc, #216]	@ (8000e94 <MX_GPIO_Init+0x178>)
 8000dbc:	f001 fb04 	bl	80023c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f44f 4130 	mov.w	r1, #45056	@ 0xb000
 8000dc6:	4834      	ldr	r0, [pc, #208]	@ (8000e98 <MX_GPIO_Init+0x17c>)
 8000dc8:	f001 fafe 	bl	80023c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8000dd2:	4832      	ldr	r0, [pc, #200]	@ (8000e9c <MX_GPIO_Init+0x180>)
 8000dd4:	f001 faf8 	bl	80023c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC3
                           PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 8000dd8:	f24e 13c8 	movw	r3, #57800	@ 0xe1c8
 8000ddc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dea:	f107 0314 	add.w	r3, r7, #20
 8000dee:	4619      	mov	r1, r3
 8000df0:	4827      	ldr	r0, [pc, #156]	@ (8000e90 <MX_GPIO_Init+0x174>)
 8000df2:	f001 f997 	bl	8002124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000df6:	230f      	movs	r3, #15
 8000df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4821      	ldr	r0, [pc, #132]	@ (8000e94 <MX_GPIO_Init+0x178>)
 8000e0e:	f001 f989 	bl	8002124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000e12:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4619      	mov	r1, r3
 8000e2a:	481b      	ldr	r0, [pc, #108]	@ (8000e98 <MX_GPIO_Init+0x17c>)
 8000e2c:	f001 f97a 	bl	8002124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000e30:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	4814      	ldr	r0, [pc, #80]	@ (8000e98 <MX_GPIO_Init+0x17c>)
 8000e46:	f001 f96d 	bl	8002124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e4a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000e4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4619      	mov	r1, r3
 8000e62:	480e      	ldr	r0, [pc, #56]	@ (8000e9c <MX_GPIO_Init+0x180>)
 8000e64:	f001 f95e 	bl	8002124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4805      	ldr	r0, [pc, #20]	@ (8000e94 <MX_GPIO_Init+0x178>)
 8000e7e:	f001 f951 	bl	8002124 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e82:	bf00      	nop
 8000e84:	3728      	adds	r7, #40	@ 0x28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	44020c00 	.word	0x44020c00
 8000e90:	42020800 	.word	0x42020800
 8000e94:	42020000 	.word	0x42020000
 8000e98:	42020400 	.word	0x42020400
 8000e9c:	42020c00 	.word	0x42020c00

08000ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea4:	b672      	cpsid	i
}
 8000ea6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <Error_Handler+0x8>

08000eac <RdByte>:

uint8_t RdByte(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	607a      	str	r2, [r7, #4]
 8000eb8:	817b      	strh	r3, [r7, #10]
	return RdMulti(p_platform, RegisterAdress, p_value, 1);
 8000eba:	8979      	ldrh	r1, [r7, #10]
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	68f8      	ldr	r0, [r7, #12]
 8000ec2:	f000 f937 	bl	8001134 <RdMulti>
 8000ec6:	4603      	mov	r3, r0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <WrByte>:

uint8_t WrByte(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	807b      	strh	r3, [r7, #2]
 8000edc:	4613      	mov	r3, r2
 8000ede:	707b      	strb	r3, [r7, #1]
	return WrMulti(p_platform, RegisterAdress, &value, 1);
 8000ee0:	1c7a      	adds	r2, r7, #1
 8000ee2:	8879      	ldrh	r1, [r7, #2]
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f000 f806 	bl	8000ef8 <WrMulti>
 8000eec:	4603      	mov	r3, r0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <WrMulti>:
uint8_t WrMulti(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8000f06:	f844 0c1c 	str.w	r0, [r4, #-28]
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000f10:	f841 2c24 	str.w	r2, [r1, #-36]
 8000f14:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000f18:	f842 3c28 	str.w	r3, [r2, #-40]
 8000f1c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f20:	4602      	mov	r2, r0
 8000f22:	f823 2c1e 	strh.w	r2, [r3, #-30]
	uint8_t status = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8000f2c:	f102 0207 	add.w	r2, r2, #7
 8000f30:	7013      	strb	r3, [r2, #0]
	int32_t i = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8000f38:	6013      	str	r3, [r2, #0]
	uint32_t position = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000f40:	f102 021c 	add.w	r2, r2, #28
 8000f44:	6013      	str	r3, [r2, #0]
	uint32_t data_size = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000f4c:	f102 0218 	add.w	r2, r2, #24
 8000f50:	6013      	str	r3, [r2, #0]
	uint16_t    temp;
	uint8_t data_write[VL53L8CX_COMMS_CHUNK_SIZE + 2];

	for (position = 0; position < size; position += VL53L8CX_COMMS_CHUNK_SIZE)
 8000f52:	2300      	movs	r3, #0
 8000f54:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000f58:	f102 021c 	add.w	r2, r2, #28
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	e0cd      	b.n	80010fc <WrMulti+0x204>
	{
		if (size > VL53L8CX_COMMS_CHUNK_SIZE)
 8000f60:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f64:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000f68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f6c:	d924      	bls.n	8000fb8 <WrMulti+0xc0>
		{
			if ((position + VL53L8CX_COMMS_CHUNK_SIZE) > size)
 8000f6e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000f72:	f103 031c 	add.w	r3, r3, #28
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000f7c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000f80:	f852 2c28 	ldr.w	r2, [r2, #-40]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d20f      	bcs.n	8000fa8 <WrMulti+0xb0>
			{
				data_size = size - position;
 8000f88:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f8c:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8000f90:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000f94:	f103 031c 	add.w	r3, r3, #28
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000fa0:	f102 0218 	add.w	r2, r2, #24
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	e010      	b.n	8000fca <WrMulti+0xd2>
			} else
			{
				data_size = VL53L8CX_COMMS_CHUNK_SIZE;
 8000fa8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fac:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000fb0:	f102 0218 	add.w	r2, r2, #24
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	e008      	b.n	8000fca <WrMulti+0xd2>
			}
		} else
		{
			data_size = size;
 8000fb8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fbc:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000fc0:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000fc4:	f102 0218 	add.w	r2, r2, #24
 8000fc8:	6013      	str	r3, [r2, #0]
		}

		temp = RegisterAdress+position;
 8000fca:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000fce:	f103 031c 	add.w	r3, r3, #28
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fda:	f833 3c1e 	ldrh.w	r3, [r3, #-30]
 8000fde:	4413      	add	r3, r2
 8000fe0:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000fe4:	f102 0216 	add.w	r2, r2, #22
 8000fe8:	8013      	strh	r3, [r2, #0]

		data_write[0] = SPI_WRITE_MASK(temp) >> 8;
 8000fea:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000fee:	f103 0316 	add.w	r3, r3, #22
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001004:	f803 2c14 	strb.w	r2, [r3, #-20]
		data_write[1] = SPI_WRITE_MASK(temp) & 0xFF;
 8001008:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800100c:	f103 0316 	add.w	r3, r3, #22
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	b2da      	uxtb	r2, r3
 8001014:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001018:	f803 2c13 	strb.w	r2, [r3, #-19]

		for (i=0; i<data_size; i++)
 800101c:	2300      	movs	r3, #0
 800101e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	e01e      	b.n	8001064 <WrMulti+0x16c>
		{
			data_write[i+2] = p_values[position + i];
 8001026:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001030:	f103 031c 	add.w	r3, r3, #28
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4413      	add	r3, r2
 8001038:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800103c:	f852 2c24 	ldr.w	r2, [r2, #-36]
 8001040:	441a      	add	r2, r3
 8001042:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	3302      	adds	r3, #2
 800104a:	7812      	ldrb	r2, [r2, #0]
 800104c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001050:	440b      	add	r3, r1
 8001052:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (i=0; i<data_size; i++)
 8001056:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	3301      	adds	r3, #1
 800105e:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800106e:	f102 0218 	add.w	r2, r2, #24
 8001072:	6812      	ldr	r2, [r2, #0]
 8001074:	429a      	cmp	r2, r3
 8001076:	d8d6      	bhi.n	8001026 <WrMulti+0x12e>
		}


		data_size += 2;
 8001078:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800107c:	f103 0318 	add.w	r3, r3, #24
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	3302      	adds	r3, #2
 8001084:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001088:	f102 0218 	add.w	r2, r2, #24
 800108c:	6013      	str	r3, [r2, #0]

		HAL_GPIO_WritePin(TOF_1_CS_PORT, TOF_1_CS_PIN, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2140      	movs	r1, #64	@ 0x40
 8001092:	4826      	ldr	r0, [pc, #152]	@ (800112c <WrMulti+0x234>)
 8001094:	f001 f998 	bl	80023c8 <HAL_GPIO_WritePin>
		status |= HAL_SPI_Transmit(&hspi3, data_write, data_size, 100*data_size);
 8001098:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800109c:	f103 0318 	add.w	r3, r3, #24
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80010a8:	f103 0318 	add.w	r3, r3, #24
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2164      	movs	r1, #100	@ 0x64
 80010b0:	fb01 f303 	mul.w	r3, r1, r3
 80010b4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80010b8:	3914      	subs	r1, #20
 80010ba:	481d      	ldr	r0, [pc, #116]	@ (8001130 <WrMulti+0x238>)
 80010bc:	f007 fa60 	bl	8008580 <HAL_SPI_Transmit>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 80010c8:	f103 0307 	add.w	r3, r3, #7
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	f507 5281 	add.w	r2, r7, #4128	@ 0x1020
 80010d4:	f102 0207 	add.w	r2, r2, #7
 80010d8:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(TOF_1_CS_PORT, TOF_1_CS_PIN, GPIO_PIN_SET);
 80010da:	2201      	movs	r2, #1
 80010dc:	2140      	movs	r1, #64	@ 0x40
 80010de:	4813      	ldr	r0, [pc, #76]	@ (800112c <WrMulti+0x234>)
 80010e0:	f001 f972 	bl	80023c8 <HAL_GPIO_WritePin>
	for (position = 0; position < size; position += VL53L8CX_COMMS_CHUNK_SIZE)
 80010e4:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80010e8:	f103 031c 	add.w	r3, r3, #28
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80010f2:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80010f6:	f102 021c 	add.w	r2, r2, #28
 80010fa:	6013      	str	r3, [r2, #0]
 80010fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001100:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001104:	f102 021c 	add.w	r2, r2, #28
 8001108:	6812      	ldr	r2, [r2, #0]
 800110a:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800110e:	429a      	cmp	r2, r3
 8001110:	f4ff af26 	bcc.w	8000f60 <WrMulti+0x68>
	}

	return status;
 8001114:	f507 5381 	add.w	r3, r7, #4128	@ 0x1020
 8001118:	f103 0307 	add.w	r3, r3, #7
 800111c:	781b      	ldrb	r3, [r3, #0]
}
 800111e:	4618      	mov	r0, r3
 8001120:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	bd90      	pop	{r4, r7, pc}
 800112a:	bf00      	nop
 800112c:	42020800 	.word	0x42020800
 8001130:	200001a4 	.word	0x200001a4

08001134 <RdMulti>:
uint8_t RdMulti(
		VL53L8CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	f5ad 5d81 	sub.w	sp, sp, #4128	@ 0x1020
 800113a:	b081      	sub	sp, #4
 800113c:	af00      	add	r7, sp, #0
 800113e:	f107 0420 	add.w	r4, r7, #32
 8001142:	f844 0c14 	str.w	r0, [r4, #-20]
 8001146:	4608      	mov	r0, r1
 8001148:	f107 0120 	add.w	r1, r7, #32
 800114c:	f841 2c1c 	str.w	r2, [r1, #-28]
 8001150:	f107 0220 	add.w	r2, r7, #32
 8001154:	f842 3c20 	str.w	r3, [r2, #-32]
 8001158:	f107 0320 	add.w	r3, r7, #32
 800115c:	4602      	mov	r2, r0
 800115e:	f823 2c16 	strh.w	r2, [r3, #-22]
	uint8_t status = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001168:	f102 021f 	add.w	r2, r2, #31
 800116c:	7013      	strb	r3, [r2, #0]


	uint32_t position = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001174:	f102 0218 	add.w	r2, r2, #24
 8001178:	6013      	str	r3, [r2, #0]
	uint32_t data_size = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001180:	f102 0214 	add.w	r2, r2, #20
 8001184:	6013      	str	r3, [r2, #0]
	uint16_t    temp;
	uint8_t data_write[VL53L8CX_COMMS_CHUNK_SIZE + 2];

	for (position = 0; position < size; position += VL53L8CX_COMMS_CHUNK_SIZE)
 8001186:	2300      	movs	r3, #0
 8001188:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800118c:	f102 0218 	add.w	r2, r2, #24
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	e0b0      	b.n	80012f6 <RdMulti+0x1c2>
	{
		if (size > VL53L8CX_COMMS_CHUNK_SIZE)
 8001194:	f107 0320 	add.w	r3, r7, #32
 8001198:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800119c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80011a0:	d924      	bls.n	80011ec <RdMulti+0xb8>
		{
			if ((position + VL53L8CX_COMMS_CHUNK_SIZE) > size)
 80011a2:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80011a6:	f103 0318 	add.w	r3, r3, #24
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80011b0:	f107 0220 	add.w	r2, r7, #32
 80011b4:	f852 2c20 	ldr.w	r2, [r2, #-32]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d20f      	bcs.n	80011dc <RdMulti+0xa8>
			{
				data_size = size - position;
 80011bc:	f107 0320 	add.w	r3, r7, #32
 80011c0:	f853 2c20 	ldr.w	r2, [r3, #-32]
 80011c4:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80011c8:	f103 0318 	add.w	r3, r3, #24
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80011d4:	f102 0214 	add.w	r2, r2, #20
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	e010      	b.n	80011fe <RdMulti+0xca>
			} else
			{
				data_size = VL53L8CX_COMMS_CHUNK_SIZE;
 80011dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011e0:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80011e4:	f102 0214 	add.w	r2, r2, #20
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	e008      	b.n	80011fe <RdMulti+0xca>
			}
		} else
		{
			data_size = size;
 80011ec:	f107 0320 	add.w	r3, r7, #32
 80011f0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80011f4:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80011f8:	f102 0214 	add.w	r2, r2, #20
 80011fc:	6013      	str	r3, [r2, #0]
		}

		temp = RegisterAdress+position;
 80011fe:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001202:	f103 0318 	add.w	r3, r3, #24
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	b29a      	uxth	r2, r3
 800120a:	f107 0320 	add.w	r3, r7, #32
 800120e:	f833 3c16 	ldrh.w	r3, [r3, #-22]
 8001212:	4413      	add	r3, r2
 8001214:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001218:	f102 0212 	add.w	r2, r2, #18
 800121c:	8013      	strh	r3, [r2, #0]

		data_write[0] = SPI_READ_MASK(temp) >> 8;
 800121e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001222:	f103 0312 	add.w	r3, r3, #18
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	121b      	asrs	r3, r3, #8
 800122a:	b2db      	uxtb	r3, r3
 800122c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001230:	b2da      	uxtb	r2, r3
 8001232:	f107 0320 	add.w	r3, r7, #32
 8001236:	f803 2c10 	strb.w	r2, [r3, #-16]
		data_write[1] = SPI_READ_MASK(temp) & 0xFF;
 800123a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800123e:	f103 0312 	add.w	r3, r3, #18
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	b2da      	uxtb	r2, r3
 8001246:	f107 0320 	add.w	r3, r7, #32
 800124a:	f803 2c0f 	strb.w	r2, [r3, #-15]



		HAL_GPIO_WritePin(TOF_1_CS_PORT, TOF_1_CS_PIN, GPIO_PIN_RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	2140      	movs	r1, #64	@ 0x40
 8001252:	4834      	ldr	r0, [pc, #208]	@ (8001324 <RdMulti+0x1f0>)
 8001254:	f001 f8b8 	bl	80023c8 <HAL_GPIO_WritePin>
		status |= HAL_SPI_Transmit(&hspi3, data_write, 2, 0x1000);
 8001258:	f107 0120 	add.w	r1, r7, #32
 800125c:	3910      	subs	r1, #16
 800125e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001262:	2202      	movs	r2, #2
 8001264:	4830      	ldr	r0, [pc, #192]	@ (8001328 <RdMulti+0x1f4>)
 8001266:	f007 f98b 	bl	8008580 <HAL_SPI_Transmit>
 800126a:	4603      	mov	r3, r0
 800126c:	461a      	mov	r2, r3
 800126e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001272:	f103 031f 	add.w	r3, r3, #31
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4313      	orrs	r3, r2
 800127a:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800127e:	f102 021f 	add.w	r2, r2, #31
 8001282:	7013      	strb	r3, [r2, #0]
		status |= HAL_SPI_Receive(&hspi3, p_values + position, data_size, 100*data_size);
 8001284:	f107 0320 	add.w	r3, r7, #32
 8001288:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 800128c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001290:	f103 0318 	add.w	r3, r3, #24
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	18d1      	adds	r1, r2, r3
 8001298:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800129c:	f103 0314 	add.w	r3, r3, #20
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80012a8:	f103 0314 	add.w	r3, r3, #20
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2064      	movs	r0, #100	@ 0x64
 80012b0:	fb00 f303 	mul.w	r3, r0, r3
 80012b4:	481c      	ldr	r0, [pc, #112]	@ (8001328 <RdMulti+0x1f4>)
 80012b6:	f007 fb79 	bl	80089ac <HAL_SPI_Receive>
 80012ba:	4603      	mov	r3, r0
 80012bc:	461a      	mov	r2, r3
 80012be:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80012c2:	f103 031f 	add.w	r3, r3, #31
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80012ce:	f102 021f 	add.w	r2, r2, #31
 80012d2:	7013      	strb	r3, [r2, #0]
		HAL_GPIO_WritePin(TOF_1_CS_PORT, TOF_1_CS_PIN, GPIO_PIN_SET);
 80012d4:	2201      	movs	r2, #1
 80012d6:	2140      	movs	r1, #64	@ 0x40
 80012d8:	4812      	ldr	r0, [pc, #72]	@ (8001324 <RdMulti+0x1f0>)
 80012da:	f001 f875 	bl	80023c8 <HAL_GPIO_WritePin>
	for (position = 0; position < size; position += VL53L8CX_COMMS_CHUNK_SIZE)
 80012de:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80012e2:	f103 0318 	add.w	r3, r3, #24
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012ec:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80012f0:	f102 0218 	add.w	r2, r2, #24
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	f107 0320 	add.w	r3, r7, #32
 80012fa:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80012fe:	f102 0218 	add.w	r2, r2, #24
 8001302:	6812      	ldr	r2, [r2, #0]
 8001304:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001308:	429a      	cmp	r2, r3
 800130a:	f4ff af43 	bcc.w	8001194 <RdMulti+0x60>
	}

	return status;
 800130e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8001312:	f103 031f 	add.w	r3, r3, #31
 8001316:	781b      	ldrb	r3, [r3, #0]
}
 8001318:	4618      	mov	r0, r3
 800131a:	f507 5781 	add.w	r7, r7, #4128	@ 0x1020
 800131e:	3704      	adds	r7, #4
 8001320:	46bd      	mov	sp, r7
 8001322:	bd90      	pop	{r4, r7, pc}
 8001324:	42020800 	.word	0x42020800
 8001328:	200001a4 	.word	0x200001a4

0800132c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b0d6      	sub	sp, #344	@ 0x158
 8001340:	af00      	add	r7, sp, #0
 8001342:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001346:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800134a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800135c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001360:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001364:	4618      	mov	r0, r3
 8001366:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800136a:	461a      	mov	r2, r3
 800136c:	2100      	movs	r1, #0
 800136e:	f009 fc31 	bl	800abd4 <memset>
  if(hspi->Instance==SPI1)
 8001372:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001376:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4ac7      	ldr	r2, [pc, #796]	@ (800169c <HAL_SPI_MspInit+0x360>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d15e      	bne.n	8001442 <HAL_SPI_MspInit+0x106>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001384:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001388:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800138c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001390:	f04f 0300 	mov.w	r3, #0
 8001394:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8001398:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800139c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013a0:	2200      	movs	r2, #0
 80013a2:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013aa:	4618      	mov	r0, r3
 80013ac:	f001 ff9e 	bl	80032ec <HAL_RCCEx_PeriphCLKConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_SPI_MspInit+0x7e>
    {
      Error_Handler();
 80013b6:	f7ff fd73 	bl	8000ea0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013ba:	4bb9      	ldr	r3, [pc, #740]	@ (80016a0 <HAL_SPI_MspInit+0x364>)
 80013bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80013c0:	4ab7      	ldr	r2, [pc, #732]	@ (80016a0 <HAL_SPI_MspInit+0x364>)
 80013c2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013c6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80013ca:	4bb5      	ldr	r3, [pc, #724]	@ (80016a0 <HAL_SPI_MspInit+0x364>)
 80013cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80013d0:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80013d4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80013d8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80013e2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80013e6:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e8:	4bad      	ldr	r3, [pc, #692]	@ (80016a0 <HAL_SPI_MspInit+0x364>)
 80013ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013ee:	4aac      	ldr	r2, [pc, #688]	@ (80016a0 <HAL_SPI_MspInit+0x364>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80013f8:	4ba9      	ldr	r3, [pc, #676]	@ (80016a0 <HAL_SPI_MspInit+0x364>)
 80013fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013fe:	f003 0201 	and.w	r2, r3, #1
 8001402:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001406:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001410:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001414:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001416:	23e0      	movs	r3, #224	@ 0xe0
 8001418:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141c:	2302      	movs	r3, #2
 800141e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800142e:	2305      	movs	r3, #5
 8001430:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001434:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8001438:	4619      	mov	r1, r3
 800143a:	489a      	ldr	r0, [pc, #616]	@ (80016a4 <HAL_SPI_MspInit+0x368>)
 800143c:	f000 fe72 	bl	8002124 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }

}
 8001440:	e1cf      	b.n	80017e2 <HAL_SPI_MspInit+0x4a6>
  else if(hspi->Instance==SPI2)
 8001442:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001446:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a96      	ldr	r2, [pc, #600]	@ (80016a8 <HAL_SPI_MspInit+0x36c>)
 8001450:	4293      	cmp	r3, r2
 8001452:	f040 808c 	bne.w	800156e <HAL_SPI_MspInit+0x232>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001456:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800145a:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800145e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi2ClockSelection = RCC_SPI2CLKSOURCE_PLL1Q;
 800146a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800146e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001472:	2200      	movs	r2, #0
 8001474:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001478:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800147c:	4618      	mov	r0, r3
 800147e:	f001 ff35 	bl	80032ec <HAL_RCCEx_PeriphCLKConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <HAL_SPI_MspInit+0x150>
      Error_Handler();
 8001488:	f7ff fd0a 	bl	8000ea0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800148c:	4b84      	ldr	r3, [pc, #528]	@ (80016a0 <HAL_SPI_MspInit+0x364>)
 800148e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001492:	4a83      	ldr	r2, [pc, #524]	@ (80016a0 <HAL_SPI_MspInit+0x364>)
 8001494:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001498:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800149c:	4b80      	ldr	r3, [pc, #512]	@ (80016a0 <HAL_SPI_MspInit+0x364>)
 800149e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014a2:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80014a6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80014aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80014b4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80014b8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ba:	4b79      	ldr	r3, [pc, #484]	@ (80016a0 <HAL_SPI_MspInit+0x364>)
 80014bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014c0:	4a77      	ldr	r2, [pc, #476]	@ (80016a0 <HAL_SPI_MspInit+0x364>)
 80014c2:	f043 0304 	orr.w	r3, r3, #4
 80014c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014ca:	4b75      	ldr	r3, [pc, #468]	@ (80016a0 <HAL_SPI_MspInit+0x364>)
 80014cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014d0:	f003 0204 	and.w	r2, r3, #4
 80014d4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80014d8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80014e2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80014e6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e8:	4b6d      	ldr	r3, [pc, #436]	@ (80016a0 <HAL_SPI_MspInit+0x364>)
 80014ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014ee:	4a6c      	ldr	r2, [pc, #432]	@ (80016a0 <HAL_SPI_MspInit+0x364>)
 80014f0:	f043 0302 	orr.w	r3, r3, #2
 80014f4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014f8:	4b69      	ldr	r3, [pc, #420]	@ (80016a0 <HAL_SPI_MspInit+0x364>)
 80014fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014fe:	f003 0202 	and.w	r2, r3, #2
 8001502:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001506:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001510:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001514:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001516:	2306      	movs	r3, #6
 8001518:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2300      	movs	r3, #0
 800152a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800152e:	2305      	movs	r3, #5
 8001530:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001534:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8001538:	4619      	mov	r1, r3
 800153a:	485c      	ldr	r0, [pc, #368]	@ (80016ac <HAL_SPI_MspInit+0x370>)
 800153c:	f000 fdf2 	bl	8002124 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001540:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001544:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2300      	movs	r3, #0
 8001556:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800155a:	2305      	movs	r3, #5
 800155c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001560:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8001564:	4619      	mov	r1, r3
 8001566:	4852      	ldr	r0, [pc, #328]	@ (80016b0 <HAL_SPI_MspInit+0x374>)
 8001568:	f000 fddc 	bl	8002124 <HAL_GPIO_Init>
}
 800156c:	e139      	b.n	80017e2 <HAL_SPI_MspInit+0x4a6>
  else if(hspi->Instance==SPI3)
 800156e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001572:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a4e      	ldr	r2, [pc, #312]	@ (80016b4 <HAL_SPI_MspInit+0x378>)
 800157c:	4293      	cmp	r3, r2
 800157e:	f040 809b 	bne.w	80016b8 <HAL_SPI_MspInit+0x37c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001582:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001586:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800158a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800158e:	f04f 0300 	mov.w	r3, #0
 8001592:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi3ClockSelection = RCC_SPI3CLKSOURCE_PLL1Q;
 8001596:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800159a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800159e:	2200      	movs	r2, #0
 80015a0:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015a4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015a8:	4618      	mov	r0, r3
 80015aa:	f001 fe9f 	bl	80032ec <HAL_RCCEx_PeriphCLKConfig>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <HAL_SPI_MspInit+0x27c>
      Error_Handler();
 80015b4:	f7ff fc74 	bl	8000ea0 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015b8:	4b39      	ldr	r3, [pc, #228]	@ (80016a0 <HAL_SPI_MspInit+0x364>)
 80015ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015be:	4a38      	ldr	r2, [pc, #224]	@ (80016a0 <HAL_SPI_MspInit+0x364>)
 80015c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015c4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80015c8:	4b35      	ldr	r3, [pc, #212]	@ (80016a0 <HAL_SPI_MspInit+0x364>)
 80015ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015ce:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 80015d2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80015d6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80015e0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80015e4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e6:	4b2e      	ldr	r3, [pc, #184]	@ (80016a0 <HAL_SPI_MspInit+0x364>)
 80015e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015ec:	4a2c      	ldr	r2, [pc, #176]	@ (80016a0 <HAL_SPI_MspInit+0x364>)
 80015ee:	f043 0302 	orr.w	r3, r3, #2
 80015f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015f6:	4b2a      	ldr	r3, [pc, #168]	@ (80016a0 <HAL_SPI_MspInit+0x364>)
 80015f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015fc:	f003 0202 	and.w	r2, r3, #2
 8001600:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001604:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800160e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001612:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001614:	4b22      	ldr	r3, [pc, #136]	@ (80016a0 <HAL_SPI_MspInit+0x364>)
 8001616:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800161a:	4a21      	ldr	r2, [pc, #132]	@ (80016a0 <HAL_SPI_MspInit+0x364>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001624:	4b1e      	ldr	r3, [pc, #120]	@ (80016a0 <HAL_SPI_MspInit+0x364>)
 8001626:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800162a:	f003 0204 	and.w	r2, r3, #4
 800162e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001632:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800163c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001640:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001642:	2304      	movs	r3, #4
 8001644:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800165a:	2307      	movs	r3, #7
 800165c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001660:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8001664:	4619      	mov	r1, r3
 8001666:	4812      	ldr	r0, [pc, #72]	@ (80016b0 <HAL_SPI_MspInit+0x374>)
 8001668:	f000 fd5c 	bl	8002124 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800166c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001670:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001680:	2300      	movs	r3, #0
 8001682:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001686:	2306      	movs	r3, #6
 8001688:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800168c:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8001690:	4619      	mov	r1, r3
 8001692:	4806      	ldr	r0, [pc, #24]	@ (80016ac <HAL_SPI_MspInit+0x370>)
 8001694:	f000 fd46 	bl	8002124 <HAL_GPIO_Init>
}
 8001698:	e0a3      	b.n	80017e2 <HAL_SPI_MspInit+0x4a6>
 800169a:	bf00      	nop
 800169c:	40013000 	.word	0x40013000
 80016a0:	44020c00 	.word	0x44020c00
 80016a4:	42020000 	.word	0x42020000
 80016a8:	40003800 	.word	0x40003800
 80016ac:	42020800 	.word	0x42020800
 80016b0:	42020400 	.word	0x42020400
 80016b4:	40003c00 	.word	0x40003c00
  else if(hspi->Instance==SPI6)
 80016b8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80016bc:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a49      	ldr	r2, [pc, #292]	@ (80017ec <HAL_SPI_MspInit+0x4b0>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	f040 808b 	bne.w	80017e2 <HAL_SPI_MspInit+0x4a6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 80016cc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80016d0:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	f04f 0301 	mov.w	r3, #1
 80016dc:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_PCLK2;
 80016e0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80016e4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80016e8:	2200      	movs	r2, #0
 80016ea:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016ee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80016f2:	4618      	mov	r0, r3
 80016f4:	f001 fdfa 	bl	80032ec <HAL_RCCEx_PeriphCLKConfig>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_SPI_MspInit+0x3c6>
      Error_Handler();
 80016fe:	f7ff fbcf 	bl	8000ea0 <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8001702:	4b3b      	ldr	r3, [pc, #236]	@ (80017f0 <HAL_SPI_MspInit+0x4b4>)
 8001704:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001708:	4a39      	ldr	r2, [pc, #228]	@ (80017f0 <HAL_SPI_MspInit+0x4b4>)
 800170a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800170e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001712:	4b37      	ldr	r3, [pc, #220]	@ (80017f0 <HAL_SPI_MspInit+0x4b4>)
 8001714:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001718:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800171c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001720:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800172a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800172e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001730:	4b2f      	ldr	r3, [pc, #188]	@ (80017f0 <HAL_SPI_MspInit+0x4b4>)
 8001732:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001736:	4a2e      	ldr	r2, [pc, #184]	@ (80017f0 <HAL_SPI_MspInit+0x4b4>)
 8001738:	f043 0304 	orr.w	r3, r3, #4
 800173c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001740:	4b2b      	ldr	r3, [pc, #172]	@ (80017f0 <HAL_SPI_MspInit+0x4b4>)
 8001742:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001746:	f003 0204 	and.w	r2, r3, #4
 800174a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800174e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001758:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800175c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800175e:	4b24      	ldr	r3, [pc, #144]	@ (80017f0 <HAL_SPI_MspInit+0x4b4>)
 8001760:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001764:	4a22      	ldr	r2, [pc, #136]	@ (80017f0 <HAL_SPI_MspInit+0x4b4>)
 8001766:	f043 0302 	orr.w	r3, r3, #2
 800176a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800176e:	4b20      	ldr	r3, [pc, #128]	@ (80017f0 <HAL_SPI_MspInit+0x4b4>)
 8001770:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001774:	f003 0202 	and.w	r2, r3, #2
 8001778:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800177c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001786:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800178a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800178c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001790:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001794:	2302      	movs	r3, #2
 8001796:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	2300      	movs	r3, #0
 80017a2:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 80017a6:	2305      	movs	r3, #5
 80017a8:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ac:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 80017b0:	4619      	mov	r1, r3
 80017b2:	4810      	ldr	r0, [pc, #64]	@ (80017f4 <HAL_SPI_MspInit+0x4b8>)
 80017b4:	f000 fcb6 	bl	8002124 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80017b8:	2330      	movs	r3, #48	@ 0x30
 80017ba:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ca:	2300      	movs	r3, #0
 80017cc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 80017d0:	2308      	movs	r3, #8
 80017d2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d6:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 80017da:	4619      	mov	r1, r3
 80017dc:	4806      	ldr	r0, [pc, #24]	@ (80017f8 <HAL_SPI_MspInit+0x4bc>)
 80017de:	f000 fca1 	bl	8002124 <HAL_GPIO_Init>
}
 80017e2:	bf00      	nop
 80017e4:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40015000 	.word	0x40015000
 80017f0:	44020c00 	.word	0x44020c00
 80017f4:	42020800 	.word	0x42020800
 80017f8:	42020400 	.word	0x42020400

080017fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b0cc      	sub	sp, #304	@ 0x130
 8001800:	af00      	add	r7, sp, #0
 8001802:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001806:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800180a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800181c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001820:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001824:	4618      	mov	r0, r3
 8001826:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800182a:	461a      	mov	r2, r3
 800182c:	2100      	movs	r1, #0
 800182e:	f009 f9d1 	bl	800abd4 <memset>
  if(huart->Instance==USART1)
 8001832:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001836:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a33      	ldr	r2, [pc, #204]	@ (800190c <HAL_UART_MspInit+0x110>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d15d      	bne.n	8001900 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001844:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001848:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800184c:	f04f 0201 	mov.w	r2, #1
 8001850:	f04f 0300 	mov.w	r3, #0
 8001854:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001858:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800185c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001860:	2200      	movs	r2, #0
 8001862:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001864:	f107 0310 	add.w	r3, r7, #16
 8001868:	4618      	mov	r0, r3
 800186a:	f001 fd3f 	bl	80032ec <HAL_RCCEx_PeriphCLKConfig>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8001874:	f7ff fb14 	bl	8000ea0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001878:	4b25      	ldr	r3, [pc, #148]	@ (8001910 <HAL_UART_MspInit+0x114>)
 800187a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800187e:	4a24      	ldr	r2, [pc, #144]	@ (8001910 <HAL_UART_MspInit+0x114>)
 8001880:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001884:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001888:	4b21      	ldr	r3, [pc, #132]	@ (8001910 <HAL_UART_MspInit+0x114>)
 800188a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800188e:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001892:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001896:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80018a0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80018a4:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001910 <HAL_UART_MspInit+0x114>)
 80018a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018ac:	4a18      	ldr	r2, [pc, #96]	@ (8001910 <HAL_UART_MspInit+0x114>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018b6:	4b16      	ldr	r3, [pc, #88]	@ (8001910 <HAL_UART_MspInit+0x114>)
 80018b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018bc:	f003 0201 	and.w	r2, r3, #1
 80018c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80018c4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80018ce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80018d2:	681b      	ldr	r3, [r3, #0]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80018d4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80018d8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e8:	2300      	movs	r3, #0
 80018ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018ee:	2307      	movs	r3, #7
 80018f0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f4:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80018f8:	4619      	mov	r1, r3
 80018fa:	4806      	ldr	r0, [pc, #24]	@ (8001914 <HAL_UART_MspInit+0x118>)
 80018fc:	f000 fc12 	bl	8002124 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001900:	bf00      	nop
 8001902:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40013800 	.word	0x40013800
 8001910:	44020c00 	.word	0x44020c00
 8001914:	42020000 	.word	0x42020000

08001918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <NMI_Handler+0x4>

08001920 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <HardFault_Handler+0x4>

08001928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <MemManage_Handler+0x4>

08001930 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <BusFault_Handler+0x4>

08001938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800193c:	bf00      	nop
 800193e:	e7fd      	b.n	800193c <UsageFault_Handler+0x4>

08001940 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800196e:	f000 fa31 	bl	8001dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}

08001976 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b086      	sub	sp, #24
 800197a:	af00      	add	r7, sp, #0
 800197c:	60f8      	str	r0, [r7, #12]
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	e00a      	b.n	800199e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001988:	f3af 8000 	nop.w
 800198c:	4601      	mov	r1, r0
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	60ba      	str	r2, [r7, #8]
 8001994:	b2ca      	uxtb	r2, r1
 8001996:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	3301      	adds	r3, #1
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	dbf0      	blt.n	8001988 <_read+0x12>
  }

  return len;
 80019a6:	687b      	ldr	r3, [r7, #4]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	e009      	b.n	80019d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	1c5a      	adds	r2, r3, #1
 80019c6:	60ba      	str	r2, [r7, #8]
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	3301      	adds	r3, #1
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	429a      	cmp	r2, r3
 80019dc:	dbf1      	blt.n	80019c2 <_write+0x12>
  }
  return len;
 80019de:	687b      	ldr	r3, [r7, #4]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <_close>:

int _close(int file)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a10:	605a      	str	r2, [r3, #4]
  return 0;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <_isatty>:

int _isatty(int file)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a28:	2301      	movs	r3, #1
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b085      	sub	sp, #20
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	60f8      	str	r0, [r7, #12]
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a58:	4a14      	ldr	r2, [pc, #80]	@ (8001aac <_sbrk+0x5c>)
 8001a5a:	4b15      	ldr	r3, [pc, #84]	@ (8001ab0 <_sbrk+0x60>)
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a64:	4b13      	ldr	r3, [pc, #76]	@ (8001ab4 <_sbrk+0x64>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d102      	bne.n	8001a72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a6c:	4b11      	ldr	r3, [pc, #68]	@ (8001ab4 <_sbrk+0x64>)
 8001a6e:	4a12      	ldr	r2, [pc, #72]	@ (8001ab8 <_sbrk+0x68>)
 8001a70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a72:	4b10      	ldr	r3, [pc, #64]	@ (8001ab4 <_sbrk+0x64>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d207      	bcs.n	8001a90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a80:	f009 f8f6 	bl	800ac70 <__errno>
 8001a84:	4603      	mov	r3, r0
 8001a86:	220c      	movs	r2, #12
 8001a88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8e:	e009      	b.n	8001aa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a90:	4b08      	ldr	r3, [pc, #32]	@ (8001ab4 <_sbrk+0x64>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a96:	4b07      	ldr	r3, [pc, #28]	@ (8001ab4 <_sbrk+0x64>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	4a05      	ldr	r2, [pc, #20]	@ (8001ab4 <_sbrk+0x64>)
 8001aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	200a0000 	.word	0x200a0000
 8001ab0:	00000400 	.word	0x00000400
 8001ab4:	20008e30 	.word	0x20008e30
 8001ab8:	20008f88 	.word	0x20008f88

08001abc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ac2:	4b35      	ldr	r3, [pc, #212]	@ (8001b98 <SystemInit+0xdc>)
 8001ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ac8:	4a33      	ldr	r2, [pc, #204]	@ (8001b98 <SystemInit+0xdc>)
 8001aca:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ace:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001ad2:	4b32      	ldr	r3, [pc, #200]	@ (8001b9c <SystemInit+0xe0>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001ad8:	4b30      	ldr	r3, [pc, #192]	@ (8001b9c <SystemInit+0xe0>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001ade:	4b2f      	ldr	r3, [pc, #188]	@ (8001b9c <SystemInit+0xe0>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001ae4:	4b2d      	ldr	r3, [pc, #180]	@ (8001b9c <SystemInit+0xe0>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	492c      	ldr	r1, [pc, #176]	@ (8001b9c <SystemInit+0xe0>)
 8001aea:	4b2d      	ldr	r3, [pc, #180]	@ (8001ba0 <SystemInit+0xe4>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001af0:	4b2a      	ldr	r3, [pc, #168]	@ (8001b9c <SystemInit+0xe0>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001af6:	4b29      	ldr	r3, [pc, #164]	@ (8001b9c <SystemInit+0xe0>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001afc:	4b27      	ldr	r3, [pc, #156]	@ (8001b9c <SystemInit+0xe0>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001b02:	4b26      	ldr	r3, [pc, #152]	@ (8001b9c <SystemInit+0xe0>)
 8001b04:	4a27      	ldr	r2, [pc, #156]	@ (8001ba4 <SystemInit+0xe8>)
 8001b06:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001b08:	4b24      	ldr	r3, [pc, #144]	@ (8001b9c <SystemInit+0xe0>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001b0e:	4b23      	ldr	r3, [pc, #140]	@ (8001b9c <SystemInit+0xe0>)
 8001b10:	4a24      	ldr	r2, [pc, #144]	@ (8001ba4 <SystemInit+0xe8>)
 8001b12:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001b14:	4b21      	ldr	r3, [pc, #132]	@ (8001b9c <SystemInit+0xe0>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001b1a:	4b20      	ldr	r3, [pc, #128]	@ (8001b9c <SystemInit+0xe0>)
 8001b1c:	4a21      	ldr	r2, [pc, #132]	@ (8001ba4 <SystemInit+0xe8>)
 8001b1e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001b20:	4b1e      	ldr	r3, [pc, #120]	@ (8001b9c <SystemInit+0xe0>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001b26:	4b1d      	ldr	r3, [pc, #116]	@ (8001b9c <SystemInit+0xe0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a1c      	ldr	r2, [pc, #112]	@ (8001b9c <SystemInit+0xe0>)
 8001b2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b30:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001b32:	4b1a      	ldr	r3, [pc, #104]	@ (8001b9c <SystemInit+0xe0>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b38:	4b17      	ldr	r3, [pc, #92]	@ (8001b98 <SystemInit+0xdc>)
 8001b3a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b3e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001b40:	4b19      	ldr	r3, [pc, #100]	@ (8001ba8 <SystemInit+0xec>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001b48:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001b50:	d003      	beq.n	8001b5a <SystemInit+0x9e>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001b58:	d117      	bne.n	8001b8a <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001b5a:	4b13      	ldr	r3, [pc, #76]	@ (8001ba8 <SystemInit+0xec>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d005      	beq.n	8001b72 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001b66:	4b10      	ldr	r3, [pc, #64]	@ (8001ba8 <SystemInit+0xec>)
 8001b68:	4a10      	ldr	r2, [pc, #64]	@ (8001bac <SystemInit+0xf0>)
 8001b6a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba8 <SystemInit+0xec>)
 8001b6e:	4a10      	ldr	r2, [pc, #64]	@ (8001bb0 <SystemInit+0xf4>)
 8001b70:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001b72:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba8 <SystemInit+0xec>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	4a0c      	ldr	r2, [pc, #48]	@ (8001ba8 <SystemInit+0xec>)
 8001b78:	f043 0302 	orr.w	r3, r3, #2
 8001b7c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba8 <SystemInit+0xec>)
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	4a09      	ldr	r2, [pc, #36]	@ (8001ba8 <SystemInit+0xec>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	61d3      	str	r3, [r2, #28]
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000ed00 	.word	0xe000ed00
 8001b9c:	44020c00 	.word	0x44020c00
 8001ba0:	eae2eae3 	.word	0xeae2eae3
 8001ba4:	01010280 	.word	0x01010280
 8001ba8:	40022000 	.word	0x40022000
 8001bac:	08192a3b 	.word	0x08192a3b
 8001bb0:	4c5d6e7f 	.word	0x4c5d6e7f

08001bb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001bb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001bb8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001bba:	e003      	b.n	8001bc4 <LoopCopyDataInit>

08001bbc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001bbe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001bc0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001bc2:	3104      	adds	r1, #4

08001bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001bc4:	480b      	ldr	r0, [pc, #44]	@ (8001bf4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001bc8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001bca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001bcc:	d3f6      	bcc.n	8001bbc <CopyDataInit>
	ldr	r2, =_sbss
 8001bce:	4a0b      	ldr	r2, [pc, #44]	@ (8001bfc <LoopForever+0x12>)
	b	LoopFillZerobss
 8001bd0:	e002      	b.n	8001bd8 <LoopFillZerobss>

08001bd2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001bd2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001bd4:	f842 3b04 	str.w	r3, [r2], #4

08001bd8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001bd8:	4b09      	ldr	r3, [pc, #36]	@ (8001c00 <LoopForever+0x16>)
	cmp	r2, r3
 8001bda:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001bdc:	d3f9      	bcc.n	8001bd2 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bde:	f7ff ff6d 	bl	8001abc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001be2:	f009 f84b 	bl	800ac7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001be6:	f7fe fdc5 	bl	8000774 <main>

08001bea <LoopForever>:

LoopForever:
    b LoopForever
 8001bea:	e7fe      	b.n	8001bea <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001bec:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001bf0:	0800bf84 	.word	0x0800bf84
	ldr	r0, =_sdata
 8001bf4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001bf8:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8001bfc:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8001c00:	20008f84 	.word	0x20008f84

08001c04 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c04:	e7fe      	b.n	8001c04 <ADC1_IRQHandler>

08001c06 <vl53l8cx_is_alive>:
}

uint8_t vl53l8cx_is_alive(
		VL53L8CX_Configuration		*p_dev,
		uint8_t				*p_is_alive)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b084      	sub	sp, #16
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L8CX_STATUS_OK;
 8001c10:	2300      	movs	r3, #0
 8001c12:	73fb      	strb	r3, [r7, #15]
	uint8_t device_id, revision_id;

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff f957 	bl	8000ed0 <WrByte>
 8001c22:	4603      	mov	r3, r0
 8001c24:	461a      	mov	r2, r3
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	73fb      	strb	r3, [r7, #15]
	status |= RdByte(&(p_dev->platform), 0, &device_id);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f107 020e 	add.w	r2, r7, #14
 8001c32:	2100      	movs	r1, #0
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff f939 	bl	8000eac <RdByte>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	73fb      	strb	r3, [r7, #15]
	status |= RdByte(&(p_dev->platform), 1, &revision_id);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f107 020d 	add.w	r2, r7, #13
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff f92d 	bl	8000eac <RdByte>
 8001c52:	4603      	mov	r3, r0
 8001c54:	461a      	mov	r2, r3
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	73fb      	strb	r3, [r7, #15]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2202      	movs	r2, #2
 8001c60:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff f933 	bl	8000ed0 <WrByte>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	73fb      	strb	r3, [r7, #15]

	if((device_id == (uint8_t)0xF0) && (revision_id == (uint8_t)0x0C))
 8001c74:	7bbb      	ldrb	r3, [r7, #14]
 8001c76:	2bf0      	cmp	r3, #240	@ 0xf0
 8001c78:	d106      	bne.n	8001c88 <vl53l8cx_is_alive+0x82>
 8001c7a:	7b7b      	ldrb	r3, [r7, #13]
 8001c7c:	2b0c      	cmp	r3, #12
 8001c7e:	d103      	bne.n	8001c88 <vl53l8cx_is_alive+0x82>
	{
		*p_is_alive = 1;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	2201      	movs	r2, #1
 8001c84:	701a      	strb	r2, [r3, #0]
 8001c86:	e002      	b.n	8001c8e <vl53l8cx_is_alive+0x88>
	}
	else
	{
		*p_is_alive = 0;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c9c:	2003      	movs	r0, #3
 8001c9e:	f000 f96c 	bl	8001f7a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001ca2:	f001 f999 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cdc <HAL_Init+0x44>)
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	f003 030f 	and.w	r3, r3, #15
 8001cb0:	490b      	ldr	r1, [pc, #44]	@ (8001ce0 <HAL_Init+0x48>)
 8001cb2:	5ccb      	ldrb	r3, [r1, r3]
 8001cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce4 <HAL_Init+0x4c>)
 8001cba:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001cbc:	2004      	movs	r0, #4
 8001cbe:	f000 f9a3 	bl	8002008 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f000 f810 	bl	8001ce8 <HAL_InitTick>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e002      	b.n	8001cd8 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd2:	f7ff fb2b 	bl	800132c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	44020c00 	.word	0x44020c00
 8001ce0:	0800bf00 	.word	0x0800bf00
 8001ce4:	20000000 	.word	0x20000000

08001ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001cf4:	4b33      	ldr	r3, [pc, #204]	@ (8001dc4 <HAL_InitTick+0xdc>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e05c      	b.n	8001dba <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001d00:	4b31      	ldr	r3, [pc, #196]	@ (8001dc8 <HAL_InitTick+0xe0>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d10c      	bne.n	8001d26 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001d0c:	4b2f      	ldr	r3, [pc, #188]	@ (8001dcc <HAL_InitTick+0xe4>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b2c      	ldr	r3, [pc, #176]	@ (8001dc4 <HAL_InitTick+0xdc>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	4619      	mov	r1, r3
 8001d16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	e037      	b.n	8001d96 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001d26:	f000 f9c7 	bl	80020b8 <HAL_SYSTICK_GetCLKSourceConfig>
 8001d2a:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d023      	beq.n	8001d7a <HAL_InitTick+0x92>
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d82d      	bhi.n	8001d94 <HAL_InitTick+0xac>
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_InitTick+0x5e>
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d00d      	beq.n	8001d60 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001d44:	e026      	b.n	8001d94 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001d46:	4b21      	ldr	r3, [pc, #132]	@ (8001dcc <HAL_InitTick+0xe4>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001dc4 <HAL_InitTick+0xdc>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001d54:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5c:	60fb      	str	r3, [r7, #12]
        break;
 8001d5e:	e01a      	b.n	8001d96 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001d60:	4b18      	ldr	r3, [pc, #96]	@ (8001dc4 <HAL_InitTick+0xdc>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d6e:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d76:	60fb      	str	r3, [r7, #12]
        break;
 8001d78:	e00d      	b.n	8001d96 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001d7a:	4b12      	ldr	r3, [pc, #72]	@ (8001dc4 <HAL_InitTick+0xdc>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d84:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d88:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d90:	60fb      	str	r3, [r7, #12]
        break;
 8001d92:	e000      	b.n	8001d96 <HAL_InitTick+0xae>
        break;
 8001d94:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f000 f914 	bl	8001fc4 <HAL_SYSTICK_Config>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e009      	b.n	8001dba <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001da6:	2200      	movs	r2, #0
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	f04f 30ff 	mov.w	r0, #4294967295
 8001dae:	f000 f8ef 	bl	8001f90 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001db2:	4a07      	ldr	r2, [pc, #28]	@ (8001dd0 <HAL_InitTick+0xe8>)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000008 	.word	0x20000008
 8001dc8:	e000e010 	.word	0xe000e010
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	20000004 	.word	0x20000004

08001dd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	@ (8001df4 <HAL_IncTick+0x20>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4b06      	ldr	r3, [pc, #24]	@ (8001df8 <HAL_IncTick+0x24>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4413      	add	r3, r2
 8001de4:	4a04      	ldr	r2, [pc, #16]	@ (8001df8 <HAL_IncTick+0x24>)
 8001de6:	6013      	str	r3, [r2, #0]
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	20000008 	.word	0x20000008
 8001df8:	20008e34 	.word	0x20008e34

08001dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8001e00:	4b03      	ldr	r3, [pc, #12]	@ (8001e10 <HAL_GetTick+0x14>)
 8001e02:	681b      	ldr	r3, [r3, #0]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	20008e34 	.word	0x20008e34

08001e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e1c:	f7ff ffee 	bl	8001dfc <HAL_GetTick>
 8001e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e2c:	d005      	beq.n	8001e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e58 <HAL_Delay+0x44>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	461a      	mov	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4413      	add	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e3a:	bf00      	nop
 8001e3c:	f7ff ffde 	bl	8001dfc <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d8f7      	bhi.n	8001e3c <HAL_Delay+0x28>
  {
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	bf00      	nop
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000008 	.word	0x20000008

08001e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e78:	4013      	ands	r3, r2
 8001e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e8e:	4a04      	ldr	r2, [pc, #16]	@ (8001ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	60d3      	str	r3, [r2, #12]
}
 8001e94:	bf00      	nop
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	e000ed00 	.word	0xe000ed00

08001ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea8:	4b04      	ldr	r3, [pc, #16]	@ (8001ebc <__NVIC_GetPriorityGrouping+0x18>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	0a1b      	lsrs	r3, r3, #8
 8001eae:	f003 0307 	and.w	r3, r3, #7
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	6039      	str	r1, [r7, #0]
 8001eca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ecc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	db0a      	blt.n	8001eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	490c      	ldr	r1, [pc, #48]	@ (8001f0c <__NVIC_SetPriority+0x4c>)
 8001eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ede:	0112      	lsls	r2, r2, #4
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee8:	e00a      	b.n	8001f00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	4908      	ldr	r1, [pc, #32]	@ (8001f10 <__NVIC_SetPriority+0x50>)
 8001ef0:	88fb      	ldrh	r3, [r7, #6]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	3b04      	subs	r3, #4
 8001ef8:	0112      	lsls	r2, r2, #4
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	440b      	add	r3, r1
 8001efe:	761a      	strb	r2, [r3, #24]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000e100 	.word	0xe000e100
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	@ 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f1c3 0307 	rsb	r3, r3, #7
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	bf28      	it	cs
 8001f32:	2304      	movcs	r3, #4
 8001f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	2b06      	cmp	r3, #6
 8001f3c:	d902      	bls.n	8001f44 <NVIC_EncodePriority+0x30>
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3b03      	subs	r3, #3
 8001f42:	e000      	b.n	8001f46 <NVIC_EncodePriority+0x32>
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43da      	mvns	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	401a      	ands	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	fa01 f303 	lsl.w	r3, r1, r3
 8001f66:	43d9      	mvns	r1, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	4313      	orrs	r3, r2
         );
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3724      	adds	r7, #36	@ 0x24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff ff6a 	bl	8001e5c <__NVIC_SetPriorityGrouping>
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
 8001f9c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f9e:	f7ff ff81 	bl	8001ea4 <__NVIC_GetPriorityGrouping>
 8001fa2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	68b9      	ldr	r1, [r7, #8]
 8001fa8:	6978      	ldr	r0, [r7, #20]
 8001faa:	f7ff ffb3 	bl	8001f14 <NVIC_EncodePriority>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff ff82 	bl	8001ec0 <__NVIC_SetPriority>
}
 8001fbc:	bf00      	nop
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fd4:	d301      	bcc.n	8001fda <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e00d      	b.n	8001ff6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001fda:	4a0a      	ldr	r2, [pc, #40]	@ (8002004 <HAL_SYSTICK_Config+0x40>)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001fe2:	4b08      	ldr	r3, [pc, #32]	@ (8002004 <HAL_SYSTICK_Config+0x40>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001fe8:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <HAL_SYSTICK_Config+0x40>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a05      	ldr	r2, [pc, #20]	@ (8002004 <HAL_SYSTICK_Config+0x40>)
 8001fee:	f043 0303 	orr.w	r3, r3, #3
 8001ff2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	e000e010 	.word	0xe000e010

08002008 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b04      	cmp	r3, #4
 8002014:	d844      	bhi.n	80020a0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002016:	a201      	add	r2, pc, #4	@ (adr r2, 800201c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201c:	0800203f 	.word	0x0800203f
 8002020:	0800205d 	.word	0x0800205d
 8002024:	0800207f 	.word	0x0800207f
 8002028:	080020a1 	.word	0x080020a1
 800202c:	08002031 	.word	0x08002031
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002030:	4b1f      	ldr	r3, [pc, #124]	@ (80020b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a1e      	ldr	r2, [pc, #120]	@ (80020b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002036:	f043 0304 	orr.w	r3, r3, #4
 800203a:	6013      	str	r3, [r2, #0]
      break;
 800203c:	e031      	b.n	80020a2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800203e:	4b1c      	ldr	r3, [pc, #112]	@ (80020b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a1b      	ldr	r2, [pc, #108]	@ (80020b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002044:	f023 0304 	bic.w	r3, r3, #4
 8002048:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800204a:	4b1a      	ldr	r3, [pc, #104]	@ (80020b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800204c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002050:	4a18      	ldr	r2, [pc, #96]	@ (80020b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002052:	f023 030c 	bic.w	r3, r3, #12
 8002056:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800205a:	e022      	b.n	80020a2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800205c:	4b14      	ldr	r3, [pc, #80]	@ (80020b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a13      	ldr	r2, [pc, #76]	@ (80020b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002062:	f023 0304 	bic.w	r3, r3, #4
 8002066:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8002068:	4b12      	ldr	r3, [pc, #72]	@ (80020b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800206a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800206e:	f023 030c 	bic.w	r3, r3, #12
 8002072:	4a10      	ldr	r2, [pc, #64]	@ (80020b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002074:	f043 0304 	orr.w	r3, r3, #4
 8002078:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800207c:	e011      	b.n	80020a2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800207e:	4b0c      	ldr	r3, [pc, #48]	@ (80020b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a0b      	ldr	r2, [pc, #44]	@ (80020b0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002084:	f023 0304 	bic.w	r3, r3, #4
 8002088:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800208a:	4b0a      	ldr	r3, [pc, #40]	@ (80020b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800208c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002090:	f023 030c 	bic.w	r3, r3, #12
 8002094:	4a07      	ldr	r2, [pc, #28]	@ (80020b4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002096:	f043 0308 	orr.w	r3, r3, #8
 800209a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800209e:	e000      	b.n	80020a2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80020a0:	bf00      	nop
  }
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	e000e010 	.word	0xe000e010
 80020b4:	44020c00 	.word	0x44020c00

080020b8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80020be:	4b17      	ldr	r3, [pc, #92]	@ (800211c <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d002      	beq.n	80020d0 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80020ca:	2304      	movs	r3, #4
 80020cc:	607b      	str	r3, [r7, #4]
 80020ce:	e01e      	b.n	800210e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80020d0:	4b13      	ldr	r3, [pc, #76]	@ (8002120 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80020d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d00f      	beq.n	8002102 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d80f      	bhi.n	8002108 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	2b04      	cmp	r3, #4
 80020f2:	d003      	beq.n	80020fc <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 80020f4:	e008      	b.n	8002108 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 80020f6:	2300      	movs	r3, #0
 80020f8:	607b      	str	r3, [r7, #4]
        break;
 80020fa:	e008      	b.n	800210e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 80020fc:	2301      	movs	r3, #1
 80020fe:	607b      	str	r3, [r7, #4]
        break;
 8002100:	e005      	b.n	800210e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002102:	2302      	movs	r3, #2
 8002104:	607b      	str	r3, [r7, #4]
        break;
 8002106:	e002      	b.n	800210e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002108:	2300      	movs	r3, #0
 800210a:	607b      	str	r3, [r7, #4]
        break;
 800210c:	bf00      	nop
    }
  }
  return systick_source;
 800210e:	687b      	ldr	r3, [r7, #4]
}
 8002110:	4618      	mov	r0, r3
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	e000e010 	.word	0xe000e010
 8002120:	44020c00 	.word	0x44020c00

08002124 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002124:	b480      	push	{r7}
 8002126:	b087      	sub	sp, #28
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800212e:	2300      	movs	r3, #0
 8002130:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002132:	e136      	b.n	80023a2 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	2101      	movs	r1, #1
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	fa01 f303 	lsl.w	r3, r1, r3
 8002140:	4013      	ands	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 8128 	beq.w	800239c <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b02      	cmp	r3, #2
 8002152:	d003      	beq.n	800215c <HAL_GPIO_Init+0x38>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b12      	cmp	r3, #18
 800215a:	d125      	bne.n	80021a8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	08da      	lsrs	r2, r3, #3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3208      	adds	r2, #8
 8002164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002168:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	220f      	movs	r2, #15
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4013      	ands	r3, r2
 800217e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	f003 020f 	and.w	r2, r3, #15
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	4313      	orrs	r3, r2
 8002198:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	08da      	lsrs	r2, r3, #3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3208      	adds	r2, #8
 80021a2:	6979      	ldr	r1, [r7, #20]
 80021a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	2203      	movs	r2, #3
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	4013      	ands	r3, r2
 80021be:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 0203 	and.w	r2, r3, #3
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d00b      	beq.n	80021fc <HAL_GPIO_Init+0xd8>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d007      	beq.n	80021fc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021f0:	2b11      	cmp	r3, #17
 80021f2:	d003      	beq.n	80021fc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b12      	cmp	r3, #18
 80021fa:	d130      	bne.n	800225e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	2203      	movs	r2, #3
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	4013      	ands	r3, r2
 8002212:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	68da      	ldr	r2, [r3, #12]
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	4313      	orrs	r3, r2
 8002224:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002232:	2201      	movs	r2, #1
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43db      	mvns	r3, r3
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	4013      	ands	r3, r2
 8002240:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	091b      	lsrs	r3, r3, #4
 8002248:	f003 0201 	and.w	r2, r3, #1
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	4313      	orrs	r3, r2
 8002256:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b03      	cmp	r3, #3
 8002264:	d017      	beq.n	8002296 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	2203      	movs	r2, #3
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	4013      	ands	r3, r2
 800227c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	4313      	orrs	r3, r2
 800228e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d07c      	beq.n	800239c <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80022a2:	4a47      	ldr	r2, [pc, #284]	@ (80023c0 <HAL_GPIO_Init+0x29c>)
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	089b      	lsrs	r3, r3, #2
 80022a8:	3318      	adds	r3, #24
 80022aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ae:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	220f      	movs	r2, #15
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	4013      	ands	r3, r2
 80022c4:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	0a9a      	lsrs	r2, r3, #10
 80022ca:	4b3e      	ldr	r3, [pc, #248]	@ (80023c4 <HAL_GPIO_Init+0x2a0>)
 80022cc:	4013      	ands	r3, r2
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	f002 0203 	and.w	r2, r2, #3
 80022d4:	00d2      	lsls	r2, r2, #3
 80022d6:	4093      	lsls	r3, r2
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	4313      	orrs	r3, r2
 80022dc:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80022de:	4938      	ldr	r1, [pc, #224]	@ (80023c0 <HAL_GPIO_Init+0x29c>)
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	089b      	lsrs	r3, r3, #2
 80022e4:	3318      	adds	r3, #24
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80022ec:	4b34      	ldr	r3, [pc, #208]	@ (80023c0 <HAL_GPIO_Init+0x29c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	4013      	ands	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	4313      	orrs	r3, r2
 800230e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002310:	4a2b      	ldr	r2, [pc, #172]	@ (80023c0 <HAL_GPIO_Init+0x29c>)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002316:	4b2a      	ldr	r3, [pc, #168]	@ (80023c0 <HAL_GPIO_Init+0x29c>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	43db      	mvns	r3, r3
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	4013      	ands	r3, r2
 8002324:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4313      	orrs	r3, r2
 8002338:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800233a:	4a21      	ldr	r2, [pc, #132]	@ (80023c0 <HAL_GPIO_Init+0x29c>)
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002340:	4b1f      	ldr	r3, [pc, #124]	@ (80023c0 <HAL_GPIO_Init+0x29c>)
 8002342:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002346:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	43db      	mvns	r3, r3
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	4013      	ands	r3, r2
 8002350:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4313      	orrs	r3, r2
 8002364:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002366:	4a16      	ldr	r2, [pc, #88]	@ (80023c0 <HAL_GPIO_Init+0x29c>)
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800236e:	4b14      	ldr	r3, [pc, #80]	@ (80023c0 <HAL_GPIO_Init+0x29c>)
 8002370:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002374:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	43db      	mvns	r3, r3
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	4013      	ands	r3, r2
 800237e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	4313      	orrs	r3, r2
 8002392:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002394:	4a0a      	ldr	r2, [pc, #40]	@ (80023c0 <HAL_GPIO_Init+0x29c>)
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	3301      	adds	r3, #1
 80023a0:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	fa22 f303 	lsr.w	r3, r2, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f47f aec1 	bne.w	8002134 <HAL_GPIO_Init+0x10>
  }
}
 80023b2:	bf00      	nop
 80023b4:	bf00      	nop
 80023b6:	371c      	adds	r7, #28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	44022000 	.word	0x44022000
 80023c4:	002f7f7f 	.word	0x002f7f7f

080023c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	807b      	strh	r3, [r7, #2]
 80023d4:	4613      	mov	r3, r2
 80023d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023d8:	787b      	ldrb	r3, [r7, #1]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023de:	887a      	ldrh	r2, [r7, #2]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023e4:	e002      	b.n	80023ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023e6:	887a      	ldrh	r2, [r7, #2]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d102      	bne.n	800240c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	f000 bc28 	b.w	8002c5c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800240c:	4b94      	ldr	r3, [pc, #592]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	f003 0318 	and.w	r3, r3, #24
 8002414:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002416:	4b92      	ldr	r3, [pc, #584]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 8002418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0310 	and.w	r3, r3, #16
 8002428:	2b00      	cmp	r3, #0
 800242a:	d05b      	beq.n	80024e4 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	2b08      	cmp	r3, #8
 8002430:	d005      	beq.n	800243e <HAL_RCC_OscConfig+0x46>
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	2b18      	cmp	r3, #24
 8002436:	d114      	bne.n	8002462 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d111      	bne.n	8002462 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d102      	bne.n	800244c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	f000 bc08 	b.w	8002c5c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800244c:	4b84      	ldr	r3, [pc, #528]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	041b      	lsls	r3, r3, #16
 800245a:	4981      	ldr	r1, [pc, #516]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 800245c:	4313      	orrs	r3, r2
 800245e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002460:	e040      	b.n	80024e4 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d023      	beq.n	80024b2 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800246a:	4b7d      	ldr	r3, [pc, #500]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a7c      	ldr	r2, [pc, #496]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 8002470:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002476:	f7ff fcc1 	bl	8001dfc <HAL_GetTick>
 800247a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800247c:	e008      	b.n	8002490 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800247e:	f7ff fcbd 	bl	8001dfc <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e3e5      	b.n	8002c5c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002490:	4b73      	ldr	r3, [pc, #460]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0f0      	beq.n	800247e <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800249c:	4b70      	ldr	r3, [pc, #448]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	041b      	lsls	r3, r3, #16
 80024aa:	496d      	ldr	r1, [pc, #436]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	618b      	str	r3, [r1, #24]
 80024b0:	e018      	b.n	80024e4 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80024b2:	4b6b      	ldr	r3, [pc, #428]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a6a      	ldr	r2, [pc, #424]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 80024b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024be:	f7ff fc9d 	bl	8001dfc <HAL_GetTick>
 80024c2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80024c6:	f7ff fc99 	bl	8001dfc <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e3c1      	b.n	8002c5c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80024d8:	4b61      	ldr	r3, [pc, #388]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1f0      	bne.n	80024c6 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 80a0 	beq.w	8002632 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	2b10      	cmp	r3, #16
 80024f6:	d005      	beq.n	8002504 <HAL_RCC_OscConfig+0x10c>
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	2b18      	cmp	r3, #24
 80024fc:	d109      	bne.n	8002512 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	2b03      	cmp	r3, #3
 8002502:	d106      	bne.n	8002512 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	f040 8092 	bne.w	8002632 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e3a4      	b.n	8002c5c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800251a:	d106      	bne.n	800252a <HAL_RCC_OscConfig+0x132>
 800251c:	4b50      	ldr	r3, [pc, #320]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a4f      	ldr	r2, [pc, #316]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 8002522:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	e058      	b.n	80025dc <HAL_RCC_OscConfig+0x1e4>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d112      	bne.n	8002558 <HAL_RCC_OscConfig+0x160>
 8002532:	4b4b      	ldr	r3, [pc, #300]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a4a      	ldr	r2, [pc, #296]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 8002538:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	4b48      	ldr	r3, [pc, #288]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a47      	ldr	r2, [pc, #284]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 8002544:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	4b45      	ldr	r3, [pc, #276]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a44      	ldr	r2, [pc, #272]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 8002550:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	e041      	b.n	80025dc <HAL_RCC_OscConfig+0x1e4>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002560:	d112      	bne.n	8002588 <HAL_RCC_OscConfig+0x190>
 8002562:	4b3f      	ldr	r3, [pc, #252]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a3e      	ldr	r2, [pc, #248]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 8002568:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	4b3c      	ldr	r3, [pc, #240]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a3b      	ldr	r2, [pc, #236]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 8002574:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	4b39      	ldr	r3, [pc, #228]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a38      	ldr	r2, [pc, #224]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 8002580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	e029      	b.n	80025dc <HAL_RCC_OscConfig+0x1e4>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002590:	d112      	bne.n	80025b8 <HAL_RCC_OscConfig+0x1c0>
 8002592:	4b33      	ldr	r3, [pc, #204]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a32      	ldr	r2, [pc, #200]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 8002598:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	4b30      	ldr	r3, [pc, #192]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a2f      	ldr	r2, [pc, #188]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 80025a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a2c      	ldr	r2, [pc, #176]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 80025b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	e011      	b.n	80025dc <HAL_RCC_OscConfig+0x1e4>
 80025b8:	4b29      	ldr	r3, [pc, #164]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a28      	ldr	r2, [pc, #160]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 80025be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	4b26      	ldr	r3, [pc, #152]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a25      	ldr	r2, [pc, #148]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 80025ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ce:	6013      	str	r3, [r2, #0]
 80025d0:	4b23      	ldr	r3, [pc, #140]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a22      	ldr	r2, [pc, #136]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 80025d6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80025da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d013      	beq.n	800260c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e4:	f7ff fc0a 	bl	8001dfc <HAL_GetTick>
 80025e8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80025ec:	f7ff fc06 	bl	8001dfc <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b64      	cmp	r3, #100	@ 0x64
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e32e      	b.n	8002c5c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025fe:	4b18      	ldr	r3, [pc, #96]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0x1f4>
 800260a:	e012      	b.n	8002632 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7ff fbf6 	bl	8001dfc <HAL_GetTick>
 8002610:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002614:	f7ff fbf2 	bl	8001dfc <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b64      	cmp	r3, #100	@ 0x64
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e31a      	b.n	8002c5c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002626:	4b0e      	ldr	r3, [pc, #56]	@ (8002660 <HAL_RCC_OscConfig+0x268>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f0      	bne.n	8002614 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 809a 	beq.w	8002774 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d005      	beq.n	8002652 <HAL_RCC_OscConfig+0x25a>
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	2b18      	cmp	r3, #24
 800264a:	d149      	bne.n	80026e0 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d146      	bne.n	80026e0 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d104      	bne.n	8002664 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e2fe      	b.n	8002c5c <HAL_RCC_OscConfig+0x864>
 800265e:	bf00      	nop
 8002660:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d11c      	bne.n	80026a4 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800266a:	4b9a      	ldr	r3, [pc, #616]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0218 	and.w	r2, r3, #24
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	429a      	cmp	r2, r3
 8002678:	d014      	beq.n	80026a4 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800267a:	4b96      	ldr	r3, [pc, #600]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f023 0218 	bic.w	r2, r3, #24
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	4993      	ldr	r1, [pc, #588]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 8002688:	4313      	orrs	r3, r2
 800268a:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 800268c:	f000 fdd0 	bl	8003230 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002690:	4b91      	ldr	r3, [pc, #580]	@ (80028d8 <HAL_RCC_OscConfig+0x4e0>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fb27 	bl	8001ce8 <HAL_InitTick>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e2db      	b.n	8002c5c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a4:	f7ff fbaa 	bl	8001dfc <HAL_GetTick>
 80026a8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80026ac:	f7ff fba6 	bl	8001dfc <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e2ce      	b.n	8002c5c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026be:	4b85      	ldr	r3, [pc, #532]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80026ca:	4b82      	ldr	r3, [pc, #520]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	041b      	lsls	r3, r3, #16
 80026d8:	497e      	ldr	r1, [pc, #504]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80026de:	e049      	b.n	8002774 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d02c      	beq.n	8002742 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80026e8:	4b7a      	ldr	r3, [pc, #488]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f023 0218 	bic.w	r2, r3, #24
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	4977      	ldr	r1, [pc, #476]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80026fa:	4b76      	ldr	r3, [pc, #472]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a75      	ldr	r2, [pc, #468]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002706:	f7ff fb79 	bl	8001dfc <HAL_GetTick>
 800270a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800270e:	f7ff fb75 	bl	8001dfc <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e29d      	b.n	8002c5c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002720:	4b6c      	ldr	r3, [pc, #432]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0f0      	beq.n	800270e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800272c:	4b69      	ldr	r3, [pc, #420]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	041b      	lsls	r3, r3, #16
 800273a:	4966      	ldr	r1, [pc, #408]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 800273c:	4313      	orrs	r3, r2
 800273e:	610b      	str	r3, [r1, #16]
 8002740:	e018      	b.n	8002774 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002742:	4b64      	ldr	r3, [pc, #400]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a63      	ldr	r2, [pc, #396]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 8002748:	f023 0301 	bic.w	r3, r3, #1
 800274c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274e:	f7ff fb55 	bl	8001dfc <HAL_GetTick>
 8002752:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002756:	f7ff fb51 	bl	8001dfc <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e279      	b.n	8002c5c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002768:	4b5a      	ldr	r3, [pc, #360]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1f0      	bne.n	8002756 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b00      	cmp	r3, #0
 800277e:	d03c      	beq.n	80027fa <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d01c      	beq.n	80027c2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002788:	4b52      	ldr	r3, [pc, #328]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 800278a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800278e:	4a51      	ldr	r2, [pc, #324]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 8002790:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002794:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002798:	f7ff fb30 	bl	8001dfc <HAL_GetTick>
 800279c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80027a0:	f7ff fb2c 	bl	8001dfc <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e254      	b.n	8002c5c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80027b2:	4b48      	ldr	r3, [pc, #288]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 80027b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0ef      	beq.n	80027a0 <HAL_RCC_OscConfig+0x3a8>
 80027c0:	e01b      	b.n	80027fa <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027c2:	4b44      	ldr	r3, [pc, #272]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 80027c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027c8:	4a42      	ldr	r2, [pc, #264]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 80027ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80027ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d2:	f7ff fb13 	bl	8001dfc <HAL_GetTick>
 80027d6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80027da:	f7ff fb0f 	bl	8001dfc <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e237      	b.n	8002c5c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80027ec:	4b39      	ldr	r3, [pc, #228]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 80027ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80027f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1ef      	bne.n	80027da <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0304 	and.w	r3, r3, #4
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 80d2 	beq.w	80029ac <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002808:	4b34      	ldr	r3, [pc, #208]	@ (80028dc <HAL_RCC_OscConfig+0x4e4>)
 800280a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d118      	bne.n	8002846 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002814:	4b31      	ldr	r3, [pc, #196]	@ (80028dc <HAL_RCC_OscConfig+0x4e4>)
 8002816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002818:	4a30      	ldr	r2, [pc, #192]	@ (80028dc <HAL_RCC_OscConfig+0x4e4>)
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002820:	f7ff faec 	bl	8001dfc <HAL_GetTick>
 8002824:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002828:	f7ff fae8 	bl	8001dfc <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e210      	b.n	8002c5c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800283a:	4b28      	ldr	r3, [pc, #160]	@ (80028dc <HAL_RCC_OscConfig+0x4e4>)
 800283c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f0      	beq.n	8002828 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d108      	bne.n	8002860 <HAL_RCC_OscConfig+0x468>
 800284e:	4b21      	ldr	r3, [pc, #132]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 8002850:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002854:	4a1f      	ldr	r2, [pc, #124]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800285e:	e074      	b.n	800294a <HAL_RCC_OscConfig+0x552>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d118      	bne.n	800289a <HAL_RCC_OscConfig+0x4a2>
 8002868:	4b1a      	ldr	r3, [pc, #104]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 800286a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800286e:	4a19      	ldr	r2, [pc, #100]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 8002870:	f023 0301 	bic.w	r3, r3, #1
 8002874:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002878:	4b16      	ldr	r3, [pc, #88]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 800287a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800287e:	4a15      	ldr	r2, [pc, #84]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 8002880:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002884:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002888:	4b12      	ldr	r3, [pc, #72]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 800288a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800288e:	4a11      	ldr	r2, [pc, #68]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 8002890:	f023 0304 	bic.w	r3, r3, #4
 8002894:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002898:	e057      	b.n	800294a <HAL_RCC_OscConfig+0x552>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	2b05      	cmp	r3, #5
 80028a0:	d11e      	bne.n	80028e0 <HAL_RCC_OscConfig+0x4e8>
 80028a2:	4b0c      	ldr	r3, [pc, #48]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 80028a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028a8:	4a0a      	ldr	r2, [pc, #40]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 80028aa:	f043 0304 	orr.w	r3, r3, #4
 80028ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028b2:	4b08      	ldr	r3, [pc, #32]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 80028b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028b8:	4a06      	ldr	r2, [pc, #24]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 80028ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028c2:	4b04      	ldr	r3, [pc, #16]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 80028c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028c8:	4a02      	ldr	r2, [pc, #8]	@ (80028d4 <HAL_RCC_OscConfig+0x4dc>)
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028d2:	e03a      	b.n	800294a <HAL_RCC_OscConfig+0x552>
 80028d4:	44020c00 	.word	0x44020c00
 80028d8:	20000004 	.word	0x20000004
 80028dc:	44020800 	.word	0x44020800
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	2b85      	cmp	r3, #133	@ 0x85
 80028e6:	d118      	bne.n	800291a <HAL_RCC_OscConfig+0x522>
 80028e8:	4ba2      	ldr	r3, [pc, #648]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 80028ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028ee:	4aa1      	ldr	r2, [pc, #644]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 80028f0:	f043 0304 	orr.w	r3, r3, #4
 80028f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80028f8:	4b9e      	ldr	r3, [pc, #632]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 80028fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80028fe:	4a9d      	ldr	r2, [pc, #628]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 8002900:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002904:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002908:	4b9a      	ldr	r3, [pc, #616]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 800290a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800290e:	4a99      	ldr	r2, [pc, #612]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002918:	e017      	b.n	800294a <HAL_RCC_OscConfig+0x552>
 800291a:	4b96      	ldr	r3, [pc, #600]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 800291c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002920:	4a94      	ldr	r2, [pc, #592]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 8002922:	f023 0301 	bic.w	r3, r3, #1
 8002926:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800292a:	4b92      	ldr	r3, [pc, #584]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 800292c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002930:	4a90      	ldr	r2, [pc, #576]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 8002932:	f023 0304 	bic.w	r3, r3, #4
 8002936:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800293a:	4b8e      	ldr	r3, [pc, #568]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 800293c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002940:	4a8c      	ldr	r2, [pc, #560]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 8002942:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002946:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d016      	beq.n	8002980 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002952:	f7ff fa53 	bl	8001dfc <HAL_GetTick>
 8002956:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002958:	e00a      	b.n	8002970 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800295a:	f7ff fa4f 	bl	8001dfc <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002968:	4293      	cmp	r3, r2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e175      	b.n	8002c5c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002970:	4b80      	ldr	r3, [pc, #512]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 8002972:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0ed      	beq.n	800295a <HAL_RCC_OscConfig+0x562>
 800297e:	e015      	b.n	80029ac <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002980:	f7ff fa3c 	bl	8001dfc <HAL_GetTick>
 8002984:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002986:	e00a      	b.n	800299e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002988:	f7ff fa38 	bl	8001dfc <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002996:	4293      	cmp	r3, r2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e15e      	b.n	8002c5c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800299e:	4b75      	ldr	r3, [pc, #468]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 80029a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1ed      	bne.n	8002988 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0320 	and.w	r3, r3, #32
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d036      	beq.n	8002a26 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d019      	beq.n	80029f4 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029c0:	4b6c      	ldr	r3, [pc, #432]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a6b      	ldr	r2, [pc, #428]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 80029c6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80029ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029cc:	f7ff fa16 	bl	8001dfc <HAL_GetTick>
 80029d0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80029d4:	f7ff fa12 	bl	8001dfc <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e13a      	b.n	8002c5c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80029e6:	4b63      	ldr	r3, [pc, #396]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f0      	beq.n	80029d4 <HAL_RCC_OscConfig+0x5dc>
 80029f2:	e018      	b.n	8002a26 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029f4:	4b5f      	ldr	r3, [pc, #380]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a5e      	ldr	r2, [pc, #376]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 80029fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80029fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a00:	f7ff f9fc 	bl	8001dfc <HAL_GetTick>
 8002a04:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002a08:	f7ff f9f8 	bl	8001dfc <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e120      	b.n	8002c5c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002a1a:	4b56      	ldr	r3, [pc, #344]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 8115 	beq.w	8002c5a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	2b18      	cmp	r3, #24
 8002a34:	f000 80af 	beq.w	8002b96 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	f040 8086 	bne.w	8002b4e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002a42:	4b4c      	ldr	r3, [pc, #304]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a4b      	ldr	r2, [pc, #300]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 8002a48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4e:	f7ff f9d5 	bl	8001dfc <HAL_GetTick>
 8002a52:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002a56:	f7ff f9d1 	bl	8001dfc <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e0f9      	b.n	8002c5c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002a68:	4b42      	ldr	r3, [pc, #264]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f0      	bne.n	8002a56 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8002a74:	4b3f      	ldr	r3, [pc, #252]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 8002a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a78:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002a7c:	f023 0303 	bic.w	r3, r3, #3
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002a88:	0212      	lsls	r2, r2, #8
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	4939      	ldr	r1, [pc, #228]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	628b      	str	r3, [r1, #40]	@ 0x28
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a96:	3b01      	subs	r3, #1
 8002a98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	025b      	lsls	r3, r3, #9
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aac:	3b01      	subs	r3, #1
 8002aae:	041b      	lsls	r3, r3, #16
 8002ab0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aba:	3b01      	subs	r3, #1
 8002abc:	061b      	lsls	r3, r3, #24
 8002abe:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002ac2:	492c      	ldr	r1, [pc, #176]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 8002aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002acc:	4a29      	ldr	r2, [pc, #164]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 8002ace:	f023 0310 	bic.w	r3, r3, #16
 8002ad2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad8:	4a26      	ldr	r2, [pc, #152]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002ade:	4b25      	ldr	r3, [pc, #148]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae2:	4a24      	ldr	r2, [pc, #144]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 8002ae4:	f043 0310 	orr.w	r3, r3, #16
 8002ae8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002aea:	4b22      	ldr	r3, [pc, #136]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 8002aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aee:	f023 020c 	bic.w	r2, r3, #12
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af6:	491f      	ldr	r1, [pc, #124]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002afc:	4b1d      	ldr	r3, [pc, #116]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 8002afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b00:	f023 0220 	bic.w	r2, r3, #32
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b08:	491a      	ldr	r1, [pc, #104]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b0e:	4b19      	ldr	r3, [pc, #100]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 8002b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b12:	4a18      	ldr	r2, [pc, #96]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 8002b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b18:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002b1a:	4b16      	ldr	r3, [pc, #88]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a15      	ldr	r2, [pc, #84]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 8002b20:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b26:	f7ff f969 	bl	8001dfc <HAL_GetTick>
 8002b2a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002b2c:	e008      	b.n	8002b40 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002b2e:	f7ff f965 	bl	8001dfc <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e08d      	b.n	8002c5c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002b40:	4b0c      	ldr	r3, [pc, #48]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d0f0      	beq.n	8002b2e <HAL_RCC_OscConfig+0x736>
 8002b4c:	e085      	b.n	8002c5a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002b4e:	4b09      	ldr	r3, [pc, #36]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a08      	ldr	r2, [pc, #32]	@ (8002b74 <HAL_RCC_OscConfig+0x77c>)
 8002b54:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5a:	f7ff f94f 	bl	8001dfc <HAL_GetTick>
 8002b5e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002b60:	e00a      	b.n	8002b78 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002b62:	f7ff f94b 	bl	8001dfc <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d903      	bls.n	8002b78 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e073      	b.n	8002c5c <HAL_RCC_OscConfig+0x864>
 8002b74:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002b78:	4b3a      	ldr	r3, [pc, #232]	@ (8002c64 <HAL_RCC_OscConfig+0x86c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1ee      	bne.n	8002b62 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002b84:	4b37      	ldr	r3, [pc, #220]	@ (8002c64 <HAL_RCC_OscConfig+0x86c>)
 8002b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b88:	4a36      	ldr	r2, [pc, #216]	@ (8002c64 <HAL_RCC_OscConfig+0x86c>)
 8002b8a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8002b8e:	f023 0303 	bic.w	r3, r3, #3
 8002b92:	6293      	str	r3, [r2, #40]	@ 0x28
 8002b94:	e061      	b.n	8002c5a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002b96:	4b33      	ldr	r3, [pc, #204]	@ (8002c64 <HAL_RCC_OscConfig+0x86c>)
 8002b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b9a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b9c:	4b31      	ldr	r3, [pc, #196]	@ (8002c64 <HAL_RCC_OscConfig+0x86c>)
 8002b9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ba0:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d031      	beq.n	8002c0e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	f003 0203 	and.w	r2, r3, #3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d12a      	bne.n	8002c0e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	0a1b      	lsrs	r3, r3, #8
 8002bbc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d122      	bne.n	8002c0e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd2:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d11a      	bne.n	8002c0e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	0a5b      	lsrs	r3, r3, #9
 8002bdc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d111      	bne.n	8002c0e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	0c1b      	lsrs	r3, r3, #16
 8002bee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d108      	bne.n	8002c0e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	0e1b      	lsrs	r3, r3, #24
 8002c00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c08:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d001      	beq.n	8002c12 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e024      	b.n	8002c5c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002c12:	4b14      	ldr	r3, [pc, #80]	@ (8002c64 <HAL_RCC_OscConfig+0x86c>)
 8002c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c16:	08db      	lsrs	r3, r3, #3
 8002c18:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d01a      	beq.n	8002c5a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002c24:	4b0f      	ldr	r3, [pc, #60]	@ (8002c64 <HAL_RCC_OscConfig+0x86c>)
 8002c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c28:	4a0e      	ldr	r2, [pc, #56]	@ (8002c64 <HAL_RCC_OscConfig+0x86c>)
 8002c2a:	f023 0310 	bic.w	r3, r3, #16
 8002c2e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c30:	f7ff f8e4 	bl	8001dfc <HAL_GetTick>
 8002c34:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002c36:	bf00      	nop
 8002c38:	f7ff f8e0 	bl	8001dfc <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d0f9      	beq.n	8002c38 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c48:	4a06      	ldr	r2, [pc, #24]	@ (8002c64 <HAL_RCC_OscConfig+0x86c>)
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002c4e:	4b05      	ldr	r3, [pc, #20]	@ (8002c64 <HAL_RCC_OscConfig+0x86c>)
 8002c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c52:	4a04      	ldr	r2, [pc, #16]	@ (8002c64 <HAL_RCC_OscConfig+0x86c>)
 8002c54:	f043 0310 	orr.w	r3, r3, #16
 8002c58:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3720      	adds	r7, #32
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	44020c00 	.word	0x44020c00

08002c68 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e19e      	b.n	8002fba <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c7c:	4b83      	ldr	r3, [pc, #524]	@ (8002e8c <HAL_RCC_ClockConfig+0x224>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 030f 	and.w	r3, r3, #15
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d910      	bls.n	8002cac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8a:	4b80      	ldr	r3, [pc, #512]	@ (8002e8c <HAL_RCC_ClockConfig+0x224>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 020f 	bic.w	r2, r3, #15
 8002c92:	497e      	ldr	r1, [pc, #504]	@ (8002e8c <HAL_RCC_ClockConfig+0x224>)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9a:	4b7c      	ldr	r3, [pc, #496]	@ (8002e8c <HAL_RCC_ClockConfig+0x224>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d001      	beq.n	8002cac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e186      	b.n	8002fba <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0310 	and.w	r3, r3, #16
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d012      	beq.n	8002cde <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	695a      	ldr	r2, [r3, #20]
 8002cbc:	4b74      	ldr	r3, [pc, #464]	@ (8002e90 <HAL_RCC_ClockConfig+0x228>)
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	0a1b      	lsrs	r3, r3, #8
 8002cc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d909      	bls.n	8002cde <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002cca:	4b71      	ldr	r3, [pc, #452]	@ (8002e90 <HAL_RCC_ClockConfig+0x228>)
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	021b      	lsls	r3, r3, #8
 8002cd8:	496d      	ldr	r1, [pc, #436]	@ (8002e90 <HAL_RCC_ClockConfig+0x228>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d012      	beq.n	8002d10 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691a      	ldr	r2, [r3, #16]
 8002cee:	4b68      	ldr	r3, [pc, #416]	@ (8002e90 <HAL_RCC_ClockConfig+0x228>)
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	091b      	lsrs	r3, r3, #4
 8002cf4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d909      	bls.n	8002d10 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002cfc:	4b64      	ldr	r3, [pc, #400]	@ (8002e90 <HAL_RCC_ClockConfig+0x228>)
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	4961      	ldr	r1, [pc, #388]	@ (8002e90 <HAL_RCC_ClockConfig+0x228>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d010      	beq.n	8002d3e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	4b5b      	ldr	r3, [pc, #364]	@ (8002e90 <HAL_RCC_ClockConfig+0x228>)
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d908      	bls.n	8002d3e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002d2c:	4b58      	ldr	r3, [pc, #352]	@ (8002e90 <HAL_RCC_ClockConfig+0x228>)
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	4955      	ldr	r1, [pc, #340]	@ (8002e90 <HAL_RCC_ClockConfig+0x228>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d010      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	4b50      	ldr	r3, [pc, #320]	@ (8002e90 <HAL_RCC_ClockConfig+0x228>)
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d908      	bls.n	8002d6c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002d5a:	4b4d      	ldr	r3, [pc, #308]	@ (8002e90 <HAL_RCC_ClockConfig+0x228>)
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	f023 020f 	bic.w	r2, r3, #15
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	494a      	ldr	r1, [pc, #296]	@ (8002e90 <HAL_RCC_ClockConfig+0x228>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 8093 	beq.w	8002ea0 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b03      	cmp	r3, #3
 8002d80:	d107      	bne.n	8002d92 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002d82:	4b43      	ldr	r3, [pc, #268]	@ (8002e90 <HAL_RCC_ClockConfig+0x228>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d121      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e113      	b.n	8002fba <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d107      	bne.n	8002daa <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d9a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e90 <HAL_RCC_ClockConfig+0x228>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d115      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e107      	b.n	8002fba <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d107      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002db2:	4b37      	ldr	r3, [pc, #220]	@ (8002e90 <HAL_RCC_ClockConfig+0x228>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d109      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e0fb      	b.n	8002fba <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dc2:	4b33      	ldr	r3, [pc, #204]	@ (8002e90 <HAL_RCC_ClockConfig+0x228>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e0f3      	b.n	8002fba <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8002e90 <HAL_RCC_ClockConfig+0x228>)
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	f023 0203 	bic.w	r2, r3, #3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	492c      	ldr	r1, [pc, #176]	@ (8002e90 <HAL_RCC_ClockConfig+0x228>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002de4:	f7ff f80a 	bl	8001dfc <HAL_GetTick>
 8002de8:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b03      	cmp	r3, #3
 8002df0:	d112      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002df2:	e00a      	b.n	8002e0a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002df4:	f7ff f802 	bl	8001dfc <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e0d7      	b.n	8002fba <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e0a:	4b21      	ldr	r3, [pc, #132]	@ (8002e90 <HAL_RCC_ClockConfig+0x228>)
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	f003 0318 	and.w	r3, r3, #24
 8002e12:	2b18      	cmp	r3, #24
 8002e14:	d1ee      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x18c>
 8002e16:	e043      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d112      	bne.n	8002e46 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e20:	e00a      	b.n	8002e38 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002e22:	f7fe ffeb 	bl	8001dfc <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e0c0      	b.n	8002fba <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e38:	4b15      	ldr	r3, [pc, #84]	@ (8002e90 <HAL_RCC_ClockConfig+0x228>)
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	f003 0318 	and.w	r3, r3, #24
 8002e40:	2b10      	cmp	r3, #16
 8002e42:	d1ee      	bne.n	8002e22 <HAL_RCC_ClockConfig+0x1ba>
 8002e44:	e02c      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d122      	bne.n	8002e94 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002e4e:	e00a      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002e50:	f7fe ffd4 	bl	8001dfc <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e0a9      	b.n	8002fba <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002e66:	4b0a      	ldr	r3, [pc, #40]	@ (8002e90 <HAL_RCC_ClockConfig+0x228>)
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f003 0318 	and.w	r3, r3, #24
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d1ee      	bne.n	8002e50 <HAL_RCC_ClockConfig+0x1e8>
 8002e72:	e015      	b.n	8002ea0 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002e74:	f7fe ffc2 	bl	8001dfc <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d906      	bls.n	8002e94 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e097      	b.n	8002fba <HAL_RCC_ClockConfig+0x352>
 8002e8a:	bf00      	nop
 8002e8c:	40022000 	.word	0x40022000
 8002e90:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e94:	4b4b      	ldr	r3, [pc, #300]	@ (8002fc4 <HAL_RCC_ClockConfig+0x35c>)
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	f003 0318 	and.w	r3, r3, #24
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1e9      	bne.n	8002e74 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d010      	beq.n	8002ece <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	4b44      	ldr	r3, [pc, #272]	@ (8002fc4 <HAL_RCC_ClockConfig+0x35c>)
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	f003 030f 	and.w	r3, r3, #15
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d208      	bcs.n	8002ece <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002ebc:	4b41      	ldr	r3, [pc, #260]	@ (8002fc4 <HAL_RCC_ClockConfig+0x35c>)
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	f023 020f 	bic.w	r2, r3, #15
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	493e      	ldr	r1, [pc, #248]	@ (8002fc4 <HAL_RCC_ClockConfig+0x35c>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ece:	4b3e      	ldr	r3, [pc, #248]	@ (8002fc8 <HAL_RCC_ClockConfig+0x360>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d210      	bcs.n	8002efe <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002edc:	4b3a      	ldr	r3, [pc, #232]	@ (8002fc8 <HAL_RCC_ClockConfig+0x360>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f023 020f 	bic.w	r2, r3, #15
 8002ee4:	4938      	ldr	r1, [pc, #224]	@ (8002fc8 <HAL_RCC_ClockConfig+0x360>)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eec:	4b36      	ldr	r3, [pc, #216]	@ (8002fc8 <HAL_RCC_ClockConfig+0x360>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 030f 	and.w	r3, r3, #15
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d001      	beq.n	8002efe <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e05d      	b.n	8002fba <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0304 	and.w	r3, r3, #4
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d010      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	4b2d      	ldr	r3, [pc, #180]	@ (8002fc4 <HAL_RCC_ClockConfig+0x35c>)
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d208      	bcs.n	8002f2c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002f1a:	4b2a      	ldr	r3, [pc, #168]	@ (8002fc4 <HAL_RCC_ClockConfig+0x35c>)
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	4927      	ldr	r1, [pc, #156]	@ (8002fc4 <HAL_RCC_ClockConfig+0x35c>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0308 	and.w	r3, r3, #8
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d012      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	4b21      	ldr	r3, [pc, #132]	@ (8002fc4 <HAL_RCC_ClockConfig+0x35c>)
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	091b      	lsrs	r3, r3, #4
 8002f42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d209      	bcs.n	8002f5e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002f4a:	4b1e      	ldr	r3, [pc, #120]	@ (8002fc4 <HAL_RCC_ClockConfig+0x35c>)
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	491a      	ldr	r1, [pc, #104]	@ (8002fc4 <HAL_RCC_ClockConfig+0x35c>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0310 	and.w	r3, r3, #16
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d012      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695a      	ldr	r2, [r3, #20]
 8002f6e:	4b15      	ldr	r3, [pc, #84]	@ (8002fc4 <HAL_RCC_ClockConfig+0x35c>)
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	0a1b      	lsrs	r3, r3, #8
 8002f74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d209      	bcs.n	8002f90 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002f7c:	4b11      	ldr	r3, [pc, #68]	@ (8002fc4 <HAL_RCC_ClockConfig+0x35c>)
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	021b      	lsls	r3, r3, #8
 8002f8a:	490e      	ldr	r1, [pc, #56]	@ (8002fc4 <HAL_RCC_ClockConfig+0x35c>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002f90:	f000 f822 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 8002f94:	4602      	mov	r2, r0
 8002f96:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc4 <HAL_RCC_ClockConfig+0x35c>)
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	490b      	ldr	r1, [pc, #44]	@ (8002fcc <HAL_RCC_ClockConfig+0x364>)
 8002fa0:	5ccb      	ldrb	r3, [r1, r3]
 8002fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8002fd0 <HAL_RCC_ClockConfig+0x368>)
 8002fa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002faa:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd4 <HAL_RCC_ClockConfig+0x36c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fe fe9a 	bl	8001ce8 <HAL_InitTick>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002fb8:	7afb      	ldrb	r3, [r7, #11]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	44020c00 	.word	0x44020c00
 8002fc8:	40022000 	.word	0x40022000
 8002fcc:	0800bf00 	.word	0x0800bf00
 8002fd0:	20000000 	.word	0x20000000
 8002fd4:	20000004 	.word	0x20000004

08002fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b089      	sub	sp, #36	@ 0x24
 8002fdc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002fde:	4b8c      	ldr	r3, [pc, #560]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x238>)
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	f003 0318 	and.w	r3, r3, #24
 8002fe6:	2b08      	cmp	r3, #8
 8002fe8:	d102      	bne.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002fea:	4b8a      	ldr	r3, [pc, #552]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002fec:	61fb      	str	r3, [r7, #28]
 8002fee:	e107      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ff0:	4b87      	ldr	r3, [pc, #540]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	f003 0318 	and.w	r3, r3, #24
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d112      	bne.n	8003022 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002ffc:	4b84      	ldr	r3, [pc, #528]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0320 	and.w	r3, r3, #32
 8003004:	2b00      	cmp	r3, #0
 8003006:	d009      	beq.n	800301c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003008:	4b81      	ldr	r3, [pc, #516]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x238>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	08db      	lsrs	r3, r3, #3
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	4a81      	ldr	r2, [pc, #516]	@ (8003218 <HAL_RCC_GetSysClockFreq+0x240>)
 8003014:	fa22 f303 	lsr.w	r3, r2, r3
 8003018:	61fb      	str	r3, [r7, #28]
 800301a:	e0f1      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800301c:	4b7e      	ldr	r3, [pc, #504]	@ (8003218 <HAL_RCC_GetSysClockFreq+0x240>)
 800301e:	61fb      	str	r3, [r7, #28]
 8003020:	e0ee      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003022:	4b7b      	ldr	r3, [pc, #492]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x238>)
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	f003 0318 	and.w	r3, r3, #24
 800302a:	2b10      	cmp	r3, #16
 800302c:	d102      	bne.n	8003034 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800302e:	4b7b      	ldr	r3, [pc, #492]	@ (800321c <HAL_RCC_GetSysClockFreq+0x244>)
 8003030:	61fb      	str	r3, [r7, #28]
 8003032:	e0e5      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003034:	4b76      	ldr	r3, [pc, #472]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x238>)
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	f003 0318 	and.w	r3, r3, #24
 800303c:	2b18      	cmp	r3, #24
 800303e:	f040 80dd 	bne.w	80031fc <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003042:	4b73      	ldr	r3, [pc, #460]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x238>)
 8003044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800304c:	4b70      	ldr	r3, [pc, #448]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x238>)
 800304e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003050:	0a1b      	lsrs	r3, r3, #8
 8003052:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003056:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003058:	4b6d      	ldr	r3, [pc, #436]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x238>)
 800305a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800305c:	091b      	lsrs	r3, r3, #4
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003064:	4b6a      	ldr	r3, [pc, #424]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x238>)
 8003066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8003068:	08db      	lsrs	r3, r3, #3
 800306a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	fb02 f303 	mul.w	r3, r2, r3
 8003074:	ee07 3a90 	vmov	s15, r3
 8003078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800307c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 80b7 	beq.w	80031f6 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d003      	beq.n	8003096 <HAL_RCC_GetSysClockFreq+0xbe>
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	2b03      	cmp	r3, #3
 8003092:	d056      	beq.n	8003142 <HAL_RCC_GetSysClockFreq+0x16a>
 8003094:	e077      	b.n	8003186 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003096:	4b5e      	ldr	r3, [pc, #376]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x238>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0320 	and.w	r3, r3, #32
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d02d      	beq.n	80030fe <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80030a2:	4b5b      	ldr	r3, [pc, #364]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x238>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	08db      	lsrs	r3, r3, #3
 80030a8:	f003 0303 	and.w	r3, r3, #3
 80030ac:	4a5a      	ldr	r2, [pc, #360]	@ (8003218 <HAL_RCC_GetSysClockFreq+0x240>)
 80030ae:	fa22 f303 	lsr.w	r3, r2, r3
 80030b2:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	ee07 3a90 	vmov	s15, r3
 80030ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	ee07 3a90 	vmov	s15, r3
 80030c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030cc:	4b50      	ldr	r3, [pc, #320]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x238>)
 80030ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030d4:	ee07 3a90 	vmov	s15, r3
 80030d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80030dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80030e0:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8003220 <HAL_RCC_GetSysClockFreq+0x248>
 80030e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80030ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030f8:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80030fc:	e065      	b.n	80031ca <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	ee07 3a90 	vmov	s15, r3
 8003104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003108:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8003224 <HAL_RCC_GetSysClockFreq+0x24c>
 800310c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003110:	4b3f      	ldr	r3, [pc, #252]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x238>)
 8003112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003118:	ee07 3a90 	vmov	s15, r3
 800311c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003120:	ed97 6a02 	vldr	s12, [r7, #8]
 8003124:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003220 <HAL_RCC_GetSysClockFreq+0x248>
 8003128:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800312c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003130:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003134:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800313c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003140:	e043      	b.n	80031ca <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	ee07 3a90 	vmov	s15, r3
 8003148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800314c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8003228 <HAL_RCC_GetSysClockFreq+0x250>
 8003150:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003154:	4b2e      	ldr	r3, [pc, #184]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x238>)
 8003156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800315c:	ee07 3a90 	vmov	s15, r3
 8003160:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003164:	ed97 6a02 	vldr	s12, [r7, #8]
 8003168:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8003220 <HAL_RCC_GetSysClockFreq+0x248>
 800316c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003170:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003174:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003178:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800317c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003180:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003184:	e021      	b.n	80031ca <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	ee07 3a90 	vmov	s15, r3
 800318c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003190:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800322c <HAL_RCC_GetSysClockFreq+0x254>
 8003194:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003198:	4b1d      	ldr	r3, [pc, #116]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x238>)
 800319a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800319c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031a0:	ee07 3a90 	vmov	s15, r3
 80031a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80031a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80031ac:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8003220 <HAL_RCC_GetSysClockFreq+0x248>
 80031b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80031b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80031c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031c4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80031c8:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80031ca:	4b11      	ldr	r3, [pc, #68]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x238>)
 80031cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031ce:	0a5b      	lsrs	r3, r3, #9
 80031d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031d4:	3301      	adds	r3, #1
 80031d6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	ee07 3a90 	vmov	s15, r3
 80031de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031e2:	edd7 6a06 	vldr	s13, [r7, #24]
 80031e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031ee:	ee17 3a90 	vmov	r3, s15
 80031f2:	61fb      	str	r3, [r7, #28]
 80031f4:	e004      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61fb      	str	r3, [r7, #28]
 80031fa:	e001      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80031fc:	4b06      	ldr	r3, [pc, #24]	@ (8003218 <HAL_RCC_GetSysClockFreq+0x240>)
 80031fe:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8003200:	69fb      	ldr	r3, [r7, #28]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3724      	adds	r7, #36	@ 0x24
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	44020c00 	.word	0x44020c00
 8003214:	003d0900 	.word	0x003d0900
 8003218:	03d09000 	.word	0x03d09000
 800321c:	017d7840 	.word	0x017d7840
 8003220:	46000000 	.word	0x46000000
 8003224:	4c742400 	.word	0x4c742400
 8003228:	4bbebc20 	.word	0x4bbebc20
 800322c:	4a742400 	.word	0x4a742400

08003230 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003234:	f7ff fed0 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 8003238:	4602      	mov	r2, r0
 800323a:	4b08      	ldr	r3, [pc, #32]	@ (800325c <HAL_RCC_GetHCLKFreq+0x2c>)
 800323c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800323e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003242:	4907      	ldr	r1, [pc, #28]	@ (8003260 <HAL_RCC_GetHCLKFreq+0x30>)
 8003244:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003246:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800324a:	fa22 f303 	lsr.w	r3, r2, r3
 800324e:	4a05      	ldr	r2, [pc, #20]	@ (8003264 <HAL_RCC_GetHCLKFreq+0x34>)
 8003250:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8003252:	4b04      	ldr	r3, [pc, #16]	@ (8003264 <HAL_RCC_GetHCLKFreq+0x34>)
 8003254:	681b      	ldr	r3, [r3, #0]
}
 8003256:	4618      	mov	r0, r3
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	44020c00 	.word	0x44020c00
 8003260:	0800bf00 	.word	0x0800bf00
 8003264:	20000000 	.word	0x20000000

08003268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 800326c:	f7ff ffe0 	bl	8003230 <HAL_RCC_GetHCLKFreq>
 8003270:	4602      	mov	r2, r0
 8003272:	4b06      	ldr	r3, [pc, #24]	@ (800328c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	091b      	lsrs	r3, r3, #4
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	4904      	ldr	r1, [pc, #16]	@ (8003290 <HAL_RCC_GetPCLK1Freq+0x28>)
 800327e:	5ccb      	ldrb	r3, [r1, r3]
 8003280:	f003 031f 	and.w	r3, r3, #31
 8003284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003288:	4618      	mov	r0, r3
 800328a:	bd80      	pop	{r7, pc}
 800328c:	44020c00 	.word	0x44020c00
 8003290:	0800bf10 	.word	0x0800bf10

08003294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8003298:	f7ff ffca 	bl	8003230 <HAL_RCC_GetHCLKFreq>
 800329c:	4602      	mov	r2, r0
 800329e:	4b06      	ldr	r3, [pc, #24]	@ (80032b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	0a1b      	lsrs	r3, r3, #8
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	4904      	ldr	r1, [pc, #16]	@ (80032bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80032aa:	5ccb      	ldrb	r3, [r1, r3]
 80032ac:	f003 031f 	and.w	r3, r3, #31
 80032b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	44020c00 	.word	0x44020c00
 80032bc:	0800bf10 	.word	0x0800bf10

080032c0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80032c4:	f7ff ffb4 	bl	8003230 <HAL_RCC_GetHCLKFreq>
 80032c8:	4602      	mov	r2, r0
 80032ca:	4b06      	ldr	r3, [pc, #24]	@ (80032e4 <HAL_RCC_GetPCLK3Freq+0x24>)
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	0b1b      	lsrs	r3, r3, #12
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	4904      	ldr	r1, [pc, #16]	@ (80032e8 <HAL_RCC_GetPCLK3Freq+0x28>)
 80032d6:	5ccb      	ldrb	r3, [r1, r3]
 80032d8:	f003 031f 	and.w	r3, r3, #31
 80032dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	44020c00 	.word	0x44020c00
 80032e8:	0800bf10 	.word	0x0800bf10

080032ec <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80032ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032f0:	b0d6      	sub	sp, #344	@ 0x158
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	f8c7 0144 	str.w	r0, [r7, #324]	@ 0x144
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032f8:	2300      	movs	r3, #0
 80032fa:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032fe:	2300      	movs	r3, #0
 8003300:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003304:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330c:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8003310:	2500      	movs	r5, #0
 8003312:	ea54 0305 	orrs.w	r3, r4, r5
 8003316:	d00b      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8003318:	4bcd      	ldr	r3, [pc, #820]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800331a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800331e:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8003322:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003328:	4ac9      	ldr	r2, [pc, #804]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800332a:	430b      	orrs	r3, r1
 800332c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003330:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003338:	f002 0801 	and.w	r8, r2, #1
 800333c:	f04f 0900 	mov.w	r9, #0
 8003340:	ea58 0309 	orrs.w	r3, r8, r9
 8003344:	d042      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8003346:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800334a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800334c:	2b05      	cmp	r3, #5
 800334e:	d823      	bhi.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8003350:	a201      	add	r2, pc, #4	@ (adr r2, 8003358 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8003352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003356:	bf00      	nop
 8003358:	080033a1 	.word	0x080033a1
 800335c:	08003371 	.word	0x08003371
 8003360:	08003385 	.word	0x08003385
 8003364:	080033a1 	.word	0x080033a1
 8003368:	080033a1 	.word	0x080033a1
 800336c:	080033a1 	.word	0x080033a1
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003370:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003374:	3308      	adds	r3, #8
 8003376:	4618      	mov	r0, r3
 8003378:	f004 fe62 	bl	8008040 <RCCEx_PLL2_Config>
 800337c:	4603      	mov	r3, r0
 800337e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART1 clock source config set later after clock selection check */
        break;
 8003382:	e00e      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003384:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003388:	3330      	adds	r3, #48	@ 0x30
 800338a:	4618      	mov	r0, r3
 800338c:	f004 fef0 	bl	8008170 <RCCEx_PLL3_Config>
 8003390:	4603      	mov	r3, r0
 8003392:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART1 clock source config set later after clock selection check */
        break;
 8003396:	e004      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800339e:	e000      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80033a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033a2:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10c      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80033aa:	4ba9      	ldr	r3, [pc, #676]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80033ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80033b0:	f023 0107 	bic.w	r1, r3, #7
 80033b4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80033b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ba:	4aa5      	ldr	r2, [pc, #660]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80033bc:	430b      	orrs	r3, r1
 80033be:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80033c2:	e003      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c4:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80033c8:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033cc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80033d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d4:	f002 0a02 	and.w	sl, r2, #2
 80033d8:	f04f 0b00 	mov.w	fp, #0
 80033dc:	ea5a 030b 	orrs.w	r3, sl, fp
 80033e0:	f000 8088 	beq.w	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80033e4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80033e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ea:	2b28      	cmp	r3, #40	@ 0x28
 80033ec:	d868      	bhi.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80033ee:	a201      	add	r2, pc, #4	@ (adr r2, 80033f4 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80033f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f4:	080034c9 	.word	0x080034c9
 80033f8:	080034c1 	.word	0x080034c1
 80033fc:	080034c1 	.word	0x080034c1
 8003400:	080034c1 	.word	0x080034c1
 8003404:	080034c1 	.word	0x080034c1
 8003408:	080034c1 	.word	0x080034c1
 800340c:	080034c1 	.word	0x080034c1
 8003410:	080034c1 	.word	0x080034c1
 8003414:	08003499 	.word	0x08003499
 8003418:	080034c1 	.word	0x080034c1
 800341c:	080034c1 	.word	0x080034c1
 8003420:	080034c1 	.word	0x080034c1
 8003424:	080034c1 	.word	0x080034c1
 8003428:	080034c1 	.word	0x080034c1
 800342c:	080034c1 	.word	0x080034c1
 8003430:	080034c1 	.word	0x080034c1
 8003434:	080034ad 	.word	0x080034ad
 8003438:	080034c1 	.word	0x080034c1
 800343c:	080034c1 	.word	0x080034c1
 8003440:	080034c1 	.word	0x080034c1
 8003444:	080034c1 	.word	0x080034c1
 8003448:	080034c1 	.word	0x080034c1
 800344c:	080034c1 	.word	0x080034c1
 8003450:	080034c1 	.word	0x080034c1
 8003454:	080034c9 	.word	0x080034c9
 8003458:	080034c1 	.word	0x080034c1
 800345c:	080034c1 	.word	0x080034c1
 8003460:	080034c1 	.word	0x080034c1
 8003464:	080034c1 	.word	0x080034c1
 8003468:	080034c1 	.word	0x080034c1
 800346c:	080034c1 	.word	0x080034c1
 8003470:	080034c1 	.word	0x080034c1
 8003474:	080034c9 	.word	0x080034c9
 8003478:	080034c1 	.word	0x080034c1
 800347c:	080034c1 	.word	0x080034c1
 8003480:	080034c1 	.word	0x080034c1
 8003484:	080034c1 	.word	0x080034c1
 8003488:	080034c1 	.word	0x080034c1
 800348c:	080034c1 	.word	0x080034c1
 8003490:	080034c1 	.word	0x080034c1
 8003494:	080034c9 	.word	0x080034c9
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003498:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800349c:	3308      	adds	r3, #8
 800349e:	4618      	mov	r0, r3
 80034a0:	f004 fdce 	bl	8008040 <RCCEx_PLL2_Config>
 80034a4:	4603      	mov	r3, r0
 80034a6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART2 clock source config set later after clock selection check */
        break;
 80034aa:	e00e      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80034ac:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80034b0:	3330      	adds	r3, #48	@ 0x30
 80034b2:	4618      	mov	r0, r3
 80034b4:	f004 fe5c 	bl	8008170 <RCCEx_PLL3_Config>
 80034b8:	4603      	mov	r3, r0
 80034ba:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART2 clock source config set later after clock selection check */
        break;
 80034be:	e004      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80034c6:	e000      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80034c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034ca:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10c      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80034d2:	4b5f      	ldr	r3, [pc, #380]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80034d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80034d8:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80034dc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80034e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80034e4:	430b      	orrs	r3, r1
 80034e6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80034ea:	e003      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ec:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80034f0:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034f4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80034f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fc:	f002 0304 	and.w	r3, r2, #4
 8003500:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8003504:	2300      	movs	r3, #0
 8003506:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800350a:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 800350e:	460b      	mov	r3, r1
 8003510:	4313      	orrs	r3, r2
 8003512:	d04e      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003514:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003518:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800351a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800351e:	d02c      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8003520:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003524:	d825      	bhi.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003526:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800352a:	d028      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800352c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003530:	d81f      	bhi.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003532:	2bc0      	cmp	r3, #192	@ 0xc0
 8003534:	d025      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003536:	2bc0      	cmp	r3, #192	@ 0xc0
 8003538:	d81b      	bhi.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800353a:	2b80      	cmp	r3, #128	@ 0x80
 800353c:	d00f      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x272>
 800353e:	2b80      	cmp	r3, #128	@ 0x80
 8003540:	d817      	bhi.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003542:	2b00      	cmp	r3, #0
 8003544:	d01f      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8003546:	2b40      	cmp	r3, #64	@ 0x40
 8003548:	d113      	bne.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800354a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800354e:	3308      	adds	r3, #8
 8003550:	4618      	mov	r0, r3
 8003552:	f004 fd75 	bl	8008040 <RCCEx_PLL2_Config>
 8003556:	4603      	mov	r3, r0
 8003558:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART3 clock source config set later after clock selection check */
        break;
 800355c:	e014      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800355e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003562:	3330      	adds	r3, #48	@ 0x30
 8003564:	4618      	mov	r0, r3
 8003566:	f004 fe03 	bl	8008170 <RCCEx_PLL3_Config>
 800356a:	4603      	mov	r3, r0
 800356c:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART3 clock source config set later after clock selection check */
        break;
 8003570:	e00a      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8003578:	e006      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800357a:	bf00      	nop
 800357c:	e004      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800357e:	bf00      	nop
 8003580:	e002      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003582:	bf00      	nop
 8003584:	e000      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003586:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003588:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10c      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003590:	4b2f      	ldr	r3, [pc, #188]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003592:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003596:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800359a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800359e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80035a2:	430b      	orrs	r3, r1
 80035a4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80035a8:	e003      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035aa:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80035ae:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035b2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80035b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ba:	f002 0308 	and.w	r3, r2, #8
 80035be:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80035c2:	2300      	movs	r3, #0
 80035c4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80035c8:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 80035cc:	460b      	mov	r3, r1
 80035ce:	4313      	orrs	r3, r2
 80035d0:	d056      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80035d2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80035d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035d8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80035dc:	d031      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x356>
 80035de:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80035e2:	d82a      	bhi.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80035e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035e8:	d02d      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80035ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035ee:	d824      	bhi.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80035f0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80035f4:	d029      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80035f6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80035fa:	d81e      	bhi.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80035fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003600:	d011      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8003602:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003606:	d818      	bhi.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003608:	2b00      	cmp	r3, #0
 800360a:	d023      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800360c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003610:	d113      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003612:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003616:	3308      	adds	r3, #8
 8003618:	4618      	mov	r0, r3
 800361a:	f004 fd11 	bl	8008040 <RCCEx_PLL2_Config>
 800361e:	4603      	mov	r3, r0
 8003620:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART4 clock source config set later after clock selection check */
        break;
 8003624:	e017      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003626:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800362a:	3330      	adds	r3, #48	@ 0x30
 800362c:	4618      	mov	r0, r3
 800362e:	f004 fd9f 	bl	8008170 <RCCEx_PLL3_Config>
 8003632:	4603      	mov	r3, r0
 8003634:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART4 clock source config set later after clock selection check */
        break;
 8003638:	e00d      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8003640:	e009      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003642:	bf00      	nop
 8003644:	e007      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003646:	bf00      	nop
 8003648:	e005      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800364a:	bf00      	nop
 800364c:	e003      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800364e:	bf00      	nop
 8003650:	44020c00 	.word	0x44020c00
        break;
 8003654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003656:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10c      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800365e:	4bbb      	ldr	r3, [pc, #748]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003660:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003664:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8003668:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800366c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800366e:	4ab7      	ldr	r2, [pc, #732]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003670:	430b      	orrs	r3, r1
 8003672:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003676:	e003      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003678:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800367c:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003680:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003688:	f002 0310 	and.w	r3, r2, #16
 800368c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003690:	2300      	movs	r3, #0
 8003692:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8003696:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 800369a:	460b      	mov	r3, r1
 800369c:	4313      	orrs	r3, r2
 800369e:	d053      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 80036a0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80036a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036a6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80036aa:	d031      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80036ac:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80036b0:	d82a      	bhi.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80036b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036b6:	d02d      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80036b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036bc:	d824      	bhi.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80036be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80036c2:	d029      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80036c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80036c8:	d81e      	bhi.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80036ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036ce:	d011      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80036d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036d4:	d818      	bhi.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d020      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x430>
 80036da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036de:	d113      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036e0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80036e4:	3308      	adds	r3, #8
 80036e6:	4618      	mov	r0, r3
 80036e8:	f004 fcaa 	bl	8008040 <RCCEx_PLL2_Config>
 80036ec:	4603      	mov	r3, r0
 80036ee:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART5 clock source config set later after clock selection check */
        break;
 80036f2:	e014      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80036f4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80036f8:	3330      	adds	r3, #48	@ 0x30
 80036fa:	4618      	mov	r0, r3
 80036fc:	f004 fd38 	bl	8008170 <RCCEx_PLL3_Config>
 8003700:	4603      	mov	r3, r0
 8003702:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART5 clock source config set later after clock selection check */
        break;
 8003706:	e00a      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800370e:	e006      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003710:	bf00      	nop
 8003712:	e004      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003714:	bf00      	nop
 8003716:	e002      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003718:	bf00      	nop
 800371a:	e000      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800371c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800371e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10c      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003726:	4b89      	ldr	r3, [pc, #548]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003728:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800372c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003730:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003734:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003736:	4a85      	ldr	r2, [pc, #532]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003738:	430b      	orrs	r3, r1
 800373a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800373e:	e003      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003740:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003744:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003748:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800374c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003750:	f002 0320 	and.w	r3, r2, #32
 8003754:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003758:	2300      	movs	r3, #0
 800375a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800375e:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8003762:	460b      	mov	r3, r1
 8003764:	4313      	orrs	r3, r2
 8003766:	d053      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8003768:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800376c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800376e:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8003772:	d031      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8003774:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8003778:	d82a      	bhi.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800377a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800377e:	d02d      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003780:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003784:	d824      	bhi.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003786:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800378a:	d029      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800378c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8003790:	d81e      	bhi.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003792:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003796:	d011      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800379c:	d818      	bhi.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d020      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80037a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037a6:	d113      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037a8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80037ac:	3308      	adds	r3, #8
 80037ae:	4618      	mov	r0, r3
 80037b0:	f004 fc46 	bl	8008040 <RCCEx_PLL2_Config>
 80037b4:	4603      	mov	r3, r0
 80037b6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART6 clock source config set later after clock selection check */
        break;
 80037ba:	e014      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80037bc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80037c0:	3330      	adds	r3, #48	@ 0x30
 80037c2:	4618      	mov	r0, r3
 80037c4:	f004 fcd4 	bl	8008170 <RCCEx_PLL3_Config>
 80037c8:	4603      	mov	r3, r0
 80037ca:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART6 clock source config set later after clock selection check */
        break;
 80037ce:	e00a      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80037d6:	e006      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80037d8:	bf00      	nop
 80037da:	e004      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80037dc:	bf00      	nop
 80037de:	e002      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80037e0:	bf00      	nop
 80037e2:	e000      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80037e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037e6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10c      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80037ee:	4b57      	ldr	r3, [pc, #348]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80037f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037f4:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 80037f8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80037fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037fe:	4a53      	ldr	r2, [pc, #332]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003800:	430b      	orrs	r3, r1
 8003802:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003806:	e003      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003808:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800380c:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003810:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003818:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800381c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003820:	2300      	movs	r3, #0
 8003822:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003826:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 800382a:	460b      	mov	r3, r1
 800382c:	4313      	orrs	r3, r2
 800382e:	d053      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8003830:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003836:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800383a:	d031      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800383c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003840:	d82a      	bhi.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003842:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003846:	d02d      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8003848:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800384c:	d824      	bhi.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800384e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003852:	d029      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003854:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003858:	d81e      	bhi.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800385a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800385e:	d011      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8003860:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003864:	d818      	bhi.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003866:	2b00      	cmp	r3, #0
 8003868:	d020      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800386a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800386e:	d113      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003870:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003874:	3308      	adds	r3, #8
 8003876:	4618      	mov	r0, r3
 8003878:	f004 fbe2 	bl	8008040 <RCCEx_PLL2_Config>
 800387c:	4603      	mov	r3, r0
 800387e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART7 clock source config set later after clock selection check */
        break;
 8003882:	e014      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003884:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003888:	3330      	adds	r3, #48	@ 0x30
 800388a:	4618      	mov	r0, r3
 800388c:	f004 fc70 	bl	8008170 <RCCEx_PLL3_Config>
 8003890:	4603      	mov	r3, r0
 8003892:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART7 clock source config set later after clock selection check */
        break;
 8003896:	e00a      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800389e:	e006      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80038a0:	bf00      	nop
 80038a2:	e004      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80038a4:	bf00      	nop
 80038a6:	e002      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80038a8:	bf00      	nop
 80038aa:	e000      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80038ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ae:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10c      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 80038b6:	4b25      	ldr	r3, [pc, #148]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80038b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80038bc:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 80038c0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80038c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038c6:	4a21      	ldr	r2, [pc, #132]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80038c8:	430b      	orrs	r3, r1
 80038ca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80038ce:	e003      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d0:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80038d4:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80038d8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80038dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80038e4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80038e8:	2300      	movs	r3, #0
 80038ea:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80038ee:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 80038f2:	460b      	mov	r3, r1
 80038f4:	4313      	orrs	r3, r2
 80038f6:	d055      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 80038f8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80038fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038fe:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003902:	d033      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x680>
 8003904:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003908:	d82c      	bhi.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800390a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800390e:	d02f      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8003910:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003914:	d826      	bhi.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003916:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800391a:	d02b      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800391c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003920:	d820      	bhi.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003922:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003926:	d013      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003928:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800392c:	d81a      	bhi.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800392e:	2b00      	cmp	r3, #0
 8003930:	d022      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8003932:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003936:	d115      	bne.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003938:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800393c:	3308      	adds	r3, #8
 800393e:	4618      	mov	r0, r3
 8003940:	f004 fb7e 	bl	8008040 <RCCEx_PLL2_Config>
 8003944:	4603      	mov	r3, r0
 8003946:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART8 clock source config set later after clock selection check */
        break;
 800394a:	e016      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x68e>
 800394c:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003950:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003954:	3330      	adds	r3, #48	@ 0x30
 8003956:	4618      	mov	r0, r3
 8003958:	f004 fc0a 	bl	8008170 <RCCEx_PLL3_Config>
 800395c:	4603      	mov	r3, r0
 800395e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART8 clock source config set later after clock selection check */
        break;
 8003962:	e00a      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800396a:	e006      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800396c:	bf00      	nop
 800396e:	e004      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003970:	bf00      	nop
 8003972:	e002      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003974:	bf00      	nop
 8003976:	e000      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003978:	bf00      	nop
    }

    if (ret == HAL_OK)
 800397a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10c      	bne.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8003982:	4bbb      	ldr	r3, [pc, #748]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003984:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003988:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800398c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003990:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003992:	4ab7      	ldr	r2, [pc, #732]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003994:	430b      	orrs	r3, r1
 8003996:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800399a:	e003      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800399c:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80039a0:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80039a4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80039a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ac:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80039b0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80039b4:	2300      	movs	r3, #0
 80039b6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80039ba:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80039be:	460b      	mov	r3, r1
 80039c0:	4313      	orrs	r3, r2
 80039c2:	d053      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 80039c4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80039c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039ca:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80039ce:	d031      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x748>
 80039d0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80039d4:	d82a      	bhi.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x740>
 80039d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80039da:	d02d      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 80039dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80039e0:	d824      	bhi.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x740>
 80039e2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80039e6:	d029      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x750>
 80039e8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80039ec:	d81e      	bhi.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x740>
 80039ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80039f2:	d011      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80039f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80039f8:	d818      	bhi.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x740>
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d020      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x754>
 80039fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a02:	d113      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a04:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003a08:	3308      	adds	r3, #8
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f004 fb18 	bl	8008040 <RCCEx_PLL2_Config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART9 clock source config set later after clock selection check */
        break;
 8003a16:	e014      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a18:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003a1c:	3330      	adds	r3, #48	@ 0x30
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f004 fba6 	bl	8008170 <RCCEx_PLL3_Config>
 8003a24:	4603      	mov	r3, r0
 8003a26:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART9 clock source config set later after clock selection check */
        break;
 8003a2a:	e00a      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8003a32:	e006      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003a34:	bf00      	nop
 8003a36:	e004      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003a38:	bf00      	nop
 8003a3a:	e002      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003a3c:	bf00      	nop
 8003a3e:	e000      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003a40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a42:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10c      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8003a4a:	4b89      	ldr	r3, [pc, #548]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003a4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003a50:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003a54:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003a58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a5a:	4a85      	ldr	r2, [pc, #532]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003a5c:	430b      	orrs	r3, r1
 8003a5e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003a62:	e003      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a64:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003a68:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8003a6c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a74:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8003a78:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003a82:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003a86:	460b      	mov	r3, r1
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	d055      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8003a8c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a94:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8003a98:	d031      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x812>
 8003a9a:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8003a9e:	d82a      	bhi.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003aa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003aa4:	d02d      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8003aa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003aaa:	d824      	bhi.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003aac:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003ab0:	d029      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8003ab2:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8003ab6:	d81e      	bhi.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003ab8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003abc:	d011      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8003abe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ac2:	d818      	bhi.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d020      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8003ac8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003acc:	d113      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ace:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003ad2:	3308      	adds	r3, #8
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f004 fab3 	bl	8008040 <RCCEx_PLL2_Config>
 8003ada:	4603      	mov	r3, r0
 8003adc:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART10 clock source config set later after clock selection check */
        break;
 8003ae0:	e014      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ae2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003ae6:	3330      	adds	r3, #48	@ 0x30
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f004 fb41 	bl	8008170 <RCCEx_PLL3_Config>
 8003aee:	4603      	mov	r3, r0
 8003af0:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART10 clock source config set later after clock selection check */
        break;
 8003af4:	e00a      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8003afc:	e006      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003afe:	bf00      	nop
 8003b00:	e004      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003b02:	bf00      	nop
 8003b04:	e002      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003b06:	bf00      	nop
 8003b08:	e000      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003b0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b0c:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10d      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8003b14:	4b56      	ldr	r3, [pc, #344]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003b16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003b1a:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8003b1e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b26:	4a52      	ldr	r2, [pc, #328]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003b2e:	e003      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b30:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003b34:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8003b38:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b40:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003b44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003b4e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003b52:	460b      	mov	r3, r1
 8003b54:	4313      	orrs	r3, r2
 8003b56:	d044      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8003b58:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b60:	2b05      	cmp	r3, #5
 8003b62:	d823      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8003b64:	a201      	add	r2, pc, #4	@ (adr r2, 8003b6c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8003b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b6a:	bf00      	nop
 8003b6c:	08003bb5 	.word	0x08003bb5
 8003b70:	08003b85 	.word	0x08003b85
 8003b74:	08003b99 	.word	0x08003b99
 8003b78:	08003bb5 	.word	0x08003bb5
 8003b7c:	08003bb5 	.word	0x08003bb5
 8003b80:	08003bb5 	.word	0x08003bb5
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b84:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003b88:	3308      	adds	r3, #8
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f004 fa58 	bl	8008040 <RCCEx_PLL2_Config>
 8003b90:	4603      	mov	r3, r0
 8003b92:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART11 clock source config set later after clock selection check */
        break;
 8003b96:	e00e      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b98:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003b9c:	3330      	adds	r3, #48	@ 0x30
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f004 fae6 	bl	8008170 <RCCEx_PLL3_Config>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* USART11 clock source config set later after clock selection check */
        break;
 8003baa:	e004      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8003bb2:	e000      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8003bb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bb6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10d      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8003bbe:	4b2c      	ldr	r3, [pc, #176]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003bc0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003bc4:	f023 0107 	bic.w	r1, r3, #7
 8003bc8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bd0:	4a27      	ldr	r2, [pc, #156]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003bd2:	430b      	orrs	r3, r1
 8003bd4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003bd8:	e003      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bda:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003bde:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8003be2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bea:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003bee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003bf8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	d04f      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8003c02:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c0a:	2b50      	cmp	r3, #80	@ 0x50
 8003c0c:	d029      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003c0e:	2b50      	cmp	r3, #80	@ 0x50
 8003c10:	d823      	bhi.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003c12:	2b40      	cmp	r3, #64	@ 0x40
 8003c14:	d027      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8003c16:	2b40      	cmp	r3, #64	@ 0x40
 8003c18:	d81f      	bhi.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003c1a:	2b30      	cmp	r3, #48	@ 0x30
 8003c1c:	d025      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8003c1e:	2b30      	cmp	r3, #48	@ 0x30
 8003c20:	d81b      	bhi.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	d00f      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003c26:	2b20      	cmp	r3, #32
 8003c28:	d817      	bhi.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d022      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003c2e:	2b10      	cmp	r3, #16
 8003c30:	d113      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c32:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003c36:	3308      	adds	r3, #8
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f004 fa01 	bl	8008040 <RCCEx_PLL2_Config>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART12 clock source config set later after clock selection check */
        break;
 8003c44:	e017      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c46:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003c4a:	3330      	adds	r3, #48	@ 0x30
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f004 fa8f 	bl	8008170 <RCCEx_PLL3_Config>
 8003c52:	4603      	mov	r3, r0
 8003c54:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* UART12 clock source config set later after clock selection check */
        break;
 8003c58:	e00d      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8003c60:	e009      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003c62:	bf00      	nop
 8003c64:	e007      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003c66:	bf00      	nop
 8003c68:	e005      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003c6a:	bf00      	nop
 8003c6c:	e003      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8003c6e:	bf00      	nop
 8003c70:	44020c00 	.word	0x44020c00
        break;
 8003c74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c76:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10d      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8003c7e:	4baf      	ldr	r3, [pc, #700]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003c80:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8003c84:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8003c88:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c90:	4aaa      	ldr	r2, [pc, #680]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003c92:	430b      	orrs	r3, r1
 8003c94:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8003c98:	e003      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c9a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003c9e:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ca2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003caa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003cae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003cb8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	d055      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003cc2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003cc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cca:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003cce:	d031      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8003cd0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003cd4:	d82a      	bhi.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003cd6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003cda:	d02d      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003cdc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ce0:	d824      	bhi.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003ce2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ce6:	d029      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003ce8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003cec:	d81e      	bhi.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003cee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003cf2:	d011      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8003cf4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003cf8:	d818      	bhi.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d020      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8003cfe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d02:	d113      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d04:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003d08:	3308      	adds	r3, #8
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f004 f998 	bl	8008040 <RCCEx_PLL2_Config>
 8003d10:	4603      	mov	r3, r0
 8003d12:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003d16:	e014      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d18:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003d1c:	3330      	adds	r3, #48	@ 0x30
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f004 fa26 	bl	8008170 <RCCEx_PLL3_Config>
 8003d24:	4603      	mov	r3, r0
 8003d26:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003d2a:	e00a      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8003d32:	e006      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003d34:	bf00      	nop
 8003d36:	e004      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003d38:	bf00      	nop
 8003d3a:	e002      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003d3c:	bf00      	nop
 8003d3e:	e000      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003d40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d42:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10d      	bne.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003d4a:	4b7c      	ldr	r3, [pc, #496]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d50:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003d54:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d5c:	4a77      	ldr	r2, [pc, #476]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003d5e:	430b      	orrs	r3, r1
 8003d60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003d64:	e003      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d66:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003d6a:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d6e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d76:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003d7a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d7e:	2300      	movs	r3, #0
 8003d80:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003d84:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	d03d      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003d8e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d96:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d9a:	d01b      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8003d9c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003da0:	d814      	bhi.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003da2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003da6:	d017      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003da8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003dac:	d80e      	bhi.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d014      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8003db2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003db6:	d109      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003db8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003dbc:	3330      	adds	r3, #48	@ 0x30
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f004 f9d6 	bl	8008170 <RCCEx_PLL3_Config>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003dca:	e008      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8003dd2:	e004      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003dd4:	bf00      	nop
 8003dd6:	e002      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003dd8:	bf00      	nop
 8003dda:	e000      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dde:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10d      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003de6:	4b55      	ldr	r3, [pc, #340]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003de8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003dec:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003df0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df8:	4a50      	ldr	r2, [pc, #320]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003dfa:	430b      	orrs	r3, r1
 8003dfc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003e00:	e003      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e02:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003e06:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e0a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e12:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003e16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003e20:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e24:	460b      	mov	r3, r1
 8003e26:	4313      	orrs	r3, r2
 8003e28:	d03d      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003e2a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e32:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003e36:	d01b      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8003e38:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003e3c:	d814      	bhi.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003e3e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003e42:	d017      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8003e44:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003e48:	d80e      	bhi.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d014      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8003e4e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e52:	d109      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e54:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003e58:	3330      	adds	r3, #48	@ 0x30
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f004 f988 	bl	8008170 <RCCEx_PLL3_Config>
 8003e60:	4603      	mov	r3, r0
 8003e62:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003e66:	e008      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8003e6e:	e004      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003e70:	bf00      	nop
 8003e72:	e002      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003e74:	bf00      	nop
 8003e76:	e000      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003e78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e7a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10d      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003e82:	4b2e      	ldr	r3, [pc, #184]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003e84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003e88:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003e8c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e94:	4a29      	ldr	r2, [pc, #164]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003e96:	430b      	orrs	r3, r1
 8003e98:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003e9c:	e003      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e9e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003ea2:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ea6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eae:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003eb2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003ebc:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	d040      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8003ec6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003eca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ece:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ed2:	d01b      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8003ed4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ed8:	d814      	bhi.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003eda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ede:	d017      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003ee0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ee4:	d80e      	bhi.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d014      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003eea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003eee:	d109      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ef0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003ef4:	3330      	adds	r3, #48	@ 0x30
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f004 f93a 	bl	8008170 <RCCEx_PLL3_Config>
 8003efc:	4603      	mov	r3, r0
 8003efe:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* I2C3 clock source config set later after clock selection check */
        break;
 8003f02:	e008      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8003f0a:	e004      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003f0c:	bf00      	nop
 8003f0e:	e002      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003f10:	bf00      	nop
 8003f12:	e000      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f16:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d110      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003f1e:	4b07      	ldr	r3, [pc, #28]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003f20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003f24:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003f28:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003f2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f30:	4a02      	ldr	r2, [pc, #8]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003f32:	430b      	orrs	r3, r1
 8003f34:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003f38:	e006      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8003f3a:	bf00      	nop
 8003f3c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f40:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003f44:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f48:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f50:	2100      	movs	r1, #0
 8003f52:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8003f56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f5a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003f5e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003f62:	460b      	mov	r3, r1
 8003f64:	4313      	orrs	r3, r2
 8003f66:	d03d      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8003f68:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003f6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f70:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f74:	d01b      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8003f76:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003f7a:	d814      	bhi.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003f7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f80:	d017      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8003f82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f86:	d80e      	bhi.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d014      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8003f8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f90:	d109      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f92:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003f96:	3330      	adds	r3, #48	@ 0x30
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f004 f8e9 	bl	8008170 <RCCEx_PLL3_Config>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* I2C4 clock source config set later after clock selection check */
        break;
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8003fac:	e004      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003fae:	bf00      	nop
 8003fb0:	e002      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003fb2:	bf00      	nop
 8003fb4:	e000      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003fb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fb8:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10d      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003fc0:	4bbe      	ldr	r3, [pc, #760]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003fc2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003fc6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003fca:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003fce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fd2:	4aba      	ldr	r2, [pc, #744]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003fd4:	430b      	orrs	r3, r1
 8003fd6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003fda:	e003      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fdc:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8003fe0:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003fe4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8003fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fec:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003ff0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ffa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ffe:	460b      	mov	r3, r1
 8004000:	4313      	orrs	r3, r2
 8004002:	d035      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8004004:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004008:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800400c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004010:	d015      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8004012:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004016:	d80e      	bhi.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004018:	2b00      	cmp	r3, #0
 800401a:	d012      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 800401c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004020:	d109      	bne.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004022:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004026:	3330      	adds	r3, #48	@ 0x30
 8004028:	4618      	mov	r0, r3
 800402a:	f004 f8a1 	bl	8008170 <RCCEx_PLL3_Config>
 800402e:	4603      	mov	r3, r0
 8004030:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8004034:	e006      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800403c:	e002      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800403e:	bf00      	nop
 8004040:	e000      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8004042:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004044:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10d      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 800404c:	4b9b      	ldr	r3, [pc, #620]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800404e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004052:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8004056:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800405a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800405e:	4a97      	ldr	r2, [pc, #604]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004060:	430b      	orrs	r3, r1
 8004062:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004066:	e003      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004068:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800406c:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004070:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004078:	2100      	movs	r1, #0
 800407a:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 800407e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004082:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004086:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800408a:	460b      	mov	r3, r1
 800408c:	4313      	orrs	r3, r2
 800408e:	d00e      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8004090:	4b8a      	ldr	r3, [pc, #552]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	4a89      	ldr	r2, [pc, #548]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004096:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800409a:	61d3      	str	r3, [r2, #28]
 800409c:	4b87      	ldr	r3, [pc, #540]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800409e:	69d9      	ldr	r1, [r3, #28]
 80040a0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80040a4:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80040a8:	4a84      	ldr	r2, [pc, #528]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80040aa:	430b      	orrs	r3, r1
 80040ac:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040ae:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80040b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80040ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040be:	2300      	movs	r3, #0
 80040c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040c4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80040c8:	460b      	mov	r3, r1
 80040ca:	4313      	orrs	r3, r2
 80040cc:	d055      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80040ce:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80040d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80040d6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80040da:	d031      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 80040dc:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80040e0:	d82a      	bhi.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80040e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040e6:	d02d      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80040e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040ec:	d824      	bhi.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80040ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040f2:	d029      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80040f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040f8:	d81e      	bhi.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80040fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040fe:	d011      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8004100:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004104:	d818      	bhi.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004106:	2b00      	cmp	r3, #0
 8004108:	d020      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800410a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800410e:	d113      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004110:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004114:	3308      	adds	r3, #8
 8004116:	4618      	mov	r0, r3
 8004118:	f003 ff92 	bl	8008040 <RCCEx_PLL2_Config>
 800411c:	4603      	mov	r3, r0
 800411e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004122:	e014      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004124:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004128:	3330      	adds	r3, #48	@ 0x30
 800412a:	4618      	mov	r0, r3
 800412c:	f004 f820 	bl	8008170 <RCCEx_PLL3_Config>
 8004130:	4603      	mov	r3, r0
 8004132:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004136:	e00a      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800413e:	e006      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004140:	bf00      	nop
 8004142:	e004      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004144:	bf00      	nop
 8004146:	e002      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004148:	bf00      	nop
 800414a:	e000      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800414c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800414e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10d      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004156:	4b59      	ldr	r3, [pc, #356]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004158:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800415c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004160:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004164:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004168:	4a54      	ldr	r2, [pc, #336]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800416a:	430b      	orrs	r3, r1
 800416c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004170:	e003      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004172:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004176:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800417a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800417e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004182:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004186:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800418a:	2300      	movs	r3, #0
 800418c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004190:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004194:	460b      	mov	r3, r1
 8004196:	4313      	orrs	r3, r2
 8004198:	d055      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800419a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800419e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80041a2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80041a6:	d031      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xf20>
 80041a8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80041ac:	d82a      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80041ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041b2:	d02d      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 80041b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041b8:	d824      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80041ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80041be:	d029      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 80041c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80041c4:	d81e      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80041c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041ca:	d011      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 80041cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041d0:	d818      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d020      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80041d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041da:	d113      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041dc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80041e0:	3308      	adds	r3, #8
 80041e2:	4618      	mov	r0, r3
 80041e4:	f003 ff2c 	bl	8008040 <RCCEx_PLL2_Config>
 80041e8:	4603      	mov	r3, r0
 80041ea:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80041ee:	e014      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80041f0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80041f4:	3330      	adds	r3, #48	@ 0x30
 80041f6:	4618      	mov	r0, r3
 80041f8:	f003 ffba 	bl	8008170 <RCCEx_PLL3_Config>
 80041fc:	4603      	mov	r3, r0
 80041fe:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004202:	e00a      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800420a:	e006      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800420c:	bf00      	nop
 800420e:	e004      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004210:	bf00      	nop
 8004212:	e002      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004214:	bf00      	nop
 8004216:	e000      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004218:	bf00      	nop
    }

    if (ret == HAL_OK)
 800421a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10d      	bne.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004222:	4b26      	ldr	r3, [pc, #152]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004224:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004228:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800422c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004230:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004234:	4a21      	ldr	r2, [pc, #132]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004236:	430b      	orrs	r3, r1
 8004238:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800423c:	e003      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800423e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004242:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8004246:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800424a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424e:	2100      	movs	r1, #0
 8004250:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8004254:	f003 0320 	and.w	r3, r3, #32
 8004258:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800425c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004260:	460b      	mov	r3, r1
 8004262:	4313      	orrs	r3, r2
 8004264:	d057      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8004266:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800426a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800426e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004272:	d033      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8004274:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004278:	d82c      	bhi.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800427a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800427e:	d02f      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8004280:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004284:	d826      	bhi.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004286:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800428a:	d02b      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 800428c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004290:	d820      	bhi.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004292:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004296:	d013      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004298:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800429c:	d81a      	bhi.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d022      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 80042a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042a6:	d115      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042a8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80042ac:	3308      	adds	r3, #8
 80042ae:	4618      	mov	r0, r3
 80042b0:	f003 fec6 	bl	8008040 <RCCEx_PLL2_Config>
 80042b4:	4603      	mov	r3, r0
 80042b6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80042ba:	e016      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
 80042bc:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80042c0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80042c4:	3330      	adds	r3, #48	@ 0x30
 80042c6:	4618      	mov	r0, r3
 80042c8:	f003 ff52 	bl	8008170 <RCCEx_PLL3_Config>
 80042cc:	4603      	mov	r3, r0
 80042ce:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80042d2:	e00a      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80042da:	e006      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80042dc:	bf00      	nop
 80042de:	e004      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80042e0:	bf00      	nop
 80042e2:	e002      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80042e4:	bf00      	nop
 80042e6:	e000      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80042e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ea:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10d      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 80042f2:	4bbb      	ldr	r3, [pc, #748]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80042f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80042f8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80042fc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004300:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004304:	4ab6      	ldr	r2, [pc, #728]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004306:	430b      	orrs	r3, r1
 8004308:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800430c:	e003      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800430e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004312:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8004316:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800431a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431e:	2100      	movs	r1, #0
 8004320:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8004324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004328:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800432c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004330:	460b      	mov	r3, r1
 8004332:	4313      	orrs	r3, r2
 8004334:	d055      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8004336:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800433a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800433e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8004342:	d031      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8004344:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8004348:	d82a      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800434a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800434e:	d02d      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8004350:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004354:	d824      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004356:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800435a:	d029      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 800435c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004360:	d81e      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004362:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004366:	d011      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8004368:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800436c:	d818      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800436e:	2b00      	cmp	r3, #0
 8004370:	d020      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8004372:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004376:	d113      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004378:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800437c:	3308      	adds	r3, #8
 800437e:	4618      	mov	r0, r3
 8004380:	f003 fe5e 	bl	8008040 <RCCEx_PLL2_Config>
 8004384:	4603      	mov	r3, r0
 8004386:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800438a:	e014      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800438c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004390:	3330      	adds	r3, #48	@ 0x30
 8004392:	4618      	mov	r0, r3
 8004394:	f003 feec 	bl	8008170 <RCCEx_PLL3_Config>
 8004398:	4603      	mov	r3, r0
 800439a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800439e:	e00a      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80043a6:	e006      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80043a8:	bf00      	nop
 80043aa:	e004      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80043ac:	bf00      	nop
 80043ae:	e002      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80043b0:	bf00      	nop
 80043b2:	e000      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80043b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043b6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10d      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 80043be:	4b88      	ldr	r3, [pc, #544]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80043c0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80043c4:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 80043c8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80043cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80043d0:	4a83      	ldr	r2, [pc, #524]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80043d2:	430b      	orrs	r3, r1
 80043d4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80043d8:	e003      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043da:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80043de:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 80043e2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80043e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ea:	2100      	movs	r1, #0
 80043ec:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80043f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80043f8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80043fc:	460b      	mov	r3, r1
 80043fe:	4313      	orrs	r3, r2
 8004400:	d055      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8004402:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004406:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800440a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800440e:	d031      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8004410:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004414:	d82a      	bhi.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004416:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800441a:	d02d      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 800441c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004420:	d824      	bhi.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004422:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004426:	d029      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8004428:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800442c:	d81e      	bhi.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800442e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004432:	d011      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8004434:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004438:	d818      	bhi.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800443a:	2b00      	cmp	r3, #0
 800443c:	d020      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 800443e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004442:	d113      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004444:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004448:	3308      	adds	r3, #8
 800444a:	4618      	mov	r0, r3
 800444c:	f003 fdf8 	bl	8008040 <RCCEx_PLL2_Config>
 8004450:	4603      	mov	r3, r0
 8004452:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8004456:	e014      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004458:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800445c:	3330      	adds	r3, #48	@ 0x30
 800445e:	4618      	mov	r0, r3
 8004460:	f003 fe86 	bl	8008170 <RCCEx_PLL3_Config>
 8004464:	4603      	mov	r3, r0
 8004466:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800446a:	e00a      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004472:	e006      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004474:	bf00      	nop
 8004476:	e004      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004478:	bf00      	nop
 800447a:	e002      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800447c:	bf00      	nop
 800447e:	e000      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004482:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10d      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 800448a:	4b55      	ldr	r3, [pc, #340]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800448c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004490:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004494:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004498:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800449c:	4a50      	ldr	r2, [pc, #320]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800449e:	430b      	orrs	r3, r1
 80044a0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80044a4:	e003      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80044aa:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80044ae:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80044b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b6:	2100      	movs	r1, #0
 80044b8:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 80044bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80044c4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80044c8:	460b      	mov	r3, r1
 80044ca:	4313      	orrs	r3, r2
 80044cc:	d055      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 80044ce:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80044d2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80044d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044da:	d031      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 80044dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044e0:	d82a      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80044e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044e6:	d02d      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 80044e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ec:	d824      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80044ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80044f2:	d029      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80044f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80044f8:	d81e      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80044fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044fe:	d011      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8004500:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004504:	d818      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004506:	2b00      	cmp	r3, #0
 8004508:	d020      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800450a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800450e:	d113      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004510:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004514:	3308      	adds	r3, #8
 8004516:	4618      	mov	r0, r3
 8004518:	f003 fd92 	bl	8008040 <RCCEx_PLL2_Config>
 800451c:	4603      	mov	r3, r0
 800451e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8004522:	e014      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004524:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004528:	3330      	adds	r3, #48	@ 0x30
 800452a:	4618      	mov	r0, r3
 800452c:	f003 fe20 	bl	8008170 <RCCEx_PLL3_Config>
 8004530:	4603      	mov	r3, r0
 8004532:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8004536:	e00a      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800453e:	e006      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004540:	bf00      	nop
 8004542:	e004      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004544:	bf00      	nop
 8004546:	e002      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004548:	bf00      	nop
 800454a:	e000      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800454c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800454e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10d      	bne.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8004556:	4b22      	ldr	r3, [pc, #136]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004558:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800455c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004560:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004564:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004568:	4a1d      	ldr	r2, [pc, #116]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800456a:	430b      	orrs	r3, r1
 800456c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004570:	e003      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004572:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004576:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800457a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800457e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004582:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004586:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800458a:	2300      	movs	r3, #0
 800458c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004590:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004594:	460b      	mov	r3, r1
 8004596:	4313      	orrs	r3, r2
 8004598:	d055      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800459a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800459e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80045a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80045a6:	d035      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 80045a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80045ac:	d82e      	bhi.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80045ae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80045b2:	d031      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 80045b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80045b8:	d828      	bhi.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80045ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045be:	d01b      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 80045c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045c4:	d822      	bhi.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 80045ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045ce:	d009      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 80045d0:	e01c      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045d2:	4b03      	ldr	r3, [pc, #12]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80045d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d6:	4a02      	ldr	r2, [pc, #8]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80045d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045dc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80045de:	e01c      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x132e>
 80045e0:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80045e4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80045e8:	3308      	adds	r3, #8
 80045ea:	4618      	mov	r0, r3
 80045ec:	f003 fd28 	bl	8008040 <RCCEx_PLL2_Config>
 80045f0:	4603      	mov	r3, r0
 80045f2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* SAI1 clock source config set later after clock selection check */
        break;
 80045f6:	e010      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80045f8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80045fc:	3330      	adds	r3, #48	@ 0x30
 80045fe:	4618      	mov	r0, r3
 8004600:	f003 fdb6 	bl	8008170 <RCCEx_PLL3_Config>
 8004604:	4603      	mov	r3, r0
 8004606:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* SAI1 clock source config set later after clock selection check */
        break;
 800460a:	e006      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004612:	e002      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8004614:	bf00      	nop
 8004616:	e000      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8004618:	bf00      	nop
    }

    if (ret == HAL_OK)
 800461a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10d      	bne.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004622:	4bc2      	ldr	r3, [pc, #776]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004624:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004628:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800462c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004630:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004634:	4abd      	ldr	r2, [pc, #756]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004636:	430b      	orrs	r3, r1
 8004638:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800463c:	e003      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800463e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004642:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8004646:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800464a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464e:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004652:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004654:	2300      	movs	r3, #0
 8004656:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004658:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800465c:	460b      	mov	r3, r1
 800465e:	4313      	orrs	r3, r2
 8004660:	d051      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x141a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004662:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004666:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800466a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800466e:	d033      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x13ec>
 8004670:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004674:	d82c      	bhi.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x13e4>
 8004676:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800467a:	d02d      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x13ec>
 800467c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004680:	d826      	bhi.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x13e4>
 8004682:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004686:	d019      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x13d0>
 8004688:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800468c:	d820      	bhi.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x13e4>
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x13ae>
 8004692:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004696:	d007      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x13bc>
 8004698:	e01a      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x13e4>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800469a:	4ba4      	ldr	r3, [pc, #656]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 800469c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800469e:	4aa3      	ldr	r2, [pc, #652]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80046a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046a4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80046a6:	e018      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x13ee>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80046a8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80046ac:	3308      	adds	r3, #8
 80046ae:	4618      	mov	r0, r3
 80046b0:	f003 fcc6 	bl	8008040 <RCCEx_PLL2_Config>
 80046b4:	4603      	mov	r3, r0
 80046b6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* SAI2 clock source config set later after clock selection check */
        break;
 80046ba:	e00e      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x13ee>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80046bc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80046c0:	3330      	adds	r3, #48	@ 0x30
 80046c2:	4618      	mov	r0, r3
 80046c4:	f003 fd54 	bl	8008170 <RCCEx_PLL3_Config>
 80046c8:	4603      	mov	r3, r0
 80046ca:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* SAI2 clock source config set later after clock selection check */
        break;
 80046ce:	e004      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x13ee>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80046d6:	e000      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x13ee>
        break;
 80046d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046da:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10d      	bne.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x1412>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80046e2:	4b92      	ldr	r3, [pc, #584]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80046e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80046e8:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 80046ec:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80046f0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80046f4:	4a8d      	ldr	r2, [pc, #564]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80046f6:	430b      	orrs	r3, r1
 80046f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80046fc:	e003      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x141a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046fe:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004702:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004706:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800470a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004712:	673b      	str	r3, [r7, #112]	@ 0x70
 8004714:	2300      	movs	r3, #0
 8004716:	677b      	str	r3, [r7, #116]	@ 0x74
 8004718:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800471c:	460b      	mov	r3, r1
 800471e:	4313      	orrs	r3, r2
 8004720:	d032      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x149c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004722:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004726:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800472a:	2b05      	cmp	r3, #5
 800472c:	d80f      	bhi.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x1462>
 800472e:	2b03      	cmp	r3, #3
 8004730:	d211      	bcs.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x146a>
 8004732:	2b01      	cmp	r3, #1
 8004734:	d911      	bls.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8004736:	2b02      	cmp	r3, #2
 8004738:	d109      	bne.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x1462>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800473a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800473e:	3308      	adds	r3, #8
 8004740:	4618      	mov	r0, r3
 8004742:	f003 fc7d 	bl	8008040 <RCCEx_PLL2_Config>
 8004746:	4603      	mov	r3, r0
 8004748:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800474c:	e006      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x1470>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004754:	e002      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x1470>
        break;
 8004756:	bf00      	nop
 8004758:	e000      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x1470>
        break;
 800475a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800475c:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10d      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x1494>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004764:	4b71      	ldr	r3, [pc, #452]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004766:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800476a:	f023 0107 	bic.w	r1, r3, #7
 800476e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004772:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004776:	4a6d      	ldr	r2, [pc, #436]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004778:	430b      	orrs	r3, r1
 800477a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800477e:	e003      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x149c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004780:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004784:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004788:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800478c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004790:	2100      	movs	r1, #0
 8004792:	66b9      	str	r1, [r7, #104]	@ 0x68
 8004794:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004798:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800479a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800479e:	460b      	mov	r3, r1
 80047a0:	4313      	orrs	r3, r2
 80047a2:	d024      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x1502>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80047a4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80047a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d005      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x14d0>
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	d005      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80047ba:	e002      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x14d6>
        break;
 80047bc:	bf00      	nop
 80047be:	e000      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x14d6>
        break;
 80047c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047c2:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10d      	bne.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x14fa>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80047ca:	4b58      	ldr	r3, [pc, #352]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80047cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80047d0:	f023 0108 	bic.w	r1, r3, #8
 80047d4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80047d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80047dc:	4a53      	ldr	r2, [pc, #332]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80047de:	430b      	orrs	r3, r1
 80047e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80047e4:	e003      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x1502>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80047ea:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047ee:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80047f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f6:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80047fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80047fc:	2300      	movs	r3, #0
 80047fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8004800:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004804:	460b      	mov	r3, r1
 8004806:	4313      	orrs	r3, r2
 8004808:	f000 80b9 	beq.w	800497e <HAL_RCCEx_PeriphCLKConfig+0x1692>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800480c:	4b48      	ldr	r3, [pc, #288]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800480e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004810:	4a47      	ldr	r2, [pc, #284]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004812:	f043 0301 	orr.w	r3, r3, #1
 8004816:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004818:	f7fd faf0 	bl	8001dfc <HAL_GetTick>
 800481c:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004820:	e00b      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x154e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004822:	f7fd faeb 	bl	8001dfc <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d903      	bls.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x154e>
      {
        ret = HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004838:	e005      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x155a>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800483a:	4b3d      	ldr	r3, [pc, #244]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800483c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0ed      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1536>
      }
    }

    if (ret == HAL_OK)
 8004846:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800484a:	2b00      	cmp	r3, #0
 800484c:	f040 8093 	bne.w	8004976 <HAL_RCCEx_PeriphCLKConfig+0x168a>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004850:	4b36      	ldr	r3, [pc, #216]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004852:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004856:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800485a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800485e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8004862:	2b00      	cmp	r3, #0
 8004864:	d023      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x15c2>
 8004866:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800486a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 800486e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8004872:	4293      	cmp	r3, r2
 8004874:	d01b      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x15c2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004876:	4b2d      	ldr	r3, [pc, #180]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004878:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800487c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004880:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004884:	4b29      	ldr	r3, [pc, #164]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004886:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800488a:	4a28      	ldr	r2, [pc, #160]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 800488c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004890:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004894:	4b25      	ldr	r3, [pc, #148]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004896:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800489a:	4a24      	ldr	r2, [pc, #144]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 800489c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048a4:	4a21      	ldr	r2, [pc, #132]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80048a6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80048aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048ae:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d019      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x1602>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ba:	f7fd fa9f 	bl	8001dfc <HAL_GetTick>
 80048be:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048c2:	e00d      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x15f4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048c4:	f7fd fa9a 	bl	8001dfc <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80048ce:	1ad2      	subs	r2, r2, r3
 80048d0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d903      	bls.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x15f4>
          {
            ret = HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
            break;
 80048de:	e006      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x1602>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048e0:	4b12      	ldr	r3, [pc, #72]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 80048e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0ea      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x15d8>
          }
        }
      }

      if (ret == HAL_OK)
 80048ee:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d13a      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x1680>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80048f6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80048fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80048fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004902:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004906:	d115      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x1648>
 8004908:	4b08      	ldr	r3, [pc, #32]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004910:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004914:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004918:	091b      	lsrs	r3, r3, #4
 800491a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800491e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004922:	4a02      	ldr	r2, [pc, #8]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x1640>)
 8004924:	430b      	orrs	r3, r1
 8004926:	61d3      	str	r3, [r2, #28]
 8004928:	e00a      	b.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x1654>
 800492a:	bf00      	nop
 800492c:	44020c00 	.word	0x44020c00
 8004930:	44020800 	.word	0x44020800
 8004934:	4bc6      	ldr	r3, [pc, #792]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004936:	69db      	ldr	r3, [r3, #28]
 8004938:	4ac5      	ldr	r2, [pc, #788]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 800493a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800493e:	61d3      	str	r3, [r2, #28]
 8004940:	4bc3      	ldr	r3, [pc, #780]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004942:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004946:	4ac2      	ldr	r2, [pc, #776]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004948:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800494c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004950:	4bbf      	ldr	r3, [pc, #764]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004952:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8004956:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800495a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800495e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004962:	4abb      	ldr	r2, [pc, #748]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004964:	430b      	orrs	r3, r1
 8004966:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800496a:	e008      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x1692>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800496c:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004970:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
 8004974:	e003      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x1692>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004976:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800497a:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800497e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004986:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800498a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800498c:	2300      	movs	r3, #0
 800498e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004990:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004994:	460b      	mov	r3, r1
 8004996:	4313      	orrs	r3, r2
 8004998:	d035      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x171a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800499a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800499e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80049a2:	2b30      	cmp	r3, #48	@ 0x30
 80049a4:	d014      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x16e4>
 80049a6:	2b30      	cmp	r3, #48	@ 0x30
 80049a8:	d80e      	bhi.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x16dc>
 80049aa:	2b20      	cmp	r3, #32
 80049ac:	d012      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 80049ae:	2b20      	cmp	r3, #32
 80049b0:	d80a      	bhi.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x16dc>
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d010      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 80049b6:	2b10      	cmp	r3, #16
 80049b8:	d106      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x16dc>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049ba:	4ba5      	ldr	r3, [pc, #660]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80049bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049be:	4aa4      	ldr	r2, [pc, #656]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80049c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049c4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80049c6:	e008      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x16ee>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80049ce:	e004      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x16ee>
        break;
 80049d0:	bf00      	nop
 80049d2:	e002      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x16ee>
        break;
 80049d4:	bf00      	nop
 80049d6:	e000      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x16ee>
        break;
 80049d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049da:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10d      	bne.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x1712>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80049e2:	4b9b      	ldr	r3, [pc, #620]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80049e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80049e8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80049ec:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80049f0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80049f4:	4a96      	ldr	r2, [pc, #600]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 80049f6:	430b      	orrs	r3, r1
 80049f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80049fc:	e003      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x171a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049fe:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004a02:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004a06:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0e:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004a12:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a14:	2300      	movs	r3, #0
 8004a16:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a18:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	d033      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x179e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8004a22:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004a26:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d002      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1748>
 8004a2e:	2b40      	cmp	r3, #64	@ 0x40
 8004a30:	d007      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x1756>
 8004a32:	e010      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x176a>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a34:	4b86      	ldr	r3, [pc, #536]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a38:	4a85      	ldr	r2, [pc, #532]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004a3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a3e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004a40:	e00d      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x1772>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a42:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004a46:	3308      	adds	r3, #8
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f003 faf9 	bl	8008040 <RCCEx_PLL2_Config>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004a54:	e003      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x1772>

      default:
        ret = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004a5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a5e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10d      	bne.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x1796>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8004a66:	4b7a      	ldr	r3, [pc, #488]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004a68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a6c:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8004a70:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004a74:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8004a78:	4a75      	ldr	r2, [pc, #468]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004a7a:	430b      	orrs	r3, r1
 8004a7c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004a80:	e003      	b.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x179e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a82:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004a86:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004a8a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a92:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004a96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a98:	2300      	movs	r3, #0
 8004a9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a9c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	d048      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x184c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8004aa6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004aaa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	d827      	bhi.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x1816>
 8004ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x17cc>)
 8004ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab8:	08004acd 	.word	0x08004acd
 8004abc:	08004adb 	.word	0x08004adb
 8004ac0:	08004aef 	.word	0x08004aef
 8004ac4:	08004b0b 	.word	0x08004b0b
 8004ac8:	08004b0b 	.word	0x08004b0b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004acc:	4b60      	ldr	r3, [pc, #384]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad0:	4a5f      	ldr	r2, [pc, #380]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004ad2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ad6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004ad8:	e018      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1820>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ada:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004ade:	3308      	adds	r3, #8
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f003 faad 	bl	8008040 <RCCEx_PLL2_Config>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004aec:	e00e      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1820>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004aee:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004af2:	3330      	adds	r3, #48	@ 0x30
 8004af4:	4618      	mov	r0, r3
 8004af6:	f003 fb3b 	bl	8008170 <RCCEx_PLL3_Config>
 8004afa:	4603      	mov	r3, r0
 8004afc:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004b00:	e004      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1820>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004b08:	e000      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1820>
        break;
 8004b0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b0c:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10d      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1844>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004b14:	4b4e      	ldr	r3, [pc, #312]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b1a:	f023 0107 	bic.w	r1, r3, #7
 8004b1e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004b22:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004b26:	4a4a      	ldr	r2, [pc, #296]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004b28:	430b      	orrs	r3, r1
 8004b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004b2e:	e003      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x184c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b30:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004b34:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004b38:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b40:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004b44:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b46:	2300      	movs	r3, #0
 8004b48:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b4a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4313      	orrs	r3, r2
 8004b52:	f000 8083 	beq.w	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1970>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8004b56:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004b5e:	2b20      	cmp	r3, #32
 8004b60:	d85f      	bhi.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x1936>
 8004b62:	a201      	add	r2, pc, #4	@ (adr r2, 8004b68 <HAL_RCCEx_PeriphCLKConfig+0x187c>)
 8004b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b68:	08004bed 	.word	0x08004bed
 8004b6c:	08004c23 	.word	0x08004c23
 8004b70:	08004c23 	.word	0x08004c23
 8004b74:	08004c23 	.word	0x08004c23
 8004b78:	08004c23 	.word	0x08004c23
 8004b7c:	08004c23 	.word	0x08004c23
 8004b80:	08004c23 	.word	0x08004c23
 8004b84:	08004c23 	.word	0x08004c23
 8004b88:	08004bfb 	.word	0x08004bfb
 8004b8c:	08004c23 	.word	0x08004c23
 8004b90:	08004c23 	.word	0x08004c23
 8004b94:	08004c23 	.word	0x08004c23
 8004b98:	08004c23 	.word	0x08004c23
 8004b9c:	08004c23 	.word	0x08004c23
 8004ba0:	08004c23 	.word	0x08004c23
 8004ba4:	08004c23 	.word	0x08004c23
 8004ba8:	08004c0f 	.word	0x08004c0f
 8004bac:	08004c23 	.word	0x08004c23
 8004bb0:	08004c23 	.word	0x08004c23
 8004bb4:	08004c23 	.word	0x08004c23
 8004bb8:	08004c23 	.word	0x08004c23
 8004bbc:	08004c23 	.word	0x08004c23
 8004bc0:	08004c23 	.word	0x08004c23
 8004bc4:	08004c23 	.word	0x08004c23
 8004bc8:	08004c2b 	.word	0x08004c2b
 8004bcc:	08004c23 	.word	0x08004c23
 8004bd0:	08004c23 	.word	0x08004c23
 8004bd4:	08004c23 	.word	0x08004c23
 8004bd8:	08004c23 	.word	0x08004c23
 8004bdc:	08004c23 	.word	0x08004c23
 8004be0:	08004c23 	.word	0x08004c23
 8004be4:	08004c23 	.word	0x08004c23
 8004be8:	08004c2b 	.word	0x08004c2b
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bec:	4b18      	ldr	r3, [pc, #96]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf0:	4a17      	ldr	r2, [pc, #92]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004bf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bf6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004bf8:	e018      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1940>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004bfa:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004bfe:	3308      	adds	r3, #8
 8004c00:	4618      	mov	r0, r3
 8004c02:	f003 fa1d 	bl	8008040 <RCCEx_PLL2_Config>
 8004c06:	4603      	mov	r3, r0
 8004c08:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004c0c:	e00e      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1940>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c0e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004c12:	3330      	adds	r3, #48	@ 0x30
 8004c14:	4618      	mov	r0, r3
 8004c16:	f003 faab 	bl	8008170 <RCCEx_PLL3_Config>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004c20:	e004      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1940>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004c28:	e000      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1940>
        break;
 8004c2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c2c:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10f      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1968>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004c34:	4b06      	ldr	r3, [pc, #24]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c3a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004c3e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004c46:	4a02      	ldr	r2, [pc, #8]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1964>)
 8004c48:	430b      	orrs	r3, r1
 8004c4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004c4e:	e005      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1970>
 8004c50:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c54:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004c58:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004c5c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c64:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004c68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c6e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004c72:	460b      	mov	r3, r1
 8004c74:	4313      	orrs	r3, r2
 8004c76:	d04e      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8004c78:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004c7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c84:	d02e      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
 8004c86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c8a:	d827      	bhi.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x19f0>
 8004c8c:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c8e:	d02b      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x19fc>
 8004c90:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c92:	d823      	bhi.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x19f0>
 8004c94:	2b80      	cmp	r3, #128	@ 0x80
 8004c96:	d017      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x19dc>
 8004c98:	2b80      	cmp	r3, #128	@ 0x80
 8004c9a:	d81f      	bhi.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x19f0>
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d002      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x19ba>
 8004ca0:	2b40      	cmp	r3, #64	@ 0x40
 8004ca2:	d007      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x19c8>
 8004ca4:	e01a      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ca6:	4bb0      	ldr	r3, [pc, #704]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8004ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004caa:	4aaf      	ldr	r2, [pc, #700]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8004cac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cb0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004cb2:	e01a      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x19fe>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cb4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004cb8:	3308      	adds	r3, #8
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f003 f9c0 	bl	8008040 <RCCEx_PLL2_Config>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004cc6:	e010      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x19fe>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004cc8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004ccc:	3330      	adds	r3, #48	@ 0x30
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f003 fa4e 	bl	8008170 <RCCEx_PLL3_Config>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004cda:	e006      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x19fe>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004ce2:	e002      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x19fe>
        break;
 8004ce4:	bf00      	nop
 8004ce6:	e000      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x19fe>
        break;
 8004ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cea:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10d      	bne.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x1a22>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004cf2:	4b9d      	ldr	r3, [pc, #628]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8004cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004cf8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004cfc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004d00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004d04:	4a98      	ldr	r2, [pc, #608]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8004d06:	430b      	orrs	r3, r1
 8004d08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d0c:	e003      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d0e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004d12:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004d16:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004d22:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d24:	2300      	movs	r3, #0
 8004d26:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d28:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	d055      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x1af2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8004d32:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004d36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d3a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004d3e:	d031      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1ab8>
 8004d40:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004d44:	d82a      	bhi.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
 8004d46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d4a:	d02d      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1abc>
 8004d4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d50:	d824      	bhi.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
 8004d52:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004d56:	d029      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x1ac0>
 8004d58:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004d5c:	d81e      	bhi.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
 8004d5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d62:	d011      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1a9c>
 8004d64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d68:	d818      	bhi.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d020      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1ac4>
 8004d6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d72:	d113      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1ab0>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d74:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004d78:	3308      	adds	r3, #8
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f003 f960 	bl	8008040 <RCCEx_PLL2_Config>
 8004d80:	4603      	mov	r3, r0
 8004d82:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004d86:	e014      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x1ac6>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d88:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004d8c:	3330      	adds	r3, #48	@ 0x30
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f003 f9ee 	bl	8008170 <RCCEx_PLL3_Config>
 8004d94:	4603      	mov	r3, r0
 8004d96:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004d9a:	e00a      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004da2:	e006      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        break;
 8004da4:	bf00      	nop
 8004da6:	e004      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        break;
 8004da8:	bf00      	nop
 8004daa:	e002      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        break;
 8004dac:	bf00      	nop
 8004dae:	e000      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
        break;
 8004db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004db2:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10d      	bne.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x1aea>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8004dba:	4b6b      	ldr	r3, [pc, #428]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8004dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dc0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004dc4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004dc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004dcc:	4a66      	ldr	r2, [pc, #408]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8004dce:	430b      	orrs	r3, r1
 8004dd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004dd4:	e003      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x1af2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004dda:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8004dde:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004dea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dec:	2300      	movs	r3, #0
 8004dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004df0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004df4:	460b      	mov	r3, r1
 8004df6:	4313      	orrs	r3, r2
 8004df8:	d055      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x1bba>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8004dfa:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004dfe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004e02:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004e06:	d031      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x1b80>
 8004e08:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004e0c:	d82a      	bhi.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
 8004e0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e12:	d02d      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x1b84>
 8004e14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e18:	d824      	bhi.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
 8004e1a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004e1e:	d029      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1b88>
 8004e20:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004e24:	d81e      	bhi.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
 8004e26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e2a:	d011      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1b64>
 8004e2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e30:	d818      	bhi.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d020      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1b8c>
 8004e36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e3a:	d113      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e3c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004e40:	3308      	adds	r3, #8
 8004e42:	4618      	mov	r0, r3
 8004e44:	f003 f8fc 	bl	8008040 <RCCEx_PLL2_Config>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004e4e:	e014      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x1b8e>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e50:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004e54:	3330      	adds	r3, #48	@ 0x30
 8004e56:	4618      	mov	r0, r3
 8004e58:	f003 f98a 	bl	8008170 <RCCEx_PLL3_Config>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004e62:	e00a      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004e6a:	e006      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        break;
 8004e6c:	bf00      	nop
 8004e6e:	e004      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        break;
 8004e70:	bf00      	nop
 8004e72:	e002      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        break;
 8004e74:	bf00      	nop
 8004e76:	e000      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x1b8e>
        break;
 8004e78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e7a:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10d      	bne.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x1bb2>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8004e82:	4b39      	ldr	r3, [pc, #228]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8004e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e88:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004e8c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004e90:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004e94:	4934      	ldr	r1, [pc, #208]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004e9c:	e003      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x1bba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e9e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004ea2:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004ea6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eae:	2100      	movs	r1, #0
 8004eb0:	6239      	str	r1, [r7, #32]
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eb8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	d058      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8004ec2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004ec6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004eca:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004ece:	d031      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8004ed0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004ed4:	d82a      	bhi.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1c40>
 8004ed6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004eda:	d02d      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x1c4c>
 8004edc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ee0:	d824      	bhi.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1c40>
 8004ee2:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004ee6:	d029      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1c50>
 8004ee8:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004eec:	d81e      	bhi.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1c40>
 8004eee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ef2:	d011      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1c2c>
 8004ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ef8:	d818      	bhi.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1c40>
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d020      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1c54>
 8004efe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f02:	d113      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1c40>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f04:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004f08:	3308      	adds	r3, #8
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f003 f898 	bl	8008040 <RCCEx_PLL2_Config>
 8004f10:	4603      	mov	r3, r0
 8004f12:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004f16:	e014      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x1c56>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f18:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004f1c:	3330      	adds	r3, #48	@ 0x30
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f003 f926 	bl	8008170 <RCCEx_PLL3_Config>
 8004f24:	4603      	mov	r3, r0
 8004f26:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004f2a:	e00a      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004f32:	e006      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        break;
 8004f34:	bf00      	nop
 8004f36:	e004      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        break;
 8004f38:	bf00      	nop
 8004f3a:	e002      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        break;
 8004f3c:	bf00      	nop
 8004f3e:	e000      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x1c56>
        break;
 8004f40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f42:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d110      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1c80>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8004f4a:	4b07      	ldr	r3, [pc, #28]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8004f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f50:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8004f54:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004f58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f5c:	4902      	ldr	r1, [pc, #8]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1c7c>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004f64:	e006      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
 8004f66:	bf00      	nop
 8004f68:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f6c:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004f70:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004f74:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	61b9      	str	r1, [r7, #24]
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	61fb      	str	r3, [r7, #28]
 8004f86:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	d03d      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x1d20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8004f90:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004f94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004f98:	2b03      	cmp	r3, #3
 8004f9a:	d81c      	bhi.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x1cea>
 8004f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1cb8>)
 8004f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa2:	bf00      	nop
 8004fa4:	08004fdf 	.word	0x08004fdf
 8004fa8:	08004fb5 	.word	0x08004fb5
 8004fac:	08004fc3 	.word	0x08004fc3
 8004fb0:	08004fdf 	.word	0x08004fdf
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fb4:	4b6f      	ldr	r3, [pc, #444]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb8:	4a6e      	ldr	r2, [pc, #440]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8004fba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fbe:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004fc0:	e00e      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1cf4>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004fc2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004fc6:	3308      	adds	r3, #8
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f003 f839 	bl	8008040 <RCCEx_PLL2_Config>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8004fd4:	e004      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1cf4>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 8004fdc:	e000      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1cf4>
        break;
 8004fde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fe0:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10d      	bne.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x1d18>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004fe8:	4b62      	ldr	r3, [pc, #392]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8004fea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004fee:	f023 0203 	bic.w	r2, r3, #3
 8004ff2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8004ff6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004ffa:	495e      	ldr	r1, [pc, #376]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005002:	e003      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x1d20>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005004:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005008:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800500c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005014:	2100      	movs	r1, #0
 8005016:	6139      	str	r1, [r7, #16]
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	617b      	str	r3, [r7, #20]
 800501e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005022:	460b      	mov	r3, r1
 8005024:	4313      	orrs	r3, r2
 8005026:	d03a      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x1db2>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005028:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800502c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005030:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005034:	d00e      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x1d68>
 8005036:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800503a:	d815      	bhi.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
 800503c:	2b00      	cmp	r3, #0
 800503e:	d017      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x1d84>
 8005040:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005044:	d110      	bne.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005046:	4b4b      	ldr	r3, [pc, #300]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 8005048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504a:	4a4a      	ldr	r2, [pc, #296]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 800504c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005050:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005052:	e00e      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x1d86>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005054:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005058:	3308      	adds	r3, #8
 800505a:	4618      	mov	r0, r3
 800505c:	f002 fff0 	bl	8008040 <RCCEx_PLL2_Config>
 8005060:	4603      	mov	r3, r0
 8005062:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005066:	e004      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x1d86>

      default:
        ret = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 800506e:	e000      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x1d86>
        break;
 8005070:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005072:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10d      	bne.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x1daa>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800507a:	4b3e      	ldr	r3, [pc, #248]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 800507c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005080:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005084:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005088:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800508c:	4939      	ldr	r1, [pc, #228]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 800508e:	4313      	orrs	r3, r2
 8005090:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8005094:	e003      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x1db2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005096:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800509a:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800509e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80050a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a6:	2100      	movs	r1, #0
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	f003 0310 	and.w	r3, r3, #16
 80050ae:	60fb      	str	r3, [r7, #12]
 80050b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80050b4:	460b      	mov	r3, r1
 80050b6:	4313      	orrs	r3, r2
 80050b8:	d038      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x1e40>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80050ba:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80050be:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80050c2:	2b30      	cmp	r3, #48	@ 0x30
 80050c4:	d01b      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x1e12>
 80050c6:	2b30      	cmp	r3, #48	@ 0x30
 80050c8:	d815      	bhi.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x1e0a>
 80050ca:	2b10      	cmp	r3, #16
 80050cc:	d002      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x1de8>
 80050ce:	2b20      	cmp	r3, #32
 80050d0:	d007      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x1df6>
 80050d2:	e010      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x1e0a>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050d4:	4b27      	ldr	r3, [pc, #156]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 80050d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d8:	4a26      	ldr	r2, [pc, #152]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 80050da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050de:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80050e0:	e00e      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x1e14>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80050e2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80050e6:	3330      	adds	r3, #48	@ 0x30
 80050e8:	4618      	mov	r0, r3
 80050ea:	f003 f841 	bl	8008170 <RCCEx_PLL3_Config>
 80050ee:	4603      	mov	r3, r0
 80050f0:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80050f4:	e004      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x1e14>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
        break;
 80050fc:	e000      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x1e14>
        break;
 80050fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005100:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10d      	bne.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x1e38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005108:	4b1a      	ldr	r3, [pc, #104]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 800510a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800510e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005112:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005116:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800511a:	4916      	ldr	r1, [pc, #88]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 800511c:	4313      	orrs	r3, r2
 800511e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005122:	e003      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x1e40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005124:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8005128:	f887 3152 	strb.w	r3, [r7, #338]	@ 0x152

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800512c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005134:	2100      	movs	r1, #0
 8005136:	6039      	str	r1, [r7, #0]
 8005138:	f003 0308 	and.w	r3, r3, #8
 800513c:	607b      	str	r3, [r7, #4]
 800513e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005142:	460b      	mov	r3, r1
 8005144:	4313      	orrs	r3, r2
 8005146:	d00c      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x1e76>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005148:	4b0a      	ldr	r3, [pc, #40]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 800514a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800514e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005152:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8005156:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800515a:	4906      	ldr	r1, [pc, #24]	@ (8005174 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
 800515c:	4313      	orrs	r3, r2
 800515e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8005162:	f897 3152 	ldrb.w	r3, [r7, #338]	@ 0x152
}
 8005166:	4618      	mov	r0, r3
 8005168:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 800516c:	46bd      	mov	sp, r7
 800516e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005172:	bf00      	nop
 8005174:	44020c00 	.word	0x44020c00

08005178 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8005178:	b480      	push	{r7}
 800517a:	b08b      	sub	sp, #44	@ 0x2c
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005180:	4bad      	ldr	r3, [pc, #692]	@ (8005438 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005188:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800518a:	4bab      	ldr	r3, [pc, #684]	@ (8005438 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800518c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800518e:	f003 0303 	and.w	r3, r3, #3
 8005192:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005194:	4ba8      	ldr	r3, [pc, #672]	@ (8005438 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005198:	0a1b      	lsrs	r3, r3, #8
 800519a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800519e:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80051a0:	4ba5      	ldr	r3, [pc, #660]	@ (8005438 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80051a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a4:	f003 0310 	and.w	r3, r3, #16
 80051a8:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80051aa:	4ba3      	ldr	r3, [pc, #652]	@ (8005438 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80051ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ae:	08db      	lsrs	r3, r3, #3
 80051b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	fb02 f303 	mul.w	r3, r2, r3
 80051ba:	ee07 3a90 	vmov	s15, r3
 80051be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c2:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 8126 	beq.w	800541a <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	2b03      	cmp	r3, #3
 80051d2:	d053      	beq.n	800527c <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	2b03      	cmp	r3, #3
 80051d8:	d86f      	bhi.n	80052ba <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d003      	beq.n	80051e8 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d02b      	beq.n	800523e <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 80051e6:	e068      	b.n	80052ba <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80051e8:	4b93      	ldr	r3, [pc, #588]	@ (8005438 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	08db      	lsrs	r3, r3, #3
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	4a92      	ldr	r2, [pc, #584]	@ (800543c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80051f4:	fa22 f303 	lsr.w	r3, r2, r3
 80051f8:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	ee07 3a90 	vmov	s15, r3
 8005200:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	ee07 3a90 	vmov	s15, r3
 800520a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800520e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	ee07 3a90 	vmov	s15, r3
 8005218:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800521c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005220:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8005440 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005224:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005228:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800522c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005230:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005238:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800523c:	e068      	b.n	8005310 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	ee07 3a90 	vmov	s15, r3
 8005244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005248:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8005444 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800524c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	ee07 3a90 	vmov	s15, r3
 8005256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800525a:	ed97 6a04 	vldr	s12, [r7, #16]
 800525e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005440 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800526a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800526e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005276:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800527a:	e049      	b.n	8005310 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	ee07 3a90 	vmov	s15, r3
 8005282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005286:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8005448 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800528a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	ee07 3a90 	vmov	s15, r3
 8005294:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005298:	ed97 6a04 	vldr	s12, [r7, #16]
 800529c:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8005440 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80052a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052b4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80052b8:	e02a      	b.n	8005310 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80052ba:	4b5f      	ldr	r3, [pc, #380]	@ (8005438 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	08db      	lsrs	r3, r3, #3
 80052c0:	f003 0303 	and.w	r3, r3, #3
 80052c4:	4a5d      	ldr	r2, [pc, #372]	@ (800543c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80052c6:	fa22 f303 	lsr.w	r3, r2, r3
 80052ca:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	ee07 3a90 	vmov	s15, r3
 80052d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	ee07 3a90 	vmov	s15, r3
 80052dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	ee07 3a90 	vmov	s15, r3
 80052ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ee:	ed97 6a04 	vldr	s12, [r7, #16]
 80052f2:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005440 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80052f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800530a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800530e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005310:	4b49      	ldr	r3, [pc, #292]	@ (8005438 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005318:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800531c:	d121      	bne.n	8005362 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800531e:	4b46      	ldr	r3, [pc, #280]	@ (8005438 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005322:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d017      	beq.n	800535a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800532a:	4b43      	ldr	r3, [pc, #268]	@ (8005438 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800532c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800532e:	0a5b      	lsrs	r3, r3, #9
 8005330:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005334:	ee07 3a90 	vmov	s15, r3
 8005338:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800533c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005340:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005344:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005348:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800534c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005350:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	601a      	str	r2, [r3, #0]
 8005358:	e006      	b.n	8005368 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	e002      	b.n	8005368 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005368:	4b33      	ldr	r3, [pc, #204]	@ (8005438 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005370:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005374:	d121      	bne.n	80053ba <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005376:	4b30      	ldr	r3, [pc, #192]	@ (8005438 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800537a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d017      	beq.n	80053b2 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005382:	4b2d      	ldr	r3, [pc, #180]	@ (8005438 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005386:	0c1b      	lsrs	r3, r3, #16
 8005388:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800538c:	ee07 3a90 	vmov	s15, r3
 8005390:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005394:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005398:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800539c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80053a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053a8:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	605a      	str	r2, [r3, #4]
 80053b0:	e006      	b.n	80053c0 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	605a      	str	r2, [r3, #4]
 80053b8:	e002      	b.n	80053c0 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80053c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005438 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053cc:	d121      	bne.n	8005412 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80053ce:	4b1a      	ldr	r3, [pc, #104]	@ (8005438 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80053d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d017      	beq.n	800540a <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80053da:	4b17      	ldr	r3, [pc, #92]	@ (8005438 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80053dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053de:	0e1b      	lsrs	r3, r3, #24
 80053e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053e4:	ee07 3a90 	vmov	s15, r3
 80053e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80053ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80053f0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80053f4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80053f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005400:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005408:	e010      	b.n	800542c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	609a      	str	r2, [r3, #8]
}
 8005410:	e00c      	b.n	800542c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	609a      	str	r2, [r3, #8]
}
 8005418:	e008      	b.n	800542c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	609a      	str	r2, [r3, #8]
}
 800542c:	bf00      	nop
 800542e:	372c      	adds	r7, #44	@ 0x2c
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	44020c00 	.word	0x44020c00
 800543c:	03d09000 	.word	0x03d09000
 8005440:	46000000 	.word	0x46000000
 8005444:	4a742400 	.word	0x4a742400
 8005448:	4bbebc20 	.word	0x4bbebc20

0800544c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 800544c:	b480      	push	{r7}
 800544e:	b08b      	sub	sp, #44	@ 0x2c
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005454:	4bad      	ldr	r3, [pc, #692]	@ (800570c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800545c:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800545e:	4bab      	ldr	r3, [pc, #684]	@ (800570c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005462:	f003 0303 	and.w	r3, r3, #3
 8005466:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8005468:	4ba8      	ldr	r3, [pc, #672]	@ (800570c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800546a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546c:	0a1b      	lsrs	r3, r3, #8
 800546e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005472:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8005474:	4ba5      	ldr	r3, [pc, #660]	@ (800570c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005478:	f003 0310 	and.w	r3, r3, #16
 800547c:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800547e:	4ba3      	ldr	r3, [pc, #652]	@ (800570c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005482:	08db      	lsrs	r3, r3, #3
 8005484:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	fb02 f303 	mul.w	r3, r2, r3
 800548e:	ee07 3a90 	vmov	s15, r3
 8005492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005496:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	2b00      	cmp	r3, #0
 800549e:	f000 8126 	beq.w	80056ee <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	2b03      	cmp	r3, #3
 80054a6:	d053      	beq.n	8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	2b03      	cmp	r3, #3
 80054ac:	d86f      	bhi.n	800558e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d003      	beq.n	80054bc <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d02b      	beq.n	8005512 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 80054ba:	e068      	b.n	800558e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80054bc:	4b93      	ldr	r3, [pc, #588]	@ (800570c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	08db      	lsrs	r3, r3, #3
 80054c2:	f003 0303 	and.w	r3, r3, #3
 80054c6:	4a92      	ldr	r2, [pc, #584]	@ (8005710 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80054c8:	fa22 f303 	lsr.w	r3, r2, r3
 80054cc:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	ee07 3a90 	vmov	s15, r3
 80054d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	ee07 3a90 	vmov	s15, r3
 80054de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	ee07 3a90 	vmov	s15, r3
 80054ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054f0:	ed97 6a04 	vldr	s12, [r7, #16]
 80054f4:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8005714 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80054f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005500:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005504:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800550c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8005510:	e068      	b.n	80055e4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	ee07 3a90 	vmov	s15, r3
 8005518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800551c:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8005718 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005520:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	ee07 3a90 	vmov	s15, r3
 800552a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800552e:	ed97 6a04 	vldr	s12, [r7, #16]
 8005532:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005714 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800553a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800553e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800554a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800554e:	e049      	b.n	80055e4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	ee07 3a90 	vmov	s15, r3
 8005556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800555a:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800571c <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800555e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	ee07 3a90 	vmov	s15, r3
 8005568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800556c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005570:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8005714 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005574:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005578:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800557c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005580:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005588:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800558c:	e02a      	b.n	80055e4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800558e:	4b5f      	ldr	r3, [pc, #380]	@ (800570c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	08db      	lsrs	r3, r3, #3
 8005594:	f003 0303 	and.w	r3, r3, #3
 8005598:	4a5d      	ldr	r2, [pc, #372]	@ (8005710 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800559a:	fa22 f303 	lsr.w	r3, r2, r3
 800559e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	ee07 3a90 	vmov	s15, r3
 80055a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	ee07 3a90 	vmov	s15, r3
 80055b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	ee07 3a90 	vmov	s15, r3
 80055be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055c2:	ed97 6a04 	vldr	s12, [r7, #16]
 80055c6:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8005714 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80055ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055de:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80055e2:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055e4:	4b49      	ldr	r3, [pc, #292]	@ (800570c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055f0:	d121      	bne.n	8005636 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80055f2:	4b46      	ldr	r3, [pc, #280]	@ (800570c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80055f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d017      	beq.n	800562e <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80055fe:	4b43      	ldr	r3, [pc, #268]	@ (800570c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005602:	0a5b      	lsrs	r3, r3, #9
 8005604:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005608:	ee07 3a90 	vmov	s15, r3
 800560c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8005610:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005614:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005618:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800561c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005620:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005624:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	601a      	str	r2, [r3, #0]
 800562c:	e006      	b.n	800563c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	e002      	b.n	800563c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800563c:	4b33      	ldr	r3, [pc, #204]	@ (800570c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005644:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005648:	d121      	bne.n	800568e <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800564a:	4b30      	ldr	r3, [pc, #192]	@ (800570c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800564c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d017      	beq.n	8005686 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005656:	4b2d      	ldr	r3, [pc, #180]	@ (800570c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800565a:	0c1b      	lsrs	r3, r3, #16
 800565c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005660:	ee07 3a90 	vmov	s15, r3
 8005664:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005668:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800566c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005670:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800567c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	605a      	str	r2, [r3, #4]
 8005684:	e006      	b.n	8005694 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	605a      	str	r2, [r3, #4]
 800568c:	e002      	b.n	8005694 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005694:	4b1d      	ldr	r3, [pc, #116]	@ (800570c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800569c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056a0:	d121      	bne.n	80056e6 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80056a2:	4b1a      	ldr	r3, [pc, #104]	@ (800570c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80056a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d017      	beq.n	80056de <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80056ae:	4b17      	ldr	r3, [pc, #92]	@ (800570c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80056b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056b2:	0e1b      	lsrs	r3, r3, #24
 80056b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056b8:	ee07 3a90 	vmov	s15, r3
 80056bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80056c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80056c4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80056c8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80056cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056d4:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80056dc:	e010      	b.n	8005700 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	609a      	str	r2, [r3, #8]
}
 80056e4:	e00c      	b.n	8005700 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	609a      	str	r2, [r3, #8]
}
 80056ec:	e008      	b.n	8005700 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	609a      	str	r2, [r3, #8]
}
 8005700:	bf00      	nop
 8005702:	372c      	adds	r7, #44	@ 0x2c
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr
 800570c:	44020c00 	.word	0x44020c00
 8005710:	03d09000 	.word	0x03d09000
 8005714:	46000000 	.word	0x46000000
 8005718:	4a742400 	.word	0x4a742400
 800571c:	4bbebc20 	.word	0x4bbebc20

08005720 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8005720:	b480      	push	{r7}
 8005722:	b08b      	sub	sp, #44	@ 0x2c
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005728:	4bad      	ldr	r3, [pc, #692]	@ (80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800572a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800572c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005730:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005732:	4bab      	ldr	r3, [pc, #684]	@ (80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 800573c:	4ba8      	ldr	r3, [pc, #672]	@ (80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800573e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005740:	0a1b      	lsrs	r3, r3, #8
 8005742:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005746:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8005748:	4ba5      	ldr	r3, [pc, #660]	@ (80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800574a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800574c:	f003 0310 	and.w	r3, r3, #16
 8005750:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005752:	4ba3      	ldr	r3, [pc, #652]	@ (80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005754:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005756:	08db      	lsrs	r3, r3, #3
 8005758:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	fb02 f303 	mul.w	r3, r2, r3
 8005762:	ee07 3a90 	vmov	s15, r3
 8005766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800576a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 8126 	beq.w	80059c2 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	2b03      	cmp	r3, #3
 800577a:	d053      	beq.n	8005824 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	2b03      	cmp	r3, #3
 8005780:	d86f      	bhi.n	8005862 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d003      	beq.n	8005790 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	2b02      	cmp	r3, #2
 800578c:	d02b      	beq.n	80057e6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 800578e:	e068      	b.n	8005862 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005790:	4b93      	ldr	r3, [pc, #588]	@ (80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	08db      	lsrs	r3, r3, #3
 8005796:	f003 0303 	and.w	r3, r3, #3
 800579a:	4a92      	ldr	r2, [pc, #584]	@ (80059e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800579c:	fa22 f303 	lsr.w	r3, r2, r3
 80057a0:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	ee07 3a90 	vmov	s15, r3
 80057a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	ee07 3a90 	vmov	s15, r3
 80057b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	ee07 3a90 	vmov	s15, r3
 80057c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057c4:	ed97 6a04 	vldr	s12, [r7, #16]
 80057c8:	eddf 5a87 	vldr	s11, [pc, #540]	@ 80059e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80057cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057e0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80057e4:	e068      	b.n	80058b8 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	ee07 3a90 	vmov	s15, r3
 80057ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057f0:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 80059ec <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80057f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	ee07 3a90 	vmov	s15, r3
 80057fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005802:	ed97 6a04 	vldr	s12, [r7, #16]
 8005806:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80059e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800580a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800580e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005812:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800581a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800581e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005822:	e049      	b.n	80058b8 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	ee07 3a90 	vmov	s15, r3
 800582a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800582e:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80059f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8005832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	ee07 3a90 	vmov	s15, r3
 800583c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005840:	ed97 6a04 	vldr	s12, [r7, #16]
 8005844:	eddf 5a68 	vldr	s11, [pc, #416]	@ 80059e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005848:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800584c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005850:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005854:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005858:	ee67 7a27 	vmul.f32	s15, s14, s15
 800585c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8005860:	e02a      	b.n	80058b8 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005862:	4b5f      	ldr	r3, [pc, #380]	@ (80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	08db      	lsrs	r3, r3, #3
 8005868:	f003 0303 	and.w	r3, r3, #3
 800586c:	4a5d      	ldr	r2, [pc, #372]	@ (80059e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800586e:	fa22 f303 	lsr.w	r3, r2, r3
 8005872:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	ee07 3a90 	vmov	s15, r3
 800587a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	ee07 3a90 	vmov	s15, r3
 8005884:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005888:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	ee07 3a90 	vmov	s15, r3
 8005892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005896:	ed97 6a04 	vldr	s12, [r7, #16]
 800589a:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80059e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800589e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058b2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80058b6:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80058b8:	4b49      	ldr	r3, [pc, #292]	@ (80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058c4:	d121      	bne.n	800590a <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80058c6:	4b46      	ldr	r3, [pc, #280]	@ (80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80058c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d017      	beq.n	8005902 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80058d2:	4b43      	ldr	r3, [pc, #268]	@ (80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80058d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058d6:	0a5b      	lsrs	r3, r3, #9
 80058d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058dc:	ee07 3a90 	vmov	s15, r3
 80058e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80058e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058e8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80058ec:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80058f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058f8:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	e006      	b.n	8005910 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	601a      	str	r2, [r3, #0]
 8005908:	e002      	b.n	8005910 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005910:	4b33      	ldr	r3, [pc, #204]	@ (80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005918:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800591c:	d121      	bne.n	8005962 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800591e:	4b30      	ldr	r3, [pc, #192]	@ (80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d017      	beq.n	800595a <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800592a:	4b2d      	ldr	r3, [pc, #180]	@ (80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800592c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800592e:	0c1b      	lsrs	r3, r3, #16
 8005930:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005934:	ee07 3a90 	vmov	s15, r3
 8005938:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800593c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005940:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005944:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8005948:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800594c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005950:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	605a      	str	r2, [r3, #4]
 8005958:	e006      	b.n	8005968 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	605a      	str	r2, [r3, #4]
 8005960:	e002      	b.n	8005968 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005968:	4b1d      	ldr	r3, [pc, #116]	@ (80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005970:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005974:	d121      	bne.n	80059ba <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005976:	4b1a      	ldr	r3, [pc, #104]	@ (80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800597a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d017      	beq.n	80059b2 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005982:	4b17      	ldr	r3, [pc, #92]	@ (80059e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005986:	0e1b      	lsrs	r3, r3, #24
 8005988:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800598c:	ee07 3a90 	vmov	s15, r3
 8005990:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8005994:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005998:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800599c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80059a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059a8:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80059b0:	e010      	b.n	80059d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	609a      	str	r2, [r3, #8]
}
 80059b8:	e00c      	b.n	80059d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	609a      	str	r2, [r3, #8]
}
 80059c0:	e008      	b.n	80059d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	609a      	str	r2, [r3, #8]
}
 80059d4:	bf00      	nop
 80059d6:	372c      	adds	r7, #44	@ 0x2c
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	44020c00 	.word	0x44020c00
 80059e4:	03d09000 	.word	0x03d09000
 80059e8:	46000000 	.word	0x46000000
 80059ec:	4a742400 	.word	0x4a742400
 80059f0:	4bbebc20 	.word	0x4bbebc20

080059f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80059f4:	b590      	push	{r4, r7, lr}
 80059f6:	b08f      	sub	sp, #60	@ 0x3c
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80059fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a02:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8005a06:	4321      	orrs	r1, r4
 8005a08:	d150      	bne.n	8005aac <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005a0a:	4b26      	ldr	r3, [pc, #152]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a14:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005a16:	4b23      	ldr	r3, [pc, #140]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a1c:	f003 0302 	and.w	r3, r3, #2
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d108      	bne.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a2a:	d104      	bne.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005a2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a30:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a32:	f002 baf6 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005a36:	4b1b      	ldr	r3, [pc, #108]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a44:	d108      	bne.n	8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8005a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a4c:	d104      	bne.n	8005a58 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8005a4e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005a52:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a54:	f002 bae5 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8005a58:	4b12      	ldr	r3, [pc, #72]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a64:	d119      	bne.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8005a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a6c:	d115      	bne.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8005a76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a7a:	d30a      	bcc.n	8005a92 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8005a7c:	4b09      	ldr	r3, [pc, #36]	@ (8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005a7e:	69db      	ldr	r3, [r3, #28]
 8005a80:	0a1b      	lsrs	r3, r3, #8
 8005a82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a86:	4a08      	ldr	r2, [pc, #32]	@ (8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a8c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005a8e:	f002 bac8 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
      }
      else
      {
        frequency = 0U;
 8005a92:	2300      	movs	r3, #0
 8005a94:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005a96:	f002 bac4 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a9e:	f002 bac0 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8005aa2:	bf00      	nop
 8005aa4:	44020c00 	.word	0x44020c00
 8005aa8:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8005aac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ab0:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8005ab4:	ea50 0104 	orrs.w	r1, r0, r4
 8005ab8:	f001 8242 	beq.w	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x154c>
 8005abc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ac0:	2801      	cmp	r0, #1
 8005ac2:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8005ac6:	f082 82a9 	bcs.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005aca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ace:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8005ad2:	ea50 0104 	orrs.w	r1, r0, r4
 8005ad6:	f001 8139 	beq.w	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
 8005ada:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ade:	2801      	cmp	r0, #1
 8005ae0:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8005ae4:	f082 829a 	bcs.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005ae8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005aec:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8005af0:	ea50 0104 	orrs.w	r1, r0, r4
 8005af4:	f001 85ce 	beq.w	8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca0>
 8005af8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005afc:	2801      	cmp	r0, #1
 8005afe:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8005b02:	f082 828b 	bcs.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005b06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b0a:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 8005b0e:	ea50 0104 	orrs.w	r1, r0, r4
 8005b12:	f001 8518 	beq.w	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x1b52>
 8005b16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b1a:	2801      	cmp	r0, #1
 8005b1c:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8005b20:	f082 827c 	bcs.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005b24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b28:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8005b2c:	ea50 0104 	orrs.w	r1, r0, r4
 8005b30:	f001 846a 	beq.w	8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x1a14>
 8005b34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b38:	2801      	cmp	r0, #1
 8005b3a:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8005b3e:	f082 826d 	bcs.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005b42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b46:	f1a1 0420 	sub.w	r4, r1, #32
 8005b4a:	ea50 0104 	orrs.w	r1, r0, r4
 8005b4e:	f001 83b4 	beq.w	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x18c6>
 8005b52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b56:	2801      	cmp	r0, #1
 8005b58:	f171 0120 	sbcs.w	r1, r1, #32
 8005b5c:	f082 825e 	bcs.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005b60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b64:	f1a1 0410 	sub.w	r4, r1, #16
 8005b68:	ea50 0104 	orrs.w	r1, r0, r4
 8005b6c:	f002 8222 	beq.w	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x25c0>
 8005b70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b74:	2801      	cmp	r0, #1
 8005b76:	f171 0110 	sbcs.w	r1, r1, #16
 8005b7a:	f082 824f 	bcs.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005b7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b82:	f1a1 0408 	sub.w	r4, r1, #8
 8005b86:	ea50 0104 	orrs.w	r1, r0, r4
 8005b8a:	f002 8198 	beq.w	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0x24ca>
 8005b8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b92:	2801      	cmp	r0, #1
 8005b94:	f171 0108 	sbcs.w	r1, r1, #8
 8005b98:	f082 8240 	bcs.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005b9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ba0:	1f0c      	subs	r4, r1, #4
 8005ba2:	ea50 0104 	orrs.w	r1, r0, r4
 8005ba6:	f001 8614 	beq.w	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1dde>
 8005baa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bae:	2801      	cmp	r0, #1
 8005bb0:	f171 0104 	sbcs.w	r1, r1, #4
 8005bb4:	f082 8232 	bcs.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005bb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bbc:	1e8c      	subs	r4, r1, #2
 8005bbe:	ea50 0104 	orrs.w	r1, r0, r4
 8005bc2:	f002 810f 	beq.w	8007de4 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8005bc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bca:	2801      	cmp	r0, #1
 8005bcc:	f171 0102 	sbcs.w	r1, r1, #2
 8005bd0:	f082 8224 	bcs.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005bd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bd8:	1e4c      	subs	r4, r1, #1
 8005bda:	ea50 0104 	orrs.w	r1, r0, r4
 8005bde:	f002 809a 	beq.w	8007d16 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8005be2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005be6:	2801      	cmp	r0, #1
 8005be8:	f171 0101 	sbcs.w	r1, r1, #1
 8005bec:	f082 8216 	bcs.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005bf0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bf4:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8005bf8:	4321      	orrs	r1, r4
 8005bfa:	f002 8025 	beq.w	8007c48 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8005bfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c02:	4cd6      	ldr	r4, [pc, #856]	@ (8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x568>)
 8005c04:	42a0      	cmp	r0, r4
 8005c06:	f171 0100 	sbcs.w	r1, r1, #0
 8005c0a:	f082 8207 	bcs.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005c0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c12:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8005c16:	4321      	orrs	r1, r4
 8005c18:	f001 87a5 	beq.w	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0x2172>
 8005c1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c20:	4ccf      	ldr	r4, [pc, #828]	@ (8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8005c22:	42a0      	cmp	r0, r4
 8005c24:	f171 0100 	sbcs.w	r1, r1, #0
 8005c28:	f082 81f8 	bcs.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005c2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c30:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8005c34:	4321      	orrs	r1, r4
 8005c36:	f001 871d 	beq.w	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x2080>
 8005c3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c3e:	4cc9      	ldr	r4, [pc, #804]	@ (8005f64 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005c40:	42a0      	cmp	r0, r4
 8005c42:	f171 0100 	sbcs.w	r1, r1, #0
 8005c46:	f082 81e9 	bcs.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005c4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c4e:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8005c52:	4321      	orrs	r1, r4
 8005c54:	f001 8666 	beq.w	8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x1f30>
 8005c58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c5c:	4cc2      	ldr	r4, [pc, #776]	@ (8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005c5e:	42a0      	cmp	r0, r4
 8005c60:	f171 0100 	sbcs.w	r1, r1, #0
 8005c64:	f082 81da 	bcs.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005c68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c6c:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8005c70:	4321      	orrs	r1, r4
 8005c72:	f001 85de 	beq.w	8007832 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3e>
 8005c76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c7a:	4cbc      	ldr	r4, [pc, #752]	@ (8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005c7c:	42a0      	cmp	r0, r4
 8005c7e:	f171 0100 	sbcs.w	r1, r1, #0
 8005c82:	f082 81cb 	bcs.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005c86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c8a:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8005c8e:	4321      	orrs	r1, r4
 8005c90:	f002 814a 	beq.w	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x2534>
 8005c94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c98:	4cb5      	ldr	r4, [pc, #724]	@ (8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005c9a:	42a0      	cmp	r0, r4
 8005c9c:	f171 0100 	sbcs.w	r1, r1, #0
 8005ca0:	f082 81bc 	bcs.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005ca4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ca8:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8005cac:	4321      	orrs	r1, r4
 8005cae:	f000 826b 	beq.w	8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8005cb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cb6:	4caf      	ldr	r4, [pc, #700]	@ (8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8005cb8:	42a0      	cmp	r0, r4
 8005cba:	f171 0100 	sbcs.w	r1, r1, #0
 8005cbe:	f082 81ad 	bcs.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005cc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cc6:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8005cca:	4321      	orrs	r1, r4
 8005ccc:	f000 87e9 	beq.w	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ae>
 8005cd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cd4:	4ca8      	ldr	r4, [pc, #672]	@ (8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8005cd6:	42a0      	cmp	r0, r4
 8005cd8:	f171 0100 	sbcs.w	r1, r1, #0
 8005cdc:	f082 819e 	bcs.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005ce0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ce4:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8005ce8:	4321      	orrs	r1, r4
 8005cea:	f000 81ce 	beq.w	800608a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8005cee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cf2:	4ca2      	ldr	r4, [pc, #648]	@ (8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005cf4:	42a0      	cmp	r0, r4
 8005cf6:	f171 0100 	sbcs.w	r1, r1, #0
 8005cfa:	f082 818f 	bcs.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005cfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d02:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8005d06:	4321      	orrs	r1, r4
 8005d08:	f000 8140 	beq.w	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8005d0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d10:	4c9b      	ldr	r4, [pc, #620]	@ (8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005d12:	42a0      	cmp	r0, r4
 8005d14:	f171 0100 	sbcs.w	r1, r1, #0
 8005d18:	f082 8180 	bcs.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005d1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d20:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8005d24:	4321      	orrs	r1, r4
 8005d26:	f001 8229 	beq.w	800717c <HAL_RCCEx_GetPeriphCLKFreq+0x1788>
 8005d2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d2e:	4c95      	ldr	r4, [pc, #596]	@ (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005d30:	42a0      	cmp	r0, r4
 8005d32:	f171 0100 	sbcs.w	r1, r1, #0
 8005d36:	f082 8171 	bcs.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005d3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d3e:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8005d42:	4321      	orrs	r1, r4
 8005d44:	f001 8173 	beq.w	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x163a>
 8005d48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d4c:	4c8e      	ldr	r4, [pc, #568]	@ (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005d4e:	42a0      	cmp	r0, r4
 8005d50:	f171 0100 	sbcs.w	r1, r1, #0
 8005d54:	f082 8162 	bcs.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005d58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d5c:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8005d60:	4321      	orrs	r1, r4
 8005d62:	f001 8130 	beq.w	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x15d2>
 8005d66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d6a:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8005d6e:	f171 0100 	sbcs.w	r1, r1, #0
 8005d72:	f082 8153 	bcs.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005d76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d7a:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8005d7e:	4321      	orrs	r1, r4
 8005d80:	f001 8093 	beq.w	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x14b6>
 8005d84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d88:	f248 0401 	movw	r4, #32769	@ 0x8001
 8005d8c:	42a0      	cmp	r0, r4
 8005d8e:	f171 0100 	sbcs.w	r1, r1, #0
 8005d92:	f082 8143 	bcs.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005d96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d9a:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8005d9e:	4321      	orrs	r1, r4
 8005da0:	f001 8040 	beq.w	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x1430>
 8005da4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005da8:	f244 0401 	movw	r4, #16385	@ 0x4001
 8005dac:	42a0      	cmp	r0, r4
 8005dae:	f171 0100 	sbcs.w	r1, r1, #0
 8005db2:	f082 8133 	bcs.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005db6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dba:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8005dbe:	4321      	orrs	r1, r4
 8005dc0:	f000 87ed 	beq.w	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x13aa>
 8005dc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dc8:	f242 0401 	movw	r4, #8193	@ 0x2001
 8005dcc:	42a0      	cmp	r0, r4
 8005dce:	f171 0100 	sbcs.w	r1, r1, #0
 8005dd2:	f082 8123 	bcs.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005dd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dda:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8005dde:	4321      	orrs	r1, r4
 8005de0:	f000 86f9 	beq.w	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8005de4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005de8:	f241 0401 	movw	r4, #4097	@ 0x1001
 8005dec:	42a0      	cmp	r0, r4
 8005dee:	f171 0100 	sbcs.w	r1, r1, #0
 8005df2:	f082 8113 	bcs.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005df6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dfa:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8005dfe:	4321      	orrs	r1, r4
 8005e00:	f000 8683 	beq.w	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8005e04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e08:	f640 0401 	movw	r4, #2049	@ 0x801
 8005e0c:	42a0      	cmp	r0, r4
 8005e0e:	f171 0100 	sbcs.w	r1, r1, #0
 8005e12:	f082 8103 	bcs.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005e16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e1a:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8005e1e:	4321      	orrs	r1, r4
 8005e20:	f000 860d 	beq.w	8006a3e <HAL_RCCEx_GetPeriphCLKFreq+0x104a>
 8005e24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e28:	f240 4401 	movw	r4, #1025	@ 0x401
 8005e2c:	42a0      	cmp	r0, r4
 8005e2e:	f171 0100 	sbcs.w	r1, r1, #0
 8005e32:	f082 80f3 	bcs.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005e36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e3a:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8005e3e:	4321      	orrs	r1, r4
 8005e40:	f000 858b 	beq.w	800695a <HAL_RCCEx_GetPeriphCLKFreq+0xf66>
 8005e44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e48:	f240 2401 	movw	r4, #513	@ 0x201
 8005e4c:	42a0      	cmp	r0, r4
 8005e4e:	f171 0100 	sbcs.w	r1, r1, #0
 8005e52:	f082 80e3 	bcs.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005e56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e5a:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8005e5e:	4321      	orrs	r1, r4
 8005e60:	f000 8510 	beq.w	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 8005e64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e68:	f240 1401 	movw	r4, #257	@ 0x101
 8005e6c:	42a0      	cmp	r0, r4
 8005e6e:	f171 0100 	sbcs.w	r1, r1, #0
 8005e72:	f082 80d3 	bcs.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005e76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e7a:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8005e7e:	4321      	orrs	r1, r4
 8005e80:	f000 8495 	beq.w	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8005e84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e88:	2881      	cmp	r0, #129	@ 0x81
 8005e8a:	f171 0100 	sbcs.w	r1, r1, #0
 8005e8e:	f082 80c5 	bcs.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005e92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e96:	2821      	cmp	r0, #33	@ 0x21
 8005e98:	f171 0100 	sbcs.w	r1, r1, #0
 8005e9c:	d254      	bcs.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8005e9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ea2:	4301      	orrs	r1, r0
 8005ea4:	f002 80ba 	beq.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005ea8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005eac:	1e42      	subs	r2, r0, #1
 8005eae:	f141 33ff 	adc.w	r3, r1, #4294967295
 8005eb2:	2a20      	cmp	r2, #32
 8005eb4:	f173 0100 	sbcs.w	r1, r3, #0
 8005eb8:	f082 80b0 	bcs.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005ebc:	2a1f      	cmp	r2, #31
 8005ebe:	f202 80ad 	bhi.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005ec2:	a101      	add	r1, pc, #4	@ (adr r1, 8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>)
 8005ec4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005ec8:	080061cd 	.word	0x080061cd
 8005ecc:	080062ad 	.word	0x080062ad
 8005ed0:	0800801d 	.word	0x0800801d
 8005ed4:	0800636d 	.word	0x0800636d
 8005ed8:	0800801d 	.word	0x0800801d
 8005edc:	0800801d 	.word	0x0800801d
 8005ee0:	0800801d 	.word	0x0800801d
 8005ee4:	0800643d 	.word	0x0800643d
 8005ee8:	0800801d 	.word	0x0800801d
 8005eec:	0800801d 	.word	0x0800801d
 8005ef0:	0800801d 	.word	0x0800801d
 8005ef4:	0800801d 	.word	0x0800801d
 8005ef8:	0800801d 	.word	0x0800801d
 8005efc:	0800801d 	.word	0x0800801d
 8005f00:	0800801d 	.word	0x0800801d
 8005f04:	0800651f 	.word	0x0800651f
 8005f08:	0800801d 	.word	0x0800801d
 8005f0c:	0800801d 	.word	0x0800801d
 8005f10:	0800801d 	.word	0x0800801d
 8005f14:	0800801d 	.word	0x0800801d
 8005f18:	0800801d 	.word	0x0800801d
 8005f1c:	0800801d 	.word	0x0800801d
 8005f20:	0800801d 	.word	0x0800801d
 8005f24:	0800801d 	.word	0x0800801d
 8005f28:	0800801d 	.word	0x0800801d
 8005f2c:	0800801d 	.word	0x0800801d
 8005f30:	0800801d 	.word	0x0800801d
 8005f34:	0800801d 	.word	0x0800801d
 8005f38:	0800801d 	.word	0x0800801d
 8005f3c:	0800801d 	.word	0x0800801d
 8005f40:	0800801d 	.word	0x0800801d
 8005f44:	080065f5 	.word	0x080065f5
 8005f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f4c:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8005f50:	430b      	orrs	r3, r1
 8005f52:	f000 83ba 	beq.w	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0xcd6>
 8005f56:	f002 b861 	b.w	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005f5a:	bf00      	nop
 8005f5c:	80000001 	.word	0x80000001
 8005f60:	40000001 	.word	0x40000001
 8005f64:	20000001 	.word	0x20000001
 8005f68:	10000001 	.word	0x10000001
 8005f6c:	08000001 	.word	0x08000001
 8005f70:	04000001 	.word	0x04000001
 8005f74:	00400001 	.word	0x00400001
 8005f78:	00200001 	.word	0x00200001
 8005f7c:	00100001 	.word	0x00100001
 8005f80:	00080001 	.word	0x00080001
 8005f84:	00040001 	.word	0x00040001
 8005f88:	00020001 	.word	0x00020001
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005f8c:	4b9f      	ldr	r3, [pc, #636]	@ (800620c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005f8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f92:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005f96:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f9a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f9e:	d036      	beq.n	800600e <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 8005fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005fa6:	d86b      	bhi.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005faa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005fae:	d02b      	beq.n	8006008 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005fb6:	d863      	bhi.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005fbe:	d01b      	beq.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 8005fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005fc6:	d85b      	bhi.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8005fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d004      	beq.n	8005fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8005fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fd4:	d008      	beq.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f4>
 8005fd6:	e053      	b.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005fd8:	f107 0320 	add.w	r3, r7, #32
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7ff f8cb 	bl	8005178 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005fe6:	e04e      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fe8:	f107 0314 	add.w	r3, r7, #20
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7ff fa2d 	bl	800544c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8005ff6:	e046      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ff8:	f107 0308 	add.w	r3, r7, #8
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7ff fb8f 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006006:	e03e      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006008:	4b81      	ldr	r3, [pc, #516]	@ (8006210 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800600a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800600c:	e03b      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800600e:	4b7f      	ldr	r3, [pc, #508]	@ (800620c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006010:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006014:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006018:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800601a:	4b7c      	ldr	r3, [pc, #496]	@ (800620c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0302 	and.w	r3, r3, #2
 8006022:	2b02      	cmp	r3, #2
 8006024:	d10c      	bne.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006028:	2b00      	cmp	r3, #0
 800602a:	d109      	bne.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800602c:	4b77      	ldr	r3, [pc, #476]	@ (800620c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	08db      	lsrs	r3, r3, #3
 8006032:	f003 0303 	and.w	r3, r3, #3
 8006036:	4a77      	ldr	r2, [pc, #476]	@ (8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006038:	fa22 f303 	lsr.w	r3, r2, r3
 800603c:	637b      	str	r3, [r7, #52]	@ 0x34
 800603e:	e01e      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006040:	4b72      	ldr	r3, [pc, #456]	@ (800620c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006048:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800604c:	d106      	bne.n	800605c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 800604e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006050:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006054:	d102      	bne.n	800605c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006056:	4b70      	ldr	r3, [pc, #448]	@ (8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006058:	637b      	str	r3, [r7, #52]	@ 0x34
 800605a:	e010      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800605c:	4b6b      	ldr	r3, [pc, #428]	@ (800620c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006064:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006068:	d106      	bne.n	8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800606a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800606c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006070:	d102      	bne.n	8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006072:	4b6a      	ldr	r3, [pc, #424]	@ (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006074:	637b      	str	r3, [r7, #52]	@ 0x34
 8006076:	e002      	b.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800607c:	e003      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800607e:	e002      	b.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
          }
          default :
          {
            frequency = 0U;
 8006080:	2300      	movs	r3, #0
 8006082:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006084:	bf00      	nop
          }
        }
        break;
 8006086:	f001 bfcc 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800608a:	4b60      	ldr	r3, [pc, #384]	@ (800620c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800608c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006090:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8006094:	633b      	str	r3, [r7, #48]	@ 0x30
 8006096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006098:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800609c:	d036      	beq.n	800610c <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800609e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060a4:	d86b      	bhi.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 80060a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80060ac:	d02b      	beq.n	8006106 <HAL_RCCEx_GetPeriphCLKFreq+0x712>
 80060ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80060b4:	d863      	bhi.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 80060b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060bc:	d01b      	beq.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 80060be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060c4:	d85b      	bhi.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 80060c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d004      	beq.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 80060cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ce:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80060d2:	d008      	beq.n	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6f2>
 80060d4:	e053      	b.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0x78a>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060d6:	f107 0320 	add.w	r3, r7, #32
 80060da:	4618      	mov	r0, r3
 80060dc:	f7ff f84c 	bl	8005178 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80060e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80060e4:	e04e      	b.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060e6:	f107 0314 	add.w	r3, r7, #20
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7ff f9ae 	bl	800544c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80060f4:	e046      	b.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060f6:	f107 0308 	add.w	r3, r7, #8
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7ff fb10 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006104:	e03e      	b.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006106:	4b42      	ldr	r3, [pc, #264]	@ (8006210 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8006108:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800610a:	e03b      	b.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800610c:	4b3f      	ldr	r3, [pc, #252]	@ (800620c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800610e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006112:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8006116:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006118:	4b3c      	ldr	r3, [pc, #240]	@ (800620c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0302 	and.w	r3, r3, #2
 8006120:	2b02      	cmp	r3, #2
 8006122:	d10c      	bne.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8006124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006126:	2b00      	cmp	r3, #0
 8006128:	d109      	bne.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800612a:	4b38      	ldr	r3, [pc, #224]	@ (800620c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	08db      	lsrs	r3, r3, #3
 8006130:	f003 0303 	and.w	r3, r3, #3
 8006134:	4a37      	ldr	r2, [pc, #220]	@ (8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006136:	fa22 f303 	lsr.w	r3, r2, r3
 800613a:	637b      	str	r3, [r7, #52]	@ 0x34
 800613c:	e01e      	b.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800613e:	4b33      	ldr	r3, [pc, #204]	@ (800620c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006146:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800614a:	d106      	bne.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x766>
 800614c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800614e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006152:	d102      	bne.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x766>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006154:	4b30      	ldr	r3, [pc, #192]	@ (8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006156:	637b      	str	r3, [r7, #52]	@ 0x34
 8006158:	e010      	b.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800615a:	4b2c      	ldr	r3, [pc, #176]	@ (800620c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006162:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006166:	d106      	bne.n	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800616a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800616e:	d102      	bne.n	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006170:	4b2a      	ldr	r3, [pc, #168]	@ (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006172:	637b      	str	r3, [r7, #52]	@ 0x34
 8006174:	e002      	b.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800617a:	e003      	b.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
 800617c:	e002      	b.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
          }
          default :
          {
            frequency = 0U;
 800617e:	2300      	movs	r3, #0
 8006180:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8006182:	bf00      	nop
          }
        }
        break;
 8006184:	f001 bf4d 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8006188:	4b20      	ldr	r3, [pc, #128]	@ (800620c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800618a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800618e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006192:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8006194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006196:	2b00      	cmp	r3, #0
 8006198:	d108      	bne.n	80061ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800619a:	f107 0320 	add.w	r3, r7, #32
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fe ffea 	bl	8005178 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80061a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80061a8:	f001 bf3b 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 80061ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ae:	2b40      	cmp	r3, #64	@ 0x40
 80061b0:	d108      	bne.n	80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061b2:	f107 0314 	add.w	r3, r7, #20
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7ff f948 	bl	800544c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061c0:	f001 bf2f 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
          frequency = 0U;
 80061c4:	2300      	movs	r3, #0
 80061c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061c8:	f001 bf2b 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80061cc:	4b0f      	ldr	r3, [pc, #60]	@ (800620c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80061ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80061d2:	f003 0307 	and.w	r3, r3, #7
 80061d6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80061d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d104      	bne.n	80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80061de:	f7fd f859 	bl	8003294 <HAL_RCC_GetPCLK2Freq>
 80061e2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80061e4:	f001 bf1d 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80061e8:	4b08      	ldr	r3, [pc, #32]	@ (800620c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80061f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061f4:	d114      	bne.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 80061f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d111      	bne.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061fc:	f107 0314 	add.w	r3, r7, #20
 8006200:	4618      	mov	r0, r3
 8006202:	f7ff f923 	bl	800544c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	637b      	str	r3, [r7, #52]	@ 0x34
 800620a:	e04d      	b.n	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
 800620c:	44020c00 	.word	0x44020c00
 8006210:	00bb8000 	.word	0x00bb8000
 8006214:	03d09000 	.word	0x03d09000
 8006218:	003d0900 	.word	0x003d0900
 800621c:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8006220:	4ba0      	ldr	r3, [pc, #640]	@ (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006228:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800622c:	d10a      	bne.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 800622e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006230:	2b02      	cmp	r3, #2
 8006232:	d107      	bne.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x850>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006234:	f107 0308 	add.w	r3, r7, #8
 8006238:	4618      	mov	r0, r3
 800623a:	f7ff fa71 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	637b      	str	r3, [r7, #52]	@ 0x34
 8006242:	e031      	b.n	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006244:	4b97      	ldr	r3, [pc, #604]	@ (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0302 	and.w	r3, r3, #2
 800624c:	2b02      	cmp	r3, #2
 800624e:	d10c      	bne.n	800626a <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 8006250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006252:	2b03      	cmp	r3, #3
 8006254:	d109      	bne.n	800626a <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006256:	4b93      	ldr	r3, [pc, #588]	@ (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	08db      	lsrs	r3, r3, #3
 800625c:	f003 0303 	and.w	r3, r3, #3
 8006260:	4a91      	ldr	r2, [pc, #580]	@ (80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006262:	fa22 f303 	lsr.w	r3, r2, r3
 8006266:	637b      	str	r3, [r7, #52]	@ 0x34
 8006268:	e01e      	b.n	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800626a:	4b8e      	ldr	r3, [pc, #568]	@ (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006272:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006276:	d105      	bne.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
 8006278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800627a:	2b04      	cmp	r3, #4
 800627c:	d102      	bne.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          frequency = CSI_VALUE;
 800627e:	4b8b      	ldr	r3, [pc, #556]	@ (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006280:	637b      	str	r3, [r7, #52]	@ 0x34
 8006282:	e011      	b.n	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006284:	4b87      	ldr	r3, [pc, #540]	@ (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006286:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800628a:	f003 0302 	and.w	r3, r3, #2
 800628e:	2b02      	cmp	r3, #2
 8006290:	d106      	bne.n	80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8006292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006294:	2b05      	cmp	r3, #5
 8006296:	d103      	bne.n	80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
          frequency = LSE_VALUE;
 8006298:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800629c:	637b      	str	r3, [r7, #52]	@ 0x34
 800629e:	e003      	b.n	80062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
          frequency = 0U;
 80062a0:	2300      	movs	r3, #0
 80062a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80062a4:	f001 bebd 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80062a8:	f001 bebb 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80062ac:	4b7d      	ldr	r3, [pc, #500]	@ (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80062ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80062b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062b6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80062b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d104      	bne.n	80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80062be:	f7fc ffd3 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 80062c2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80062c4:	f001 bead 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80062c8:	4b76      	ldr	r3, [pc, #472]	@ (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80062d4:	d10a      	bne.n	80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 80062d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d8:	2b08      	cmp	r3, #8
 80062da:	d107      	bne.n	80062ec <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062dc:	f107 0314 	add.w	r3, r7, #20
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7ff f8b3 	bl	800544c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80062ea:	e03d      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 80062ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ee:	2b10      	cmp	r3, #16
 80062f0:	d108      	bne.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x910>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062f2:	f107 0308 	add.w	r3, r7, #8
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7ff fa12 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006300:	f001 be8f 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006304:	4b67      	ldr	r3, [pc, #412]	@ (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b02      	cmp	r3, #2
 800630e:	d10c      	bne.n	800632a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8006310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006312:	2b18      	cmp	r3, #24
 8006314:	d109      	bne.n	800632a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006316:	4b63      	ldr	r3, [pc, #396]	@ (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	08db      	lsrs	r3, r3, #3
 800631c:	f003 0303 	and.w	r3, r3, #3
 8006320:	4a61      	ldr	r2, [pc, #388]	@ (80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8006322:	fa22 f303 	lsr.w	r3, r2, r3
 8006326:	637b      	str	r3, [r7, #52]	@ 0x34
 8006328:	e01e      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800632a:	4b5e      	ldr	r3, [pc, #376]	@ (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006332:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006336:	d105      	bne.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 8006338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800633a:	2b20      	cmp	r3, #32
 800633c:	d102      	bne.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
          frequency = CSI_VALUE;
 800633e:	4b5b      	ldr	r3, [pc, #364]	@ (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8006340:	637b      	str	r3, [r7, #52]	@ 0x34
 8006342:	e011      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006344:	4b57      	ldr	r3, [pc, #348]	@ (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006346:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b02      	cmp	r3, #2
 8006350:	d106      	bne.n	8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8006352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006354:	2b28      	cmp	r3, #40	@ 0x28
 8006356:	d103      	bne.n	8006360 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
          frequency = LSE_VALUE;
 8006358:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800635c:	637b      	str	r3, [r7, #52]	@ 0x34
 800635e:	e003      	b.n	8006368 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = 0U;
 8006360:	2300      	movs	r3, #0
 8006362:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006364:	f001 be5d 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006368:	f001 be5b 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800636c:	4b4d      	ldr	r3, [pc, #308]	@ (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800636e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006372:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006376:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637a:	2b00      	cmp	r3, #0
 800637c:	d104      	bne.n	8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800637e:	f7fc ff73 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 8006382:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006384:	f001 be4d 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8006388:	4b46      	ldr	r3, [pc, #280]	@ (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006390:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006394:	d10a      	bne.n	80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006398:	2b40      	cmp	r3, #64	@ 0x40
 800639a:	d107      	bne.n	80063ac <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800639c:	f107 0314 	add.w	r3, r7, #20
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7ff f853 	bl	800544c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80063aa:	e045      	b.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 80063ac:	4b3d      	ldr	r3, [pc, #244]	@ (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80063b8:	d10a      	bne.n	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80063ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063bc:	2b80      	cmp	r3, #128	@ 0x80
 80063be:	d107      	bne.n	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063c0:	f107 0308 	add.w	r3, r7, #8
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7ff f9ab 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80063ce:	e033      	b.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80063d0:	4b34      	ldr	r3, [pc, #208]	@ (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0302 	and.w	r3, r3, #2
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d10c      	bne.n	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80063dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063de:	2bc0      	cmp	r3, #192	@ 0xc0
 80063e0:	d109      	bne.n	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80063e2:	4b30      	ldr	r3, [pc, #192]	@ (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	08db      	lsrs	r3, r3, #3
 80063e8:	f003 0303 	and.w	r3, r3, #3
 80063ec:	4a2e      	ldr	r2, [pc, #184]	@ (80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 80063ee:	fa22 f303 	lsr.w	r3, r2, r3
 80063f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80063f4:	e020      	b.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80063f6:	4b2b      	ldr	r3, [pc, #172]	@ (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006402:	d106      	bne.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8006404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006406:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800640a:	d102      	bne.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
          frequency = CSI_VALUE;
 800640c:	4b27      	ldr	r3, [pc, #156]	@ (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800640e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006410:	e012      	b.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006412:	4b24      	ldr	r3, [pc, #144]	@ (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006414:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006418:	f003 0302 	and.w	r3, r3, #2
 800641c:	2b02      	cmp	r3, #2
 800641e:	d107      	bne.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8006420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006422:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006426:	d103      	bne.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
          frequency = LSE_VALUE;
 8006428:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800642c:	637b      	str	r3, [r7, #52]	@ 0x34
 800642e:	e003      	b.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          frequency = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006434:	f001 bdf5 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006438:	f001 bdf3 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800643c:	4b19      	ldr	r3, [pc, #100]	@ (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800643e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006442:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8006446:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644a:	2b00      	cmp	r3, #0
 800644c:	d104      	bne.n	8006458 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800644e:	f7fc ff0b 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 8006452:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006454:	f001 bde5 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8006458:	4b12      	ldr	r3, [pc, #72]	@ (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006460:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006464:	d10b      	bne.n	800647e <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
 8006466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006468:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800646c:	d107      	bne.n	800647e <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800646e:	f107 0314 	add.w	r3, r7, #20
 8006472:	4618      	mov	r0, r3
 8006474:	f7fe ffea 	bl	800544c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	637b      	str	r3, [r7, #52]	@ 0x34
 800647c:	e04d      	b.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800647e:	4b09      	ldr	r3, [pc, #36]	@ (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006486:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800648a:	d111      	bne.n	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 800648c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800648e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006492:	d10d      	bne.n	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006494:	f107 0308 	add.w	r3, r7, #8
 8006498:	4618      	mov	r0, r3
 800649a:	f7ff f941 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80064a2:	e03a      	b.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
 80064a4:	44020c00 	.word	0x44020c00
 80064a8:	03d09000 	.word	0x03d09000
 80064ac:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80064b0:	4ba0      	ldr	r3, [pc, #640]	@ (8006734 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0302 	and.w	r3, r3, #2
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d10d      	bne.n	80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80064bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064be:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80064c2:	d109      	bne.n	80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80064c4:	4b9b      	ldr	r3, [pc, #620]	@ (8006734 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	08db      	lsrs	r3, r3, #3
 80064ca:	f003 0303 	and.w	r3, r3, #3
 80064ce:	4a9a      	ldr	r2, [pc, #616]	@ (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80064d0:	fa22 f303 	lsr.w	r3, r2, r3
 80064d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80064d6:	e020      	b.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 80064d8:	4b96      	ldr	r3, [pc, #600]	@ (8006734 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064e4:	d106      	bne.n	80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 80064e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064ec:	d102      	bne.n	80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
          frequency = CSI_VALUE;
 80064ee:	4b93      	ldr	r3, [pc, #588]	@ (800673c <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 80064f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80064f2:	e012      	b.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80064f4:	4b8f      	ldr	r3, [pc, #572]	@ (8006734 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80064f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064fa:	f003 0302 	and.w	r3, r3, #2
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d107      	bne.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
 8006502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006504:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006508:	d103      	bne.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
          frequency = LSE_VALUE;
 800650a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800650e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006510:	e003      	b.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0xb26>
          frequency = 0U;
 8006512:	2300      	movs	r3, #0
 8006514:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006516:	f001 bd84 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800651a:	f001 bd82 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800651e:	4b85      	ldr	r3, [pc, #532]	@ (8006734 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006520:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006524:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006528:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800652a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800652c:	2b00      	cmp	r3, #0
 800652e:	d104      	bne.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006530:	f7fc fe9a 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 8006534:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8006536:	f001 bd74 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800653a:	4b7e      	ldr	r3, [pc, #504]	@ (8006734 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006542:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006546:	d10b      	bne.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8006548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800654e:	d107      	bne.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006550:	f107 0314 	add.w	r3, r7, #20
 8006554:	4618      	mov	r0, r3
 8006556:	f7fe ff79 	bl	800544c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	637b      	str	r3, [r7, #52]	@ 0x34
 800655e:	e047      	b.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8006560:	4b74      	ldr	r3, [pc, #464]	@ (8006734 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006568:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800656c:	d10b      	bne.n	8006586 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 800656e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006570:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006574:	d107      	bne.n	8006586 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006576:	f107 0308 	add.w	r3, r7, #8
 800657a:	4618      	mov	r0, r3
 800657c:	f7ff f8d0 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	637b      	str	r3, [r7, #52]	@ 0x34
 8006584:	e034      	b.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006586:	4b6b      	ldr	r3, [pc, #428]	@ (8006734 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	2b02      	cmp	r3, #2
 8006590:	d10d      	bne.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0xbba>
 8006592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006594:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006598:	d109      	bne.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0xbba>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800659a:	4b66      	ldr	r3, [pc, #408]	@ (8006734 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	08db      	lsrs	r3, r3, #3
 80065a0:	f003 0303 	and.w	r3, r3, #3
 80065a4:	4a64      	ldr	r2, [pc, #400]	@ (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80065a6:	fa22 f303 	lsr.w	r3, r2, r3
 80065aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80065ac:	e020      	b.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 80065ae:	4b61      	ldr	r3, [pc, #388]	@ (8006734 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065ba:	d106      	bne.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 80065bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065c2:	d102      	bne.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
          frequency = CSI_VALUE;
 80065c4:	4b5d      	ldr	r3, [pc, #372]	@ (800673c <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 80065c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80065c8:	e012      	b.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80065ca:	4b5a      	ldr	r3, [pc, #360]	@ (8006734 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80065cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80065d0:	f003 0302 	and.w	r3, r3, #2
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d107      	bne.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 80065d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065da:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80065de:	d103      	bne.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
          frequency = LSE_VALUE;
 80065e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80065e6:	e003      	b.n	80065f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
          frequency = 0U;
 80065e8:	2300      	movs	r3, #0
 80065ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80065ec:	f001 bd19 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80065f0:	f001 bd17 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80065f4:	4b4f      	ldr	r3, [pc, #316]	@ (8006734 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80065f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80065fa:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 80065fe:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8006600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006602:	2b00      	cmp	r3, #0
 8006604:	d104      	bne.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006606:	f7fc fe2f 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 800660a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800660c:	f001 bd09 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8006610:	4b48      	ldr	r3, [pc, #288]	@ (8006734 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006618:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800661c:	d10b      	bne.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 800661e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006620:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006624:	d107      	bne.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006626:	f107 0314 	add.w	r3, r7, #20
 800662a:	4618      	mov	r0, r3
 800662c:	f7fe ff0e 	bl	800544c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	637b      	str	r3, [r7, #52]	@ 0x34
 8006634:	e047      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8006636:	4b3f      	ldr	r3, [pc, #252]	@ (8006734 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800663e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006642:	d10b      	bne.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
 8006644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006646:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800664a:	d107      	bne.n	800665c <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800664c:	f107 0308 	add.w	r3, r7, #8
 8006650:	4618      	mov	r0, r3
 8006652:	f7ff f865 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	637b      	str	r3, [r7, #52]	@ 0x34
 800665a:	e034      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800665c:	4b35      	ldr	r3, [pc, #212]	@ (8006734 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0302 	and.w	r3, r3, #2
 8006664:	2b02      	cmp	r3, #2
 8006666:	d10d      	bne.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0xc90>
 8006668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800666a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800666e:	d109      	bne.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0xc90>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006670:	4b30      	ldr	r3, [pc, #192]	@ (8006734 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	08db      	lsrs	r3, r3, #3
 8006676:	f003 0303 	and.w	r3, r3, #3
 800667a:	4a2f      	ldr	r2, [pc, #188]	@ (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800667c:	fa22 f303 	lsr.w	r3, r2, r3
 8006680:	637b      	str	r3, [r7, #52]	@ 0x34
 8006682:	e020      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8006684:	4b2b      	ldr	r3, [pc, #172]	@ (8006734 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800668c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006690:	d106      	bne.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8006692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006694:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006698:	d102      	bne.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
          frequency = CSI_VALUE;
 800669a:	4b28      	ldr	r3, [pc, #160]	@ (800673c <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 800669c:	637b      	str	r3, [r7, #52]	@ 0x34
 800669e:	e012      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 80066a0:	4b24      	ldr	r3, [pc, #144]	@ (8006734 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80066a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d107      	bne.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
 80066ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80066b4:	d103      	bne.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
          frequency = LSE_VALUE;
 80066b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80066bc:	e003      	b.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
          frequency = 0U;
 80066be:	2300      	movs	r3, #0
 80066c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066c2:	f001 bcae 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80066c6:	f001 bcac 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 80066ca:	4b1a      	ldr	r3, [pc, #104]	@ (8006734 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80066cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80066d0:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 80066d4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 80066d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d104      	bne.n	80066e6 <HAL_RCCEx_GetPeriphCLKFreq+0xcf2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80066dc:	f7fc fdc4 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 80066e0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 80066e2:	f001 bc9e 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 80066e6:	4b13      	ldr	r3, [pc, #76]	@ (8006734 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066f2:	d10b      	bne.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>
 80066f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066fa:	d107      	bne.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066fc:	f107 0314 	add.w	r3, r7, #20
 8006700:	4618      	mov	r0, r3
 8006702:	f7fe fea3 	bl	800544c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	637b      	str	r3, [r7, #52]	@ 0x34
 800670a:	e04e      	b.n	80067aa <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800670c:	4b09      	ldr	r3, [pc, #36]	@ (8006734 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006714:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006718:	d112      	bne.n	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 800671a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006720:	d10e      	bne.n	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006722:	f107 0308 	add.w	r3, r7, #8
 8006726:	4618      	mov	r0, r3
 8006728:	f7fe fffa 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006730:	e03b      	b.n	80067aa <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
 8006732:	bf00      	nop
 8006734:	44020c00 	.word	0x44020c00
 8006738:	03d09000 	.word	0x03d09000
 800673c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8006740:	4ba0      	ldr	r3, [pc, #640]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0302 	and.w	r3, r3, #2
 8006748:	2b02      	cmp	r3, #2
 800674a:	d10d      	bne.n	8006768 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
 800674c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006752:	d109      	bne.n	8006768 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006754:	4b9b      	ldr	r3, [pc, #620]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	08db      	lsrs	r3, r3, #3
 800675a:	f003 0303 	and.w	r3, r3, #3
 800675e:	4a9a      	ldr	r2, [pc, #616]	@ (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>)
 8006760:	fa22 f303 	lsr.w	r3, r2, r3
 8006764:	637b      	str	r3, [r7, #52]	@ 0x34
 8006766:	e020      	b.n	80067aa <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8006768:	4b96      	ldr	r3, [pc, #600]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006770:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006774:	d106      	bne.n	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8006776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006778:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800677c:	d102      	bne.n	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
          frequency = CSI_VALUE;
 800677e:	4b93      	ldr	r3, [pc, #588]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>)
 8006780:	637b      	str	r3, [r7, #52]	@ 0x34
 8006782:	e012      	b.n	80067aa <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8006784:	4b8f      	ldr	r3, [pc, #572]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006786:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	2b02      	cmp	r3, #2
 8006790:	d107      	bne.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
 8006792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006794:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006798:	d103      	bne.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
          frequency = LSE_VALUE;
 800679a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800679e:	637b      	str	r3, [r7, #52]	@ 0x34
 80067a0:	e003      	b.n	80067aa <HAL_RCCEx_GetPeriphCLKFreq+0xdb6>
          frequency = 0U;
 80067a2:	2300      	movs	r3, #0
 80067a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067a6:	f001 bc3c 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80067aa:	f001 bc3a 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 80067ae:	4b85      	ldr	r3, [pc, #532]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80067b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80067b4:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80067b8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 80067ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d104      	bne.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80067c0:	f7fc fd52 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 80067c4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 80067c6:	f001 bc2c 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 80067ca:	4b7e      	ldr	r3, [pc, #504]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067d6:	d10b      	bne.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 80067d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067de:	d107      	bne.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067e0:	f107 0314 	add.w	r3, r7, #20
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7fe fe31 	bl	800544c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80067ee:	e047      	b.n	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 80067f0:	4b74      	ldr	r3, [pc, #464]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80067fc:	d10b      	bne.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 80067fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006800:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006804:	d107      	bne.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006806:	f107 0308 	add.w	r3, r7, #8
 800680a:	4618      	mov	r0, r3
 800680c:	f7fe ff88 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	637b      	str	r3, [r7, #52]	@ 0x34
 8006814:	e034      	b.n	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8006816:	4b6b      	ldr	r3, [pc, #428]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0302 	and.w	r3, r3, #2
 800681e:	2b02      	cmp	r3, #2
 8006820:	d10d      	bne.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
 8006822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006824:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006828:	d109      	bne.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800682a:	4b66      	ldr	r3, [pc, #408]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	08db      	lsrs	r3, r3, #3
 8006830:	f003 0303 	and.w	r3, r3, #3
 8006834:	4a64      	ldr	r2, [pc, #400]	@ (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>)
 8006836:	fa22 f303 	lsr.w	r3, r2, r3
 800683a:	637b      	str	r3, [r7, #52]	@ 0x34
 800683c:	e020      	b.n	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800683e:	4b61      	ldr	r3, [pc, #388]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006846:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800684a:	d106      	bne.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xe66>
 800684c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006852:	d102      	bne.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0xe66>
          frequency = CSI_VALUE;
 8006854:	4b5d      	ldr	r3, [pc, #372]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>)
 8006856:	637b      	str	r3, [r7, #52]	@ 0x34
 8006858:	e012      	b.n	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800685a:	4b5a      	ldr	r3, [pc, #360]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800685c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	2b02      	cmp	r3, #2
 8006866:	d107      	bne.n	8006878 <HAL_RCCEx_GetPeriphCLKFreq+0xe84>
 8006868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800686e:	d103      	bne.n	8006878 <HAL_RCCEx_GetPeriphCLKFreq+0xe84>
          frequency = LSE_VALUE;
 8006870:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006874:	637b      	str	r3, [r7, #52]	@ 0x34
 8006876:	e003      	b.n	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0xe8c>
          frequency = 0U;
 8006878:	2300      	movs	r3, #0
 800687a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800687c:	f001 bbd1 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006880:	f001 bbcf 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8006884:	4b4f      	ldr	r3, [pc, #316]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006886:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800688a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800688e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8006890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006892:	2b00      	cmp	r3, #0
 8006894:	d104      	bne.n	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0xeac>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006896:	f7fc fce7 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 800689a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 800689c:	f001 bbc1 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 80068a0:	4b48      	ldr	r3, [pc, #288]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80068a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80068ac:	d10b      	bne.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
 80068ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80068b4:	d107      	bne.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068b6:	f107 0314 	add.w	r3, r7, #20
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fe fdc6 	bl	800544c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80068c4:	e047      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 80068c6:	4b3f      	ldr	r3, [pc, #252]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80068d2:	d10b      	bne.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 80068d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80068da:	d107      	bne.n	80068ec <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068dc:	f107 0308 	add.w	r3, r7, #8
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7fe ff1d 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80068ea:	e034      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 80068ec:	4b35      	ldr	r3, [pc, #212]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d10d      	bne.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 80068f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80068fe:	d109      	bne.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006900:	4b30      	ldr	r3, [pc, #192]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	08db      	lsrs	r3, r3, #3
 8006906:	f003 0303 	and.w	r3, r3, #3
 800690a:	4a2f      	ldr	r2, [pc, #188]	@ (80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>)
 800690c:	fa22 f303 	lsr.w	r3, r2, r3
 8006910:	637b      	str	r3, [r7, #52]	@ 0x34
 8006912:	e020      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8006914:	4b2b      	ldr	r3, [pc, #172]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800691c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006920:	d106      	bne.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
 8006922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006924:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006928:	d102      	bne.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
          frequency = CSI_VALUE;
 800692a:	4b28      	ldr	r3, [pc, #160]	@ (80069cc <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>)
 800692c:	637b      	str	r3, [r7, #52]	@ 0x34
 800692e:	e012      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8006930:	4b24      	ldr	r3, [pc, #144]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006932:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	2b02      	cmp	r3, #2
 800693c:	d107      	bne.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 800693e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006940:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006944:	d103      	bne.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
          frequency = LSE_VALUE;
 8006946:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800694a:	637b      	str	r3, [r7, #52]	@ 0x34
 800694c:	e003      	b.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
          frequency = 0U;
 800694e:	2300      	movs	r3, #0
 8006950:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006952:	f001 bb66 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006956:	f001 bb64 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800695a:	4b1a      	ldr	r3, [pc, #104]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800695c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006960:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 8006964:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8006966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006968:	2b00      	cmp	r3, #0
 800696a:	d104      	bne.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800696c:	f7fc fc7c 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 8006970:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8006972:	f001 bb56 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8006976:	4b13      	ldr	r3, [pc, #76]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800697e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006982:	d10b      	bne.n	800699c <HAL_RCCEx_GetPeriphCLKFreq+0xfa8>
 8006984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006986:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800698a:	d107      	bne.n	800699c <HAL_RCCEx_GetPeriphCLKFreq+0xfa8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800698c:	f107 0314 	add.w	r3, r7, #20
 8006990:	4618      	mov	r0, r3
 8006992:	f7fe fd5b 	bl	800544c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	637b      	str	r3, [r7, #52]	@ 0x34
 800699a:	e04e      	b.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800699c:	4b09      	ldr	r3, [pc, #36]	@ (80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80069a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80069a8:	d112      	bne.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80069aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069b0:	d10e      	bne.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069b2:	f107 0308 	add.w	r3, r7, #8
 80069b6:	4618      	mov	r0, r3
 80069b8:	f7fe feb2 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	637b      	str	r3, [r7, #52]	@ 0x34
 80069c0:	e03b      	b.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
 80069c2:	bf00      	nop
 80069c4:	44020c00 	.word	0x44020c00
 80069c8:	03d09000 	.word	0x03d09000
 80069cc:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 80069d0:	4b9f      	ldr	r3, [pc, #636]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0302 	and.w	r3, r3, #2
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d10d      	bne.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1004>
 80069dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069de:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80069e2:	d109      	bne.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1004>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80069e4:	4b9a      	ldr	r3, [pc, #616]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	08db      	lsrs	r3, r3, #3
 80069ea:	f003 0303 	and.w	r3, r3, #3
 80069ee:	4a99      	ldr	r2, [pc, #612]	@ (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1260>)
 80069f0:	fa22 f303 	lsr.w	r3, r2, r3
 80069f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80069f6:	e020      	b.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 80069f8:	4b95      	ldr	r3, [pc, #596]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a04:	d106      	bne.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x1020>
 8006a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a0c:	d102      	bne.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x1020>
          frequency = CSI_VALUE;
 8006a0e:	4b92      	ldr	r3, [pc, #584]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1264>)
 8006a10:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a12:	e012      	b.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8006a14:	4b8e      	ldr	r3, [pc, #568]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006a16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a1a:	f003 0302 	and.w	r3, r3, #2
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d107      	bne.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x103e>
 8006a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a24:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8006a28:	d103      	bne.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x103e>
          frequency = LSE_VALUE;
 8006a2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a30:	e003      	b.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x1046>
          frequency = 0U;
 8006a32:	2300      	movs	r3, #0
 8006a34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a36:	f001 baf4 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006a3a:	f001 baf2 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8006a3e:	4b84      	ldr	r3, [pc, #528]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006a40:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006a44:	f003 0307 	and.w	r3, r3, #7
 8006a48:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8006a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d104      	bne.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0x1066>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a50:	f7fc fc0a 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 8006a54:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8006a56:	f001 bae4 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8006a5a:	4b7d      	ldr	r3, [pc, #500]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a66:	d10a      	bne.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x108a>
 8006a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d107      	bne.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x108a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a6e:	f107 0314 	add.w	r3, r7, #20
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fe fcea 	bl	800544c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a7c:	e043      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8006a7e:	4b74      	ldr	r3, [pc, #464]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006a86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a8a:	d10a      	bne.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
 8006a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d107      	bne.n	8006aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a92:	f107 0308 	add.w	r3, r7, #8
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7fe fe42 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aa0:	e031      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8006aa2:	4b6b      	ldr	r3, [pc, #428]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0302 	and.w	r3, r3, #2
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d10c      	bne.n	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
 8006aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab0:	2b03      	cmp	r3, #3
 8006ab2:	d109      	bne.n	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ab4:	4b66      	ldr	r3, [pc, #408]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	08db      	lsrs	r3, r3, #3
 8006aba:	f003 0303 	and.w	r3, r3, #3
 8006abe:	4a65      	ldr	r2, [pc, #404]	@ (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1260>)
 8006ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ac4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ac6:	e01e      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8006ac8:	4b61      	ldr	r3, [pc, #388]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ad0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ad4:	d105      	bne.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ee>
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad8:	2b04      	cmp	r3, #4
 8006ada:	d102      	bne.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ee>
          frequency = CSI_VALUE;
 8006adc:	4b5e      	ldr	r3, [pc, #376]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1264>)
 8006ade:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ae0:	e011      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8006ae2:	4b5b      	ldr	r3, [pc, #364]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006ae4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ae8:	f003 0302 	and.w	r3, r3, #2
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d106      	bne.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x110a>
 8006af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af2:	2b05      	cmp	r3, #5
 8006af4:	d103      	bne.n	8006afe <HAL_RCCEx_GetPeriphCLKFreq+0x110a>
          frequency = LSE_VALUE;
 8006af6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006afa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006afc:	e003      	b.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
          frequency = 0U;
 8006afe:	2300      	movs	r3, #0
 8006b00:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b02:	f001 ba8e 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006b06:	f001 ba8c 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8006b0a:	4b51      	ldr	r3, [pc, #324]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006b0c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006b10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b14:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8006b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d104      	bne.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006b1c:	f7fc fba4 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 8006b20:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8006b22:	f001 ba7e 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8006b26:	4b4a      	ldr	r3, [pc, #296]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b32:	d10a      	bne.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8006b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b36:	2b10      	cmp	r3, #16
 8006b38:	d107      	bne.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b3a:	f107 0314 	add.w	r3, r7, #20
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f7fe fc84 	bl	800544c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b48:	e043      	b.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8006b4a:	4b41      	ldr	r3, [pc, #260]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b56:	d10a      	bne.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
 8006b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5a:	2b20      	cmp	r3, #32
 8006b5c:	d107      	bne.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b5e:	f107 0308 	add.w	r3, r7, #8
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7fe fddc 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b6c:	e031      	b.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8006b6e:	4b38      	ldr	r3, [pc, #224]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0302 	and.w	r3, r3, #2
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d10c      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8006b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b7c:	2b30      	cmp	r3, #48	@ 0x30
 8006b7e:	d109      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b80:	4b33      	ldr	r3, [pc, #204]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	08db      	lsrs	r3, r3, #3
 8006b86:	f003 0303 	and.w	r3, r3, #3
 8006b8a:	4a32      	ldr	r2, [pc, #200]	@ (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1260>)
 8006b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b90:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b92:	e01e      	b.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8006b94:	4b2e      	ldr	r3, [pc, #184]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ba0:	d105      	bne.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x11ba>
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba4:	2b40      	cmp	r3, #64	@ 0x40
 8006ba6:	d102      	bne.n	8006bae <HAL_RCCEx_GetPeriphCLKFreq+0x11ba>
          frequency = CSI_VALUE;
 8006ba8:	4b2b      	ldr	r3, [pc, #172]	@ (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1264>)
 8006baa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bac:	e011      	b.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8006bae:	4b28      	ldr	r3, [pc, #160]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006bb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bb4:	f003 0302 	and.w	r3, r3, #2
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d106      	bne.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bbe:	2b50      	cmp	r3, #80	@ 0x50
 8006bc0:	d103      	bne.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = LSE_VALUE;
 8006bc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bc8:	e003      	b.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
          frequency = 0U;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006bce:	f001 ba28 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006bd2:	f001 ba26 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006bdc:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006be0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d104      	bne.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006be8:	f7fc fb6a 	bl	80032c0 <HAL_RCC_GetPCLK3Freq>
 8006bec:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006bee:	f001 ba18 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006bf8:	d108      	bne.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1218>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bfa:	f107 0314 	add.w	r3, r7, #20
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7fe fc24 	bl	800544c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c08:	f001 ba0b 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c12:	d108      	bne.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x1232>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c14:	f107 0308 	add.w	r3, r7, #8
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7fe fd81 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c22:	f001 b9fe 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006c26:	4b0a      	ldr	r3, [pc, #40]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0302 	and.w	r3, r3, #2
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d114      	bne.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1268>
 8006c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c34:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006c38:	d110      	bne.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1268>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c3a:	4b05      	ldr	r3, [pc, #20]	@ (8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	08db      	lsrs	r3, r3, #3
 8006c40:	f003 0303 	and.w	r3, r3, #3
 8006c44:	4a03      	ldr	r2, [pc, #12]	@ (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1260>)
 8006c46:	fa22 f303 	lsr.w	r3, r2, r3
 8006c4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c4c:	e027      	b.n	8006c9e <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
 8006c4e:	bf00      	nop
 8006c50:	44020c00 	.word	0x44020c00
 8006c54:	03d09000 	.word	0x03d09000
 8006c58:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8006c5c:	4ba0      	ldr	r3, [pc, #640]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c68:	d106      	bne.n	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c70:	d102      	bne.n	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>
          frequency = CSI_VALUE;
 8006c72:	4b9c      	ldr	r3, [pc, #624]	@ (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x14f0>)
 8006c74:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c76:	e012      	b.n	8006c9e <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006c78:	4b99      	ldr	r3, [pc, #612]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006c7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d107      	bne.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x12a2>
 8006c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c88:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006c8c:	d103      	bne.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x12a2>
          frequency = LSE_VALUE;
 8006c8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c92:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c94:	e003      	b.n	8006c9e <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
          frequency = 0U;
 8006c96:	2300      	movs	r3, #0
 8006c98:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006c9a:	f001 b9c2 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006c9e:	f001 b9c0 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006ca2:	4b8f      	ldr	r3, [pc, #572]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006ca4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006ca8:	f003 0307 	and.w	r3, r3, #7
 8006cac:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d104      	bne.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0x12ca>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8006cb4:	f7fc fabc 	bl	8003230 <HAL_RCC_GetHCLKFreq>
 8006cb8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8006cba:	f001 b9b2 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d104      	bne.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
          frequency = HAL_RCC_GetSysClockFreq();
 8006cc4:	f7fc f988 	bl	8002fd8 <HAL_RCC_GetSysClockFreq>
 8006cc8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006cca:	f001 b9aa 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8006cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d108      	bne.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cd4:	f107 0314 	add.w	r3, r7, #20
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7fe fbb7 	bl	800544c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ce2:	f001 b99e 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006ce6:	4b7e      	ldr	r3, [pc, #504]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cf2:	d105      	bne.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x130c>
 8006cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf6:	2b03      	cmp	r3, #3
 8006cf8:	d102      	bne.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x130c>
          frequency = HSE_VALUE;
 8006cfa:	4b7b      	ldr	r3, [pc, #492]	@ (8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>)
 8006cfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cfe:	e023      	b.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1354>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006d00:	4b77      	ldr	r3, [pc, #476]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0302 	and.w	r3, r3, #2
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d10c      	bne.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x1332>
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0e:	2b04      	cmp	r3, #4
 8006d10:	d109      	bne.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x1332>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d12:	4b73      	ldr	r3, [pc, #460]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	08db      	lsrs	r3, r3, #3
 8006d18:	f003 0303 	and.w	r3, r3, #3
 8006d1c:	4a73      	ldr	r2, [pc, #460]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x14f8>)
 8006d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d22:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d24:	e010      	b.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1354>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8006d26:	4b6e      	ldr	r3, [pc, #440]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d32:	d105      	bne.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
 8006d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d36:	2b05      	cmp	r3, #5
 8006d38:	d102      	bne.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
          frequency = CSI_VALUE;
 8006d3a:	4b6a      	ldr	r3, [pc, #424]	@ (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x14f0>)
 8006d3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d3e:	e003      	b.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x1354>
          frequency = 0U;
 8006d40:	2300      	movs	r3, #0
 8006d42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d44:	f001 b96d 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006d48:	f001 b96b 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8006d4c:	4b64      	ldr	r3, [pc, #400]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006d4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d52:	f003 0308 	and.w	r3, r3, #8
 8006d56:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8006d58:	4b61      	ldr	r3, [pc, #388]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006d5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d106      	bne.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x1380>
 8006d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d103      	bne.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x1380>
        {
          frequency = LSE_VALUE;
 8006d6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d70:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d72:	e012      	b.n	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0x13a6>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8006d74:	4b5a      	ldr	r3, [pc, #360]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006d76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d82:	d106      	bne.n	8006d92 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8006d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d86:	2b08      	cmp	r3, #8
 8006d88:	d103      	bne.n	8006d92 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
        {
          frequency = LSI_VALUE;
 8006d8a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006d8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d90:	e003      	b.n	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0x13a6>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8006d92:	2300      	movs	r3, #0
 8006d94:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8006d96:	f001 b944 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006d9a:	f001 b942 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006d9e:	4b50      	ldr	r3, [pc, #320]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006da0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006da4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006da8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d104      	bne.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x13c6>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006db0:	f7fc fa5a 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 8006db4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006db6:	f001 b934 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8006dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dc0:	d108      	bne.n	8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dc2:	f107 0308 	add.w	r3, r7, #8
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7fe fcaa 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006dd0:	f001 b927 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006dd4:	4b42      	ldr	r3, [pc, #264]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 0302 	and.w	r3, r3, #2
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d10d      	bne.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x1408>
 8006de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006de6:	d109      	bne.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x1408>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006de8:	4b3d      	ldr	r3, [pc, #244]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	08db      	lsrs	r3, r3, #3
 8006dee:	f003 0303 	and.w	r3, r3, #3
 8006df2:	4a3e      	ldr	r2, [pc, #248]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x14f8>)
 8006df4:	fa22 f303 	lsr.w	r3, r2, r3
 8006df8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dfa:	e011      	b.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8006dfc:	4b38      	ldr	r3, [pc, #224]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e08:	d106      	bne.n	8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0x1424>
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e0c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006e10:	d102      	bne.n	8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0x1424>
          frequency = CSI_VALUE;
 8006e12:	4b34      	ldr	r3, [pc, #208]	@ (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x14f0>)
 8006e14:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e16:	e003      	b.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
          frequency = 0U;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e1c:	f001 b901 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006e20:	f001 b8ff 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006e24:	4b2e      	ldr	r3, [pc, #184]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006e26:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006e2a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006e2e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d104      	bne.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x144c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e36:	f7fc fa17 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 8006e3a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006e3c:	f001 b8f1 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8006e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e42:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006e46:	d108      	bne.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0x1466>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e48:	f107 0308 	add.w	r3, r7, #8
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7fe fc67 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e56:	f001 b8e4 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006e5a:	4b21      	ldr	r3, [pc, #132]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0302 	and.w	r3, r3, #2
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d10d      	bne.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0x148e>
 8006e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e68:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006e6c:	d109      	bne.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0x148e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	08db      	lsrs	r3, r3, #3
 8006e74:	f003 0303 	and.w	r3, r3, #3
 8006e78:	4a1c      	ldr	r2, [pc, #112]	@ (8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x14f8>)
 8006e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e80:	e011      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8006e82:	4b17      	ldr	r3, [pc, #92]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e8e:	d106      	bne.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x14aa>
 8006e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e92:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006e96:	d102      	bne.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x14aa>
          frequency = CSI_VALUE;
 8006e98:	4b12      	ldr	r3, [pc, #72]	@ (8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x14f0>)
 8006e9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e9c:	e003      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
          frequency = 0U;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ea2:	f001 b8be 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006ea6:	f001 b8bc 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>)
 8006eac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006eb0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006eb4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d104      	bne.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x14d2>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006ebc:	f7fc fa00 	bl	80032c0 <HAL_RCC_GetPCLK3Freq>
 8006ec0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006ec2:	f001 b8ae 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ecc:	d110      	bne.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x14fc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ece:	f107 0308 	add.w	r3, r7, #8
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7fe fc24 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006edc:	f001 b8a1 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006ee0:	44020c00 	.word	0x44020c00
 8006ee4:	003d0900 	.word	0x003d0900
 8006ee8:	017d7840 	.word	0x017d7840
 8006eec:	03d09000 	.word	0x03d09000
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8006ef0:	4b9e      	ldr	r3, [pc, #632]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0302 	and.w	r3, r3, #2
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d10d      	bne.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
 8006efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006efe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f02:	d109      	bne.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f04:	4b99      	ldr	r3, [pc, #612]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	08db      	lsrs	r3, r3, #3
 8006f0a:	f003 0303 	and.w	r3, r3, #3
 8006f0e:	4a98      	ldr	r2, [pc, #608]	@ (8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x177c>)
 8006f10:	fa22 f303 	lsr.w	r3, r2, r3
 8006f14:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f16:	e011      	b.n	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8006f18:	4b94      	ldr	r3, [pc, #592]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f24:	d106      	bne.n	8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>
 8006f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f28:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f2c:	d102      	bne.n	8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>
          frequency = CSI_VALUE;
 8006f2e:	4b91      	ldr	r3, [pc, #580]	@ (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x1780>)
 8006f30:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f32:	e003      	b.n	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
          frequency = 0U;
 8006f34:	2300      	movs	r3, #0
 8006f36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f38:	f001 b873 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006f3c:	f001 b871 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006f40:	4b8a      	ldr	r3, [pc, #552]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006f42:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006f46:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8006f4a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8006f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d104      	bne.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x1568>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006f52:	f7fc f9b5 	bl	80032c0 <HAL_RCC_GetPCLK3Freq>
 8006f56:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006f58:	f001 b863 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8006f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f62:	d108      	bne.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0x1582>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f64:	f107 0308 	add.w	r3, r7, #8
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7fe fbd9 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f72:	f001 b856 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006f76:	4b7d      	ldr	r3, [pc, #500]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 0302 	and.w	r3, r3, #2
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d10d      	bne.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x15aa>
 8006f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f84:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f88:	d109      	bne.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x15aa>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f8a:	4b78      	ldr	r3, [pc, #480]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	08db      	lsrs	r3, r3, #3
 8006f90:	f003 0303 	and.w	r3, r3, #3
 8006f94:	4a76      	ldr	r2, [pc, #472]	@ (8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x177c>)
 8006f96:	fa22 f303 	lsr.w	r3, r2, r3
 8006f9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f9c:	e011      	b.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8006f9e:	4b73      	ldr	r3, [pc, #460]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006fa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006faa:	d106      	bne.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
 8006fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fae:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006fb2:	d102      	bne.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
          frequency = CSI_VALUE;
 8006fb4:	4b6f      	ldr	r3, [pc, #444]	@ (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x1780>)
 8006fb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fb8:	e003      	b.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
          frequency = 0U;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fbe:	f001 b830 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8006fc2:	f001 b82e 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8006fc6:	4b69      	ldr	r3, [pc, #420]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006fc8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006fcc:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006fd0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8006fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d104      	bne.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ee>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006fd8:	f7fc f946 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 8006fdc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006fde:	f001 b820 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8006fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fe4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006fe8:	d108      	bne.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1608>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fea:	f107 0308 	add.w	r3, r7, #8
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7fe fb96 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ff8:	f001 b813 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8006ffc:	4b5b      	ldr	r3, [pc, #364]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0302 	and.w	r3, r3, #2
 8007004:	2b02      	cmp	r3, #2
 8007006:	d10e      	bne.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x1632>
 8007008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800700e:	d10a      	bne.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x1632>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007010:	4b56      	ldr	r3, [pc, #344]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	08db      	lsrs	r3, r3, #3
 8007016:	f003 0303 	and.w	r3, r3, #3
 800701a:	4a55      	ldr	r2, [pc, #340]	@ (8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x177c>)
 800701c:	fa22 f303 	lsr.w	r3, r2, r3
 8007020:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007022:	f000 bffe 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
          frequency = 0U;
 8007026:	2300      	movs	r3, #0
 8007028:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800702a:	f000 bffa 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800702e:	4b4f      	ldr	r3, [pc, #316]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8007030:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007034:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007038:	633b      	str	r3, [r7, #48]	@ 0x30
 800703a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007040:	d056      	beq.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x16fc>
 8007042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007044:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007048:	f200 808b 	bhi.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
 800704c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007052:	d03e      	beq.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x16de>
 8007054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007056:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800705a:	f200 8082 	bhi.w	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
 800705e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007060:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007064:	d027      	beq.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x16c2>
 8007066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007068:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800706c:	d879      	bhi.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
 800706e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007070:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007074:	d017      	beq.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x16b2>
 8007076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800707c:	d871      	bhi.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x176e>
 800707e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007080:	2b00      	cmp	r3, #0
 8007082:	d004      	beq.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
 8007084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007086:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800708a:	d004      	beq.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x16a2>
 800708c:	e069      	b.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x176e>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800708e:	f7fc f917 	bl	80032c0 <HAL_RCC_GetPCLK3Freq>
 8007092:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007094:	e068      	b.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007096:	f107 0314 	add.w	r3, r7, #20
 800709a:	4618      	mov	r0, r3
 800709c:	f7fe f9d6 	bl	800544c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80070a4:	e060      	b.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070a6:	f107 0308 	add.w	r3, r7, #8
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7fe fb38 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80070b4:	e058      	b.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80070b6:	4b2d      	ldr	r3, [pc, #180]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 80070b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070bc:	f003 0302 	and.w	r3, r3, #2
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d103      	bne.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x16d8>
            {
              frequency = LSE_VALUE;
 80070c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070c8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80070ca:	e04d      	b.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
              frequency = 0;
 80070cc:	2300      	movs	r3, #0
 80070ce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80070d0:	e04a      	b.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80070d2:	4b26      	ldr	r3, [pc, #152]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 80070d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80070d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070e0:	d103      	bne.n	80070ea <HAL_RCCEx_GetPeriphCLKFreq+0x16f6>
            {
              frequency = LSI_VALUE;
 80070e2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80070e6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80070e8:	e03e      	b.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
              frequency = 0;
 80070ea:	2300      	movs	r3, #0
 80070ec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80070ee:	e03b      	b.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80070f0:	4b1e      	ldr	r3, [pc, #120]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 80070f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80070f6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80070fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80070fc:	4b1b      	ldr	r3, [pc, #108]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0302 	and.w	r3, r3, #2
 8007104:	2b02      	cmp	r3, #2
 8007106:	d10c      	bne.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0x172e>
 8007108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800710a:	2b00      	cmp	r3, #0
 800710c:	d109      	bne.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0x172e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800710e:	4b17      	ldr	r3, [pc, #92]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	08db      	lsrs	r3, r3, #3
 8007114:	f003 0303 	and.w	r3, r3, #3
 8007118:	4a15      	ldr	r2, [pc, #84]	@ (8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x177c>)
 800711a:	fa22 f303 	lsr.w	r3, r2, r3
 800711e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007120:	e01e      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007122:	4b12      	ldr	r3, [pc, #72]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800712a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800712e:	d106      	bne.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x174a>
 8007130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007136:	d102      	bne.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x174a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007138:	4b0e      	ldr	r3, [pc, #56]	@ (8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x1780>)
 800713a:	637b      	str	r3, [r7, #52]	@ 0x34
 800713c:	e010      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800713e:	4b0b      	ldr	r3, [pc, #44]	@ (800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1778>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007146:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800714a:	d106      	bne.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0x1766>
 800714c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800714e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007152:	d102      	bne.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0x1766>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007154:	4b08      	ldr	r3, [pc, #32]	@ (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x1784>)
 8007156:	637b      	str	r3, [r7, #52]	@ 0x34
 8007158:	e002      	b.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800715a:	2300      	movs	r3, #0
 800715c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800715e:	e003      	b.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
 8007160:	e002      	b.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x1774>
          }
          default :
          {
            frequency = 0U;
 8007162:	2300      	movs	r3, #0
 8007164:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007166:	bf00      	nop
          }
        }
        break;
 8007168:	f000 bf5b 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800716c:	44020c00 	.word	0x44020c00
 8007170:	03d09000 	.word	0x03d09000
 8007174:	003d0900 	.word	0x003d0900
 8007178:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800717c:	4b9e      	ldr	r3, [pc, #632]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800717e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007182:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007186:	633b      	str	r3, [r7, #48]	@ 0x30
 8007188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800718a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800718e:	d056      	beq.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x184a>
 8007190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007192:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007196:	f200 808b 	bhi.w	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
 800719a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071a0:	d03e      	beq.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x182c>
 80071a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071a8:	f200 8082 	bhi.w	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
 80071ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80071b2:	d027      	beq.n	8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x1810>
 80071b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80071ba:	d879      	bhi.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
 80071bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071c2:	d017      	beq.n	80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1800>
 80071c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071ca:	d871      	bhi.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>
 80071cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d004      	beq.n	80071dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>
 80071d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071d8:	d004      	beq.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 80071da:	e069      	b.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x18bc>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80071dc:	f7fc f844 	bl	8003268 <HAL_RCC_GetPCLK1Freq>
 80071e0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80071e2:	e068      	b.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071e4:	f107 0314 	add.w	r3, r7, #20
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7fe f92f 	bl	800544c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80071f2:	e060      	b.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071f4:	f107 0308 	add.w	r3, r7, #8
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7fe fa91 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007202:	e058      	b.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007204:	4b7c      	ldr	r3, [pc, #496]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007206:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800720a:	f003 0302 	and.w	r3, r3, #2
 800720e:	2b02      	cmp	r3, #2
 8007210:	d103      	bne.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x1826>
            {
              frequency = LSE_VALUE;
 8007212:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007216:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007218:	e04d      	b.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
              frequency = 0;
 800721a:	2300      	movs	r3, #0
 800721c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800721e:	e04a      	b.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007220:	4b75      	ldr	r3, [pc, #468]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007222:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007226:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800722a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800722e:	d103      	bne.n	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0x1844>
            {
              frequency = LSI_VALUE;
 8007230:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007234:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007236:	e03e      	b.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
              frequency = 0;
 8007238:	2300      	movs	r3, #0
 800723a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800723c:	e03b      	b.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800723e:	4b6e      	ldr	r3, [pc, #440]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007240:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007244:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007248:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800724a:	4b6b      	ldr	r3, [pc, #428]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 0302 	and.w	r3, r3, #2
 8007252:	2b02      	cmp	r3, #2
 8007254:	d10c      	bne.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x187c>
 8007256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007258:	2b00      	cmp	r3, #0
 800725a:	d109      	bne.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x187c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800725c:	4b66      	ldr	r3, [pc, #408]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	08db      	lsrs	r3, r3, #3
 8007262:	f003 0303 	and.w	r3, r3, #3
 8007266:	4a65      	ldr	r2, [pc, #404]	@ (80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a08>)
 8007268:	fa22 f303 	lsr.w	r3, r2, r3
 800726c:	637b      	str	r3, [r7, #52]	@ 0x34
 800726e:	e01e      	b.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0x18ba>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007270:	4b61      	ldr	r3, [pc, #388]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007278:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800727c:	d106      	bne.n	800728c <HAL_RCCEx_GetPeriphCLKFreq+0x1898>
 800727e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007280:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007284:	d102      	bne.n	800728c <HAL_RCCEx_GetPeriphCLKFreq+0x1898>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007286:	4b5e      	ldr	r3, [pc, #376]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0c>)
 8007288:	637b      	str	r3, [r7, #52]	@ 0x34
 800728a:	e010      	b.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0x18ba>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800728c:	4b5a      	ldr	r3, [pc, #360]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007294:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007298:	d106      	bne.n	80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x18b4>
 800729a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800729c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072a0:	d102      	bne.n	80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x18b4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80072a2:	4b58      	ldr	r3, [pc, #352]	@ (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x1a10>)
 80072a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80072a6:	e002      	b.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0x18ba>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80072a8:	2300      	movs	r3, #0
 80072aa:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80072ac:	e003      	b.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
 80072ae:	e002      	b.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x18c2>
          }
          default :
          {
            frequency = 0U;
 80072b0:	2300      	movs	r3, #0
 80072b2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80072b4:	bf00      	nop
          }
        }
        break;
 80072b6:	f000 beb4 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80072ba:	4b4f      	ldr	r3, [pc, #316]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 80072bc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80072c0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80072c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80072c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80072cc:	d056      	beq.n	800737c <HAL_RCCEx_GetPeriphCLKFreq+0x1988>
 80072ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80072d4:	f200 808b 	bhi.w	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
 80072d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80072de:	d03e      	beq.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x196a>
 80072e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80072e6:	f200 8082 	bhi.w	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
 80072ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80072f0:	d027      	beq.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0x194e>
 80072f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80072f8:	d879      	bhi.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
 80072fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007300:	d017      	beq.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0x193e>
 8007302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007304:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007308:	d871      	bhi.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>
 800730a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730c:	2b00      	cmp	r3, #0
 800730e:	d004      	beq.n	800731a <HAL_RCCEx_GetPeriphCLKFreq+0x1926>
 8007310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007312:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007316:	d004      	beq.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8007318:	e069      	b.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x19fa>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800731a:	f7fb ffd1 	bl	80032c0 <HAL_RCC_GetPCLK3Freq>
 800731e:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007320:	e068      	b.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007322:	f107 0314 	add.w	r3, r7, #20
 8007326:	4618      	mov	r0, r3
 8007328:	f7fe f890 	bl	800544c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007330:	e060      	b.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007332:	f107 0308 	add.w	r3, r7, #8
 8007336:	4618      	mov	r0, r3
 8007338:	f7fe f9f2 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007340:	e058      	b.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007342:	4b2d      	ldr	r3, [pc, #180]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007344:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007348:	f003 0302 	and.w	r3, r3, #2
 800734c:	2b02      	cmp	r3, #2
 800734e:	d103      	bne.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x1964>
            {
              frequency = LSE_VALUE;
 8007350:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007354:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007356:	e04d      	b.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
              frequency = 0;
 8007358:	2300      	movs	r3, #0
 800735a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800735c:	e04a      	b.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800735e:	4b26      	ldr	r3, [pc, #152]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 8007360:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007364:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007368:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800736c:	d103      	bne.n	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0x1982>
            {
              frequency = LSI_VALUE;
 800736e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007372:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007374:	e03e      	b.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
              frequency = 0;
 8007376:	2300      	movs	r3, #0
 8007378:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800737a:	e03b      	b.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800737c:	4b1e      	ldr	r3, [pc, #120]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800737e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007382:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007386:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007388:	4b1b      	ldr	r3, [pc, #108]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 0302 	and.w	r3, r3, #2
 8007390:	2b02      	cmp	r3, #2
 8007392:	d10c      	bne.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x19ba>
 8007394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007396:	2b00      	cmp	r3, #0
 8007398:	d109      	bne.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x19ba>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800739a:	4b17      	ldr	r3, [pc, #92]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	08db      	lsrs	r3, r3, #3
 80073a0:	f003 0303 	and.w	r3, r3, #3
 80073a4:	4a15      	ldr	r2, [pc, #84]	@ (80073fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a08>)
 80073a6:	fa22 f303 	lsr.w	r3, r2, r3
 80073aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80073ac:	e01e      	b.n	80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x19f8>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80073ae:	4b12      	ldr	r3, [pc, #72]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073ba:	d106      	bne.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x19d6>
 80073bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073c2:	d102      	bne.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x19d6>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80073c4:	4b0e      	ldr	r3, [pc, #56]	@ (8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0c>)
 80073c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80073c8:	e010      	b.n	80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x19f8>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80073ca:	4b0b      	ldr	r3, [pc, #44]	@ (80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a04>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073d6:	d106      	bne.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0x19f2>
 80073d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073de:	d102      	bne.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0x19f2>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80073e0:	4b08      	ldr	r3, [pc, #32]	@ (8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x1a10>)
 80073e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80073e4:	e002      	b.n	80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x19f8>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80073e6:	2300      	movs	r3, #0
 80073e8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80073ea:	e003      	b.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
 80073ec:	e002      	b.n	80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a00>
          }
          default :
          {
            frequency = 0U;
 80073ee:	2300      	movs	r3, #0
 80073f0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80073f2:	bf00      	nop
          }
        }
        break;
 80073f4:	f000 be15 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 80073f8:	44020c00 	.word	0x44020c00
 80073fc:	03d09000 	.word	0x03d09000
 8007400:	003d0900 	.word	0x003d0900
 8007404:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8007408:	4b9e      	ldr	r3, [pc, #632]	@ (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800740a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800740e:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8007412:	633b      	str	r3, [r7, #48]	@ 0x30
 8007414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007416:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800741a:	d056      	beq.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x1ad6>
 800741c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800741e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8007422:	f200 808b 	bhi.w	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
 8007426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007428:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800742c:	d03e      	beq.n	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x1ab8>
 800742e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007430:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007434:	f200 8082 	bhi.w	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
 8007438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800743a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800743e:	d027      	beq.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x1a9c>
 8007440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007442:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007446:	d879      	bhi.n	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
 8007448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800744a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800744e:	d017      	beq.n	8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8c>
 8007450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007452:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007456:	d871      	bhi.n	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>
 8007458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800745a:	2b00      	cmp	r3, #0
 800745c:	d004      	beq.n	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>
 800745e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007460:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007464:	d004      	beq.n	8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8007466:	e069      	b.n	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x1b48>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007468:	f7fb ff2a 	bl	80032c0 <HAL_RCC_GetPCLK3Freq>
 800746c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800746e:	e068      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007470:	f107 0314 	add.w	r3, r7, #20
 8007474:	4618      	mov	r0, r3
 8007476:	f7fd ffe9 	bl	800544c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800747e:	e060      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007480:	f107 0308 	add.w	r3, r7, #8
 8007484:	4618      	mov	r0, r3
 8007486:	f7fe f94b 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800748e:	e058      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007490:	4b7c      	ldr	r3, [pc, #496]	@ (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007492:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007496:	f003 0302 	and.w	r3, r3, #2
 800749a:	2b02      	cmp	r3, #2
 800749c:	d103      	bne.n	80074a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ab2>
            {
              frequency = LSE_VALUE;
 800749e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074a2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80074a4:	e04d      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
              frequency = 0;
 80074a6:	2300      	movs	r3, #0
 80074a8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80074aa:	e04a      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80074ac:	4b75      	ldr	r3, [pc, #468]	@ (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 80074ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074ba:	d103      	bne.n	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ad0>
            {
              frequency = LSI_VALUE;
 80074bc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80074c0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80074c2:	e03e      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
              frequency = 0;
 80074c4:	2300      	movs	r3, #0
 80074c6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80074c8:	e03b      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80074ca:	4b6e      	ldr	r3, [pc, #440]	@ (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 80074cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80074d0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80074d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074d6:	4b6b      	ldr	r3, [pc, #428]	@ (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0302 	and.w	r3, r3, #2
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d10c      	bne.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x1b08>
 80074e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d109      	bne.n	80074fc <HAL_RCCEx_GetPeriphCLKFreq+0x1b08>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80074e8:	4b66      	ldr	r3, [pc, #408]	@ (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	08db      	lsrs	r3, r3, #3
 80074ee:	f003 0303 	and.w	r3, r3, #3
 80074f2:	4a65      	ldr	r2, [pc, #404]	@ (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x1c94>)
 80074f4:	fa22 f303 	lsr.w	r3, r2, r3
 80074f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80074fa:	e01e      	b.n	800753a <HAL_RCCEx_GetPeriphCLKFreq+0x1b46>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074fc:	4b61      	ldr	r3, [pc, #388]	@ (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007504:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007508:	d106      	bne.n	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x1b24>
 800750a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800750c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007510:	d102      	bne.n	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x1b24>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007512:	4b5e      	ldr	r3, [pc, #376]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0x1c98>)
 8007514:	637b      	str	r3, [r7, #52]	@ 0x34
 8007516:	e010      	b.n	800753a <HAL_RCCEx_GetPeriphCLKFreq+0x1b46>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007518:	4b5a      	ldr	r3, [pc, #360]	@ (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007520:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007524:	d106      	bne.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x1b40>
 8007526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007528:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800752c:	d102      	bne.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x1b40>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800752e:	4b58      	ldr	r3, [pc, #352]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x1c9c>)
 8007530:	637b      	str	r3, [r7, #52]	@ 0x34
 8007532:	e002      	b.n	800753a <HAL_RCCEx_GetPeriphCLKFreq+0x1b46>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007534:	2300      	movs	r3, #0
 8007536:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007538:	e003      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
 800753a:	e002      	b.n	8007542 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4e>
          }
          default :
          {
            frequency = 0U;
 800753c:	2300      	movs	r3, #0
 800753e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007540:	bf00      	nop
          }
        }
        break;
 8007542:	f000 bd6e 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8007546:	4b4f      	ldr	r3, [pc, #316]	@ (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007548:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800754c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8007550:	633b      	str	r3, [r7, #48]	@ 0x30
 8007552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007554:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007558:	d056      	beq.n	8007608 <HAL_RCCEx_GetPeriphCLKFreq+0x1c14>
 800755a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800755c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007560:	f200 808b 	bhi.w	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
 8007564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007566:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800756a:	d03e      	beq.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x1bf6>
 800756c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800756e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007572:	f200 8082 	bhi.w	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
 8007576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007578:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800757c:	d027      	beq.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x1bda>
 800757e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007580:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007584:	d879      	bhi.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
 8007586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007588:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800758c:	d017      	beq.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0x1bca>
 800758e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007590:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007594:	d871      	bhi.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>
 8007596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007598:	2b00      	cmp	r3, #0
 800759a:	d004      	beq.n	80075a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb2>
 800759c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800759e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80075a2:	d004      	beq.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 80075a4:	e069      	b.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x1c86>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80075a6:	f7fb fe8b 	bl	80032c0 <HAL_RCC_GetPCLK3Freq>
 80075aa:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80075ac:	e068      	b.n	8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075ae:	f107 0314 	add.w	r3, r7, #20
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7fd ff4a 	bl	800544c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80075bc:	e060      	b.n	8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075be:	f107 0308 	add.w	r3, r7, #8
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7fe f8ac 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80075cc:	e058      	b.n	8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80075ce:	4b2d      	ldr	r3, [pc, #180]	@ (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 80075d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075d4:	f003 0302 	and.w	r3, r3, #2
 80075d8:	2b02      	cmp	r3, #2
 80075da:	d103      	bne.n	80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bf0>
            {
              frequency = LSE_VALUE;
 80075dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075e0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80075e2:	e04d      	b.n	8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
              frequency = 0;
 80075e4:	2300      	movs	r3, #0
 80075e6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80075e8:	e04a      	b.n	8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80075ea:	4b26      	ldr	r3, [pc, #152]	@ (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 80075ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075f8:	d103      	bne.n	8007602 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0e>
            {
              frequency = LSI_VALUE;
 80075fa:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80075fe:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007600:	e03e      	b.n	8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
              frequency = 0;
 8007602:	2300      	movs	r3, #0
 8007604:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007606:	e03b      	b.n	8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007608:	4b1e      	ldr	r3, [pc, #120]	@ (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800760a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800760e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007612:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007614:	4b1b      	ldr	r3, [pc, #108]	@ (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 0302 	and.w	r3, r3, #2
 800761c:	2b02      	cmp	r3, #2
 800761e:	d10c      	bne.n	800763a <HAL_RCCEx_GetPeriphCLKFreq+0x1c46>
 8007620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007622:	2b00      	cmp	r3, #0
 8007624:	d109      	bne.n	800763a <HAL_RCCEx_GetPeriphCLKFreq+0x1c46>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007626:	4b17      	ldr	r3, [pc, #92]	@ (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	08db      	lsrs	r3, r3, #3
 800762c:	f003 0303 	and.w	r3, r3, #3
 8007630:	4a15      	ldr	r2, [pc, #84]	@ (8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x1c94>)
 8007632:	fa22 f303 	lsr.w	r3, r2, r3
 8007636:	637b      	str	r3, [r7, #52]	@ 0x34
 8007638:	e01e      	b.n	8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x1c84>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800763a:	4b12      	ldr	r3, [pc, #72]	@ (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007642:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007646:	d106      	bne.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x1c62>
 8007648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800764a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800764e:	d102      	bne.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x1c62>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007650:	4b0e      	ldr	r3, [pc, #56]	@ (800768c <HAL_RCCEx_GetPeriphCLKFreq+0x1c98>)
 8007652:	637b      	str	r3, [r7, #52]	@ 0x34
 8007654:	e010      	b.n	8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x1c84>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007656:	4b0b      	ldr	r3, [pc, #44]	@ (8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x1c90>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800765e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007662:	d106      	bne.n	8007672 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7e>
 8007664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007666:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800766a:	d102      	bne.n	8007672 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7e>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800766c:	4b08      	ldr	r3, [pc, #32]	@ (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x1c9c>)
 800766e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007670:	e002      	b.n	8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x1c84>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007672:	2300      	movs	r3, #0
 8007674:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007676:	e003      	b.n	8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
 8007678:	e002      	b.n	8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8c>
          }
          default :
          {
            frequency = 0U;
 800767a:	2300      	movs	r3, #0
 800767c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800767e:	bf00      	nop
          }
        }
        break;
 8007680:	f000 bccf 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007684:	44020c00 	.word	0x44020c00
 8007688:	03d09000 	.word	0x03d09000
 800768c:	003d0900 	.word	0x003d0900
 8007690:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8007694:	4b9e      	ldr	r3, [pc, #632]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007696:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800769a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800769e:	633b      	str	r3, [r7, #48]	@ 0x30
 80076a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076a6:	d056      	beq.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0x1d62>
 80076a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076ae:	f200 808b 	bhi.w	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
 80076b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076b8:	d03e      	beq.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x1d44>
 80076ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076c0:	f200 8082 	bhi.w	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
 80076c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80076ca:	d027      	beq.n	800771c <HAL_RCCEx_GetPeriphCLKFreq+0x1d28>
 80076cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80076d2:	d879      	bhi.n	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
 80076d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076da:	d017      	beq.n	800770c <HAL_RCCEx_GetPeriphCLKFreq+0x1d18>
 80076dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076e2:	d871      	bhi.n	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>
 80076e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d004      	beq.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>
 80076ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076f0:	d004      	beq.n	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 80076f2:	e069      	b.n	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd4>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80076f4:	f7fb fde4 	bl	80032c0 <HAL_RCC_GetPCLK3Freq>
 80076f8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80076fa:	e068      	b.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076fc:	f107 0314 	add.w	r3, r7, #20
 8007700:	4618      	mov	r0, r3
 8007702:	f7fd fea3 	bl	800544c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800770a:	e060      	b.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800770c:	f107 0308 	add.w	r3, r7, #8
 8007710:	4618      	mov	r0, r3
 8007712:	f7fe f805 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800771a:	e058      	b.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800771c:	4b7c      	ldr	r3, [pc, #496]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800771e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007722:	f003 0302 	and.w	r3, r3, #2
 8007726:	2b02      	cmp	r3, #2
 8007728:	d103      	bne.n	8007732 <HAL_RCCEx_GetPeriphCLKFreq+0x1d3e>
            {
              frequency = LSE_VALUE;
 800772a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800772e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007730:	e04d      	b.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
              frequency = 0;
 8007732:	2300      	movs	r3, #0
 8007734:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007736:	e04a      	b.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007738:	4b75      	ldr	r3, [pc, #468]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800773a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800773e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007742:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007746:	d103      	bne.n	8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x1d5c>
            {
              frequency = LSI_VALUE;
 8007748:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800774c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800774e:	e03e      	b.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
              frequency = 0;
 8007750:	2300      	movs	r3, #0
 8007752:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007754:	e03b      	b.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007756:	4b6e      	ldr	r3, [pc, #440]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007758:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800775c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007760:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007762:	4b6b      	ldr	r3, [pc, #428]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 0302 	and.w	r3, r3, #2
 800776a:	2b02      	cmp	r3, #2
 800776c:	d10c      	bne.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x1d94>
 800776e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007770:	2b00      	cmp	r3, #0
 8007772:	d109      	bne.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x1d94>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007774:	4b66      	ldr	r3, [pc, #408]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	08db      	lsrs	r3, r3, #3
 800777a:	f003 0303 	and.w	r3, r3, #3
 800777e:	4a65      	ldr	r2, [pc, #404]	@ (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x1f20>)
 8007780:	fa22 f303 	lsr.w	r3, r2, r3
 8007784:	637b      	str	r3, [r7, #52]	@ 0x34
 8007786:	e01e      	b.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007788:	4b61      	ldr	r3, [pc, #388]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007790:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007794:	d106      	bne.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1db0>
 8007796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007798:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800779c:	d102      	bne.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1db0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800779e:	4b5e      	ldr	r3, [pc, #376]	@ (8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x1f24>)
 80077a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80077a2:	e010      	b.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80077a4:	4b5a      	ldr	r3, [pc, #360]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077b0:	d106      	bne.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dcc>
 80077b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80077b8:	d102      	bne.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dcc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80077ba:	4b58      	ldr	r3, [pc, #352]	@ (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x1f28>)
 80077bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80077be:	e002      	b.n	80077c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1dd2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80077c0:	2300      	movs	r3, #0
 80077c2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80077c4:	e003      	b.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
 80077c6:	e002      	b.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0x1dda>
          }
          default :
          {
            frequency = 0U;
 80077c8:	2300      	movs	r3, #0
 80077ca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80077cc:	bf00      	nop
          }
        }
        break;
 80077ce:	f000 bc28 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80077d2:	4b4f      	ldr	r3, [pc, #316]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 80077d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80077d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077dc:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80077de:	4b4c      	ldr	r3, [pc, #304]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077ea:	d106      	bne.n	80077fa <HAL_RCCEx_GetPeriphCLKFreq+0x1e06>
 80077ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d103      	bne.n	80077fa <HAL_RCCEx_GetPeriphCLKFreq+0x1e06>
        {
          frequency = HSE_VALUE;
 80077f2:	4b4a      	ldr	r3, [pc, #296]	@ (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x1f28>)
 80077f4:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80077f6:	f000 bc14 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80077fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007800:	d108      	bne.n	8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x1e20>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007802:	f107 0320 	add.w	r3, r7, #32
 8007806:	4618      	mov	r0, r3
 8007808:	f7fd fcb6 	bl	8005178 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800780c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007810:	f000 bc07 	b.w	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8007814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007816:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800781a:	d107      	bne.n	800782c <HAL_RCCEx_GetPeriphCLKFreq+0x1e38>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800781c:	f107 0314 	add.w	r3, r7, #20
 8007820:	4618      	mov	r0, r3
 8007822:	f7fd fe13 	bl	800544c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800782a:	e3fa      	b.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
          frequency = 0U;
 800782c:	2300      	movs	r3, #0
 800782e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007830:	e3f7      	b.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007832:	4b37      	ldr	r3, [pc, #220]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007838:	f003 0307 	and.w	r3, r3, #7
 800783c:	633b      	str	r3, [r7, #48]	@ 0x30
 800783e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007840:	2b04      	cmp	r3, #4
 8007842:	d861      	bhi.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x1f14>
 8007844:	a201      	add	r2, pc, #4	@ (adr r2, 800784c <HAL_RCCEx_GetPeriphCLKFreq+0x1e58>)
 8007846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784a:	bf00      	nop
 800784c:	08007861 	.word	0x08007861
 8007850:	08007871 	.word	0x08007871
 8007854:	08007881 	.word	0x08007881
 8007858:	08007891 	.word	0x08007891
 800785c:	08007897 	.word	0x08007897
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007860:	f107 0320 	add.w	r3, r7, #32
 8007864:	4618      	mov	r0, r3
 8007866:	f7fd fc87 	bl	8005178 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800786a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800786e:	e04e      	b.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007870:	f107 0314 	add.w	r3, r7, #20
 8007874:	4618      	mov	r0, r3
 8007876:	f7fd fde9 	bl	800544c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800787e:	e046      	b.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007880:	f107 0308 	add.w	r3, r7, #8
 8007884:	4618      	mov	r0, r3
 8007886:	f7fd ff4b 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800788e:	e03e      	b.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007890:	4b23      	ldr	r3, [pc, #140]	@ (8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x1f2c>)
 8007892:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007894:	e03b      	b.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007896:	4b1e      	ldr	r3, [pc, #120]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 8007898:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800789c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80078a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078a2:	4b1b      	ldr	r3, [pc, #108]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 0302 	and.w	r3, r3, #2
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d10c      	bne.n	80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ed4>
 80078ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d109      	bne.n	80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ed4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80078b4:	4b16      	ldr	r3, [pc, #88]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	08db      	lsrs	r3, r3, #3
 80078ba:	f003 0303 	and.w	r3, r3, #3
 80078be:	4a15      	ldr	r2, [pc, #84]	@ (8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x1f20>)
 80078c0:	fa22 f303 	lsr.w	r3, r2, r3
 80078c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80078c6:	e01e      	b.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0x1f12>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078c8:	4b11      	ldr	r3, [pc, #68]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078d4:	d106      	bne.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ef0>
 80078d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078dc:	d102      	bne.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ef0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80078de:	4b0e      	ldr	r3, [pc, #56]	@ (8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x1f24>)
 80078e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80078e2:	e010      	b.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0x1f12>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80078e4:	4b0a      	ldr	r3, [pc, #40]	@ (8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x1f1c>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078f0:	d106      	bne.n	8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0c>
 80078f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078f8:	d102      	bne.n	8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80078fa:	4b08      	ldr	r3, [pc, #32]	@ (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x1f28>)
 80078fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80078fe:	e002      	b.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0x1f12>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007900:	2300      	movs	r3, #0
 8007902:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007904:	e003      	b.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
 8007906:	e002      	b.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x1f1a>
          }
          default:
          {
            frequency = 0;
 8007908:	2300      	movs	r3, #0
 800790a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800790c:	bf00      	nop
          }
        }
        break;
 800790e:	e388      	b.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007910:	44020c00 	.word	0x44020c00
 8007914:	03d09000 	.word	0x03d09000
 8007918:	003d0900 	.word	0x003d0900
 800791c:	017d7840 	.word	0x017d7840
 8007920:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007924:	4ba9      	ldr	r3, [pc, #676]	@ (8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8007926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800792a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800792e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007932:	2b20      	cmp	r3, #32
 8007934:	f200 809a 	bhi.w	8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2078>
 8007938:	a201      	add	r2, pc, #4	@ (adr r2, 8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4c>)
 800793a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793e:	bf00      	nop
 8007940:	080079c5 	.word	0x080079c5
 8007944:	08007a6d 	.word	0x08007a6d
 8007948:	08007a6d 	.word	0x08007a6d
 800794c:	08007a6d 	.word	0x08007a6d
 8007950:	08007a6d 	.word	0x08007a6d
 8007954:	08007a6d 	.word	0x08007a6d
 8007958:	08007a6d 	.word	0x08007a6d
 800795c:	08007a6d 	.word	0x08007a6d
 8007960:	080079d5 	.word	0x080079d5
 8007964:	08007a6d 	.word	0x08007a6d
 8007968:	08007a6d 	.word	0x08007a6d
 800796c:	08007a6d 	.word	0x08007a6d
 8007970:	08007a6d 	.word	0x08007a6d
 8007974:	08007a6d 	.word	0x08007a6d
 8007978:	08007a6d 	.word	0x08007a6d
 800797c:	08007a6d 	.word	0x08007a6d
 8007980:	080079e5 	.word	0x080079e5
 8007984:	08007a6d 	.word	0x08007a6d
 8007988:	08007a6d 	.word	0x08007a6d
 800798c:	08007a6d 	.word	0x08007a6d
 8007990:	08007a6d 	.word	0x08007a6d
 8007994:	08007a6d 	.word	0x08007a6d
 8007998:	08007a6d 	.word	0x08007a6d
 800799c:	08007a6d 	.word	0x08007a6d
 80079a0:	080079f5 	.word	0x080079f5
 80079a4:	08007a6d 	.word	0x08007a6d
 80079a8:	08007a6d 	.word	0x08007a6d
 80079ac:	08007a6d 	.word	0x08007a6d
 80079b0:	08007a6d 	.word	0x08007a6d
 80079b4:	08007a6d 	.word	0x08007a6d
 80079b8:	08007a6d 	.word	0x08007a6d
 80079bc:	08007a6d 	.word	0x08007a6d
 80079c0:	080079fb 	.word	0x080079fb
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079c4:	f107 0320 	add.w	r3, r7, #32
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7fd fbd5 	bl	8005178 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80079ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80079d2:	e04e      	b.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079d4:	f107 0314 	add.w	r3, r7, #20
 80079d8:	4618      	mov	r0, r3
 80079da:	f7fd fd37 	bl	800544c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80079e2:	e046      	b.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079e4:	f107 0308 	add.w	r3, r7, #8
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7fd fe99 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80079f2:	e03e      	b.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80079f4:	4b76      	ldr	r3, [pc, #472]	@ (8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x21dc>)
 80079f6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80079f8:	e03b      	b.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80079fa:	4b74      	ldr	r3, [pc, #464]	@ (8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 80079fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a00:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007a04:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a06:	4b71      	ldr	r3, [pc, #452]	@ (8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 0302 	and.w	r3, r3, #2
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d10c      	bne.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x2038>
 8007a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d109      	bne.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x2038>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a18:	4b6c      	ldr	r3, [pc, #432]	@ (8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	08db      	lsrs	r3, r3, #3
 8007a1e:	f003 0303 	and.w	r3, r3, #3
 8007a22:	4a6c      	ldr	r2, [pc, #432]	@ (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x21e0>)
 8007a24:	fa22 f303 	lsr.w	r3, r2, r3
 8007a28:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a2a:	e01e      	b.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x2076>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a2c:	4b67      	ldr	r3, [pc, #412]	@ (8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a38:	d106      	bne.n	8007a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2054>
 8007a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a40:	d102      	bne.n	8007a48 <HAL_RCCEx_GetPeriphCLKFreq+0x2054>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007a42:	4b65      	ldr	r3, [pc, #404]	@ (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x21e4>)
 8007a44:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a46:	e010      	b.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x2076>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a48:	4b60      	ldr	r3, [pc, #384]	@ (8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a54:	d106      	bne.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x2070>
 8007a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a5c:	d102      	bne.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x2070>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007a5e:	4b5f      	ldr	r3, [pc, #380]	@ (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x21e8>)
 8007a60:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a62:	e002      	b.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x2076>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007a64:	2300      	movs	r3, #0
 8007a66:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007a68:	e003      	b.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
 8007a6a:	e002      	b.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x207e>
          }
          default:
          {
            frequency = 0;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a70:	bf00      	nop
          }
        }
        break;
 8007a72:	e2d6      	b.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007a74:	4b55      	ldr	r3, [pc, #340]	@ (8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8007a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a7a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007a7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a86:	d031      	beq.n	8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x20f8>
 8007a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a8e:	d866      	bhi.n	8007b5e <HAL_RCCEx_GetPeriphCLKFreq+0x216a>
 8007a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a92:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a94:	d027      	beq.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x20f2>
 8007a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a98:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a9a:	d860      	bhi.n	8007b5e <HAL_RCCEx_GetPeriphCLKFreq+0x216a>
 8007a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a9e:	2b80      	cmp	r3, #128	@ 0x80
 8007aa0:	d019      	beq.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e2>
 8007aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa4:	2b80      	cmp	r3, #128	@ 0x80
 8007aa6:	d85a      	bhi.n	8007b5e <HAL_RCCEx_GetPeriphCLKFreq+0x216a>
 8007aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d003      	beq.n	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x20c2>
 8007aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab0:	2b40      	cmp	r3, #64	@ 0x40
 8007ab2:	d008      	beq.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x20d2>
 8007ab4:	e053      	b.n	8007b5e <HAL_RCCEx_GetPeriphCLKFreq+0x216a>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ab6:	f107 0320 	add.w	r3, r7, #32
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7fd fb5c 	bl	8005178 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007ac4:	e04e      	b.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ac6:	f107 0314 	add.w	r3, r7, #20
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7fd fcbe 	bl	800544c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007ad4:	e046      	b.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ad6:	f107 0308 	add.w	r3, r7, #8
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fd fe20 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007ae4:	e03e      	b.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007ae6:	4b3a      	ldr	r3, [pc, #232]	@ (8007bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x21dc>)
 8007ae8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007aea:	e03b      	b.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007aec:	4b37      	ldr	r3, [pc, #220]	@ (8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8007aee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007af2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007af6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007af8:	4b34      	ldr	r3, [pc, #208]	@ (8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 0302 	and.w	r3, r3, #2
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d10c      	bne.n	8007b1e <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8007b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d109      	bne.n	8007b1e <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b0a:	4b30      	ldr	r3, [pc, #192]	@ (8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	08db      	lsrs	r3, r3, #3
 8007b10:	f003 0303 	and.w	r3, r3, #3
 8007b14:	4a2f      	ldr	r2, [pc, #188]	@ (8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x21e0>)
 8007b16:	fa22 f303 	lsr.w	r3, r2, r3
 8007b1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b1c:	e01e      	b.n	8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2168>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b1e:	4b2b      	ldr	r3, [pc, #172]	@ (8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b2a:	d106      	bne.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x2146>
 8007b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b32:	d102      	bne.n	8007b3a <HAL_RCCEx_GetPeriphCLKFreq+0x2146>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007b34:	4b28      	ldr	r3, [pc, #160]	@ (8007bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x21e4>)
 8007b36:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b38:	e010      	b.n	8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2168>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b3a:	4b24      	ldr	r3, [pc, #144]	@ (8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b46:	d106      	bne.n	8007b56 <HAL_RCCEx_GetPeriphCLKFreq+0x2162>
 8007b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b4e:	d102      	bne.n	8007b56 <HAL_RCCEx_GetPeriphCLKFreq+0x2162>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007b50:	4b22      	ldr	r3, [pc, #136]	@ (8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x21e8>)
 8007b52:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b54:	e002      	b.n	8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2168>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007b56:	2300      	movs	r3, #0
 8007b58:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007b5a:	e003      	b.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
 8007b5c:	e002      	b.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x2170>
          }
          default:
          {
            frequency = 0;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007b62:	bf00      	nop
          }
        }
        break;
 8007b64:	e25d      	b.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8007b66:	4b19      	ldr	r3, [pc, #100]	@ (8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8007b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b6c:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8007b70:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8007b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d103      	bne.n	8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x218c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007b78:	f7fb fb8c 	bl	8003294 <HAL_RCC_GetPCLK2Freq>
 8007b7c:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007b7e:	e250      	b.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8007b80:	4b12      	ldr	r3, [pc, #72]	@ (8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b88:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b8c:	d10b      	bne.n	8007ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x21b2>
 8007b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b94:	d107      	bne.n	8007ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x21b2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b96:	f107 0314 	add.w	r3, r7, #20
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7fd fc56 	bl	800544c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ba4:	e04f      	b.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8007ba6:	4b09      	ldr	r3, [pc, #36]	@ (8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007bae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bb2:	d115      	bne.n	8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x21ec>
 8007bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bba:	d111      	bne.n	8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x21ec>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bbc:	f107 0308 	add.w	r3, r7, #8
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7fd fdad 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bca:	e03c      	b.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
 8007bcc:	44020c00 	.word	0x44020c00
 8007bd0:	00bb8000 	.word	0x00bb8000
 8007bd4:	03d09000 	.word	0x03d09000
 8007bd8:	003d0900 	.word	0x003d0900
 8007bdc:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8007be0:	4b94      	ldr	r3, [pc, #592]	@ (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 0302 	and.w	r3, r3, #2
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d10d      	bne.n	8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2214>
 8007bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bee:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007bf2:	d109      	bne.n	8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2214>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007bf4:	4b8f      	ldr	r3, [pc, #572]	@ (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	08db      	lsrs	r3, r3, #3
 8007bfa:	f003 0303 	and.w	r3, r3, #3
 8007bfe:	4a8e      	ldr	r2, [pc, #568]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x2444>)
 8007c00:	fa22 f303 	lsr.w	r3, r2, r3
 8007c04:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c06:	e01e      	b.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8007c08:	4b8a      	ldr	r3, [pc, #552]	@ (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c14:	d106      	bne.n	8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x2230>
 8007c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c1c:	d102      	bne.n	8007c24 <HAL_RCCEx_GetPeriphCLKFreq+0x2230>
          frequency = CSI_VALUE;
 8007c1e:	4b87      	ldr	r3, [pc, #540]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2448>)
 8007c20:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c22:	e010      	b.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8007c24:	4b83      	ldr	r3, [pc, #524]	@ (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c30:	d106      	bne.n	8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>
 8007c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c34:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007c38:	d102      	bne.n	8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>
          frequency = HSE_VALUE;
 8007c3a:	4b81      	ldr	r3, [pc, #516]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x244c>)
 8007c3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c3e:	e002      	b.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x2252>
          frequency = 0U;
 8007c40:	2300      	movs	r3, #0
 8007c42:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c44:	e1ed      	b.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007c46:	e1ec      	b.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8007c48:	4b7a      	ldr	r3, [pc, #488]	@ (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c4e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007c52:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8007c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d103      	bne.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x226e>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007c5a:	f7fb fb31 	bl	80032c0 <HAL_RCC_GetPCLK3Freq>
 8007c5e:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007c60:	e1df      	b.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8007c62:	4b74      	ldr	r3, [pc, #464]	@ (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c6e:	d10b      	bne.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2294>
 8007c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c76:	d107      	bne.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2294>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c78:	f107 0314 	add.w	r3, r7, #20
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7fd fbe5 	bl	800544c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c86:	e045      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8007c88:	4b6a      	ldr	r3, [pc, #424]	@ (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c94:	d10b      	bne.n	8007cae <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8007c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c9c:	d107      	bne.n	8007cae <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c9e:	f107 0308 	add.w	r3, r7, #8
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7fd fd3c 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cac:	e032      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8007cae:	4b61      	ldr	r3, [pc, #388]	@ (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 0302 	and.w	r3, r3, #2
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d10d      	bne.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e2>
 8007cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cbc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007cc0:	d109      	bne.n	8007cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x22e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007cc2:	4b5c      	ldr	r3, [pc, #368]	@ (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	08db      	lsrs	r3, r3, #3
 8007cc8:	f003 0303 	and.w	r3, r3, #3
 8007ccc:	4a5a      	ldr	r2, [pc, #360]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x2444>)
 8007cce:	fa22 f303 	lsr.w	r3, r2, r3
 8007cd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cd4:	e01e      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8007cd6:	4b57      	ldr	r3, [pc, #348]	@ (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ce2:	d106      	bne.n	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x22fe>
 8007ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007cea:	d102      	bne.n	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x22fe>
          frequency = CSI_VALUE;
 8007cec:	4b53      	ldr	r3, [pc, #332]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2448>)
 8007cee:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cf0:	e010      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8007cf2:	4b50      	ldr	r3, [pc, #320]	@ (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cfa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007cfe:	d106      	bne.n	8007d0e <HAL_RCCEx_GetPeriphCLKFreq+0x231a>
 8007d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d02:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007d06:	d102      	bne.n	8007d0e <HAL_RCCEx_GetPeriphCLKFreq+0x231a>
          frequency = HSE_VALUE;
 8007d08:	4b4d      	ldr	r3, [pc, #308]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x244c>)
 8007d0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d0c:	e002      	b.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2320>
          frequency = 0U;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d12:	e186      	b.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007d14:	e185      	b.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007d16:	4b47      	ldr	r3, [pc, #284]	@ (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007d1c:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8007d20:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8007d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d103      	bne.n	8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x233c>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007d28:	f7fb fab4 	bl	8003294 <HAL_RCC_GetPCLK2Freq>
 8007d2c:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007d2e:	e178      	b.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8007d30:	4b40      	ldr	r3, [pc, #256]	@ (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d3c:	d10b      	bne.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x2362>
 8007d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d44:	d107      	bne.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x2362>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d46:	f107 0314 	add.w	r3, r7, #20
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fd fb7e 	bl	800544c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d54:	e045      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8007d56:	4b37      	ldr	r3, [pc, #220]	@ (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d62:	d10b      	bne.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
 8007d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d6a:	d107      	bne.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d6c:	f107 0308 	add.w	r3, r7, #8
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7fd fcd5 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d7a:	e032      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8007d7c:	4b2d      	ldr	r3, [pc, #180]	@ (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f003 0302 	and.w	r3, r3, #2
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	d10d      	bne.n	8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x23b0>
 8007d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d8a:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007d8e:	d109      	bne.n	8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x23b0>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d90:	4b28      	ldr	r3, [pc, #160]	@ (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	08db      	lsrs	r3, r3, #3
 8007d96:	f003 0303 	and.w	r3, r3, #3
 8007d9a:	4a27      	ldr	r2, [pc, #156]	@ (8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x2444>)
 8007d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8007da0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007da2:	e01e      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8007da4:	4b23      	ldr	r3, [pc, #140]	@ (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007dac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007db0:	d106      	bne.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x23cc>
 8007db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007db8:	d102      	bne.n	8007dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x23cc>
          frequency = CSI_VALUE;
 8007dba:	4b20      	ldr	r3, [pc, #128]	@ (8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2448>)
 8007dbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dbe:	e010      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8007dc0:	4b1c      	ldr	r3, [pc, #112]	@ (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007dcc:	d106      	bne.n	8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x23e8>
 8007dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007dd4:	d102      	bne.n	8007ddc <HAL_RCCEx_GetPeriphCLKFreq+0x23e8>
          frequency = HSE_VALUE;
 8007dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x244c>)
 8007dd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dda:	e002      	b.n	8007de2 <HAL_RCCEx_GetPeriphCLKFreq+0x23ee>
          frequency = 0U;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007de0:	e11f      	b.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007de2:	e11e      	b.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007de4:	4b13      	ldr	r3, [pc, #76]	@ (8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2440>)
 8007de6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007dea:	f003 0303 	and.w	r3, r3, #3
 8007dee:	633b      	str	r3, [r7, #48]	@ 0x30
 8007df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df2:	2b03      	cmp	r3, #3
 8007df4:	d85f      	bhi.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x24c2>
 8007df6:	a201      	add	r2, pc, #4	@ (adr r2, 8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2408>)
 8007df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfc:	08007e0d 	.word	0x08007e0d
 8007e00:	08007e15 	.word	0x08007e15
 8007e04:	08007e25 	.word	0x08007e25
 8007e08:	08007e45 	.word	0x08007e45

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8007e0c:	f7fb fa10 	bl	8003230 <HAL_RCC_GetHCLKFreq>
 8007e10:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8007e12:	e053      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e14:	f107 0320 	add.w	r3, r7, #32
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7fd f9ad 	bl	8005178 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e20:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007e22:	e04b      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e24:	f107 0314 	add.w	r3, r7, #20
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7fd fb0f 	bl	800544c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007e32:	e043      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
 8007e34:	44020c00 	.word	0x44020c00
 8007e38:	03d09000 	.word	0x03d09000
 8007e3c:	003d0900 	.word	0x003d0900
 8007e40:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007e44:	4b79      	ldr	r3, [pc, #484]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007e46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e4a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007e50:	4b76      	ldr	r3, [pc, #472]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f003 0302 	and.w	r3, r3, #2
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d10c      	bne.n	8007e76 <HAL_RCCEx_GetPeriphCLKFreq+0x2482>
 8007e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d109      	bne.n	8007e76 <HAL_RCCEx_GetPeriphCLKFreq+0x2482>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e62:	4b72      	ldr	r3, [pc, #456]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	08db      	lsrs	r3, r3, #3
 8007e68:	f003 0303 	and.w	r3, r3, #3
 8007e6c:	4a70      	ldr	r2, [pc, #448]	@ (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x263c>)
 8007e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e72:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e74:	e01e      	b.n	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24c0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007e76:	4b6d      	ldr	r3, [pc, #436]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e82:	d106      	bne.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0x249e>
 8007e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e8a:	d102      	bne.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0x249e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007e8c:	4b69      	ldr	r3, [pc, #420]	@ (8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x2640>)
 8007e8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e90:	e010      	b.n	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24c0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e92:	4b66      	ldr	r3, [pc, #408]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007e9e:	d106      	bne.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0x24ba>
 8007ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ea2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ea6:	d102      	bne.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0x24ba>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007ea8:	4b63      	ldr	r3, [pc, #396]	@ (8008038 <HAL_RCCEx_GetPeriphCLKFreq+0x2644>)
 8007eaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eac:	e002      	b.n	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x24c0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007eb2:	e003      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
 8007eb4:	e002      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x24c8>
          }
          default:
          {
            frequency = 0U;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007eba:	bf00      	nop
          }
        }
        break;
 8007ebc:	e0b1      	b.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8007ebe:	4b5b      	ldr	r3, [pc, #364]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007ec0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007ec4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007ec8:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8007eca:	4b58      	ldr	r3, [pc, #352]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007ecc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ed0:	f003 0302 	and.w	r3, r3, #2
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	d106      	bne.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x24f2>
 8007ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d103      	bne.n	8007ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x24f2>
        {
          frequency = LSE_VALUE;
 8007ede:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ee2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ee4:	e01f      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8007ee6:	4b51      	ldr	r3, [pc, #324]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007ee8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007eec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ef0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ef4:	d106      	bne.n	8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2510>
 8007ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef8:	2b40      	cmp	r3, #64	@ 0x40
 8007efa:	d103      	bne.n	8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0x2510>
        {
          frequency = LSI_VALUE;
 8007efc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007f00:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f02:	e010      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8007f04:	4b49      	ldr	r3, [pc, #292]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f10:	d106      	bne.n	8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x252c>
 8007f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f14:	2b80      	cmp	r3, #128	@ 0x80
 8007f16:	d103      	bne.n	8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x252c>
        {
          frequency = CSI_VALUE / 122U;
 8007f18:	f248 0312 	movw	r3, #32786	@ 0x8012
 8007f1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f1e:	e002      	b.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8007f20:	2300      	movs	r3, #0
 8007f22:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8007f24:	e07d      	b.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007f26:	e07c      	b.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007f28:	4b40      	ldr	r3, [pc, #256]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007f2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f2e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007f32:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007f34:	4b3d      	ldr	r3, [pc, #244]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007f3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f40:	d105      	bne.n	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8007f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d102      	bne.n	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = HSI48_VALUE;
 8007f48:	4b3c      	ldr	r3, [pc, #240]	@ (800803c <HAL_RCCEx_GetPeriphCLKFreq+0x2648>)
 8007f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f4c:	e031      	b.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x25be>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8007f4e:	4b37      	ldr	r3, [pc, #220]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f5a:	d10a      	bne.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0x257e>
 8007f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f5e:	2b10      	cmp	r3, #16
 8007f60:	d107      	bne.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0x257e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f62:	f107 0320 	add.w	r3, r7, #32
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7fd f906 	bl	8005178 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f70:	e01f      	b.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x25be>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8007f72:	4b2e      	ldr	r3, [pc, #184]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007f74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f78:	f003 0302 	and.w	r3, r3, #2
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	d106      	bne.n	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
 8007f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f82:	2b20      	cmp	r3, #32
 8007f84:	d103      	bne.n	8007f8e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        {
          frequency = LSE_VALUE;
 8007f86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f8c:	e011      	b.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x25be>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8007f8e:	4b27      	ldr	r3, [pc, #156]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007f90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f9c:	d106      	bne.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x25b8>
 8007f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa0:	2b30      	cmp	r3, #48	@ 0x30
 8007fa2:	d103      	bne.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x25b8>
        {
          frequency = LSI_VALUE;
 8007fa4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007fa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007faa:	e002      	b.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x25be>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8007fac:	2300      	movs	r3, #0
 8007fae:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8007fb0:	e037      	b.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 8007fb2:	e036      	b.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8007fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007fb6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007fba:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007fbe:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8007fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc2:	2b10      	cmp	r3, #16
 8007fc4:	d107      	bne.n	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e2>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fc6:	f107 0320 	add.w	r3, r7, #32
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fd f8d4 	bl	8005178 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8007fd4:	e025      	b.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8007fd6:	4b15      	ldr	r3, [pc, #84]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fe2:	d10a      	bne.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x2606>
 8007fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe6:	2b20      	cmp	r3, #32
 8007fe8:	d107      	bne.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x2606>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fea:	f107 0308 	add.w	r3, r7, #8
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7fd fb96 	bl	8005720 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ff8:	e00f      	b.n	800801a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8007ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800802c <HAL_RCCEx_GetPeriphCLKFreq+0x2638>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008002:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008006:	d105      	bne.n	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8008008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800800a:	2b30      	cmp	r3, #48	@ 0x30
 800800c:	d102      	bne.n	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = HSI48_VALUE;
 800800e:	4b0b      	ldr	r3, [pc, #44]	@ (800803c <HAL_RCCEx_GetPeriphCLKFreq+0x2648>)
 8008010:	637b      	str	r3, [r7, #52]	@ 0x34
 8008012:	e002      	b.n	800801a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8008014:	2300      	movs	r3, #0
 8008016:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8008018:	e003      	b.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>
 800801a:	e002      	b.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x262e>


      default:
        frequency = 0U;
 800801c:	2300      	movs	r3, #0
 800801e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008020:	bf00      	nop
    }
  }

  return (frequency);
 8008022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008024:	4618      	mov	r0, r3
 8008026:	373c      	adds	r7, #60	@ 0x3c
 8008028:	46bd      	mov	sp, r7
 800802a:	bd90      	pop	{r4, r7, pc}
 800802c:	44020c00 	.word	0x44020c00
 8008030:	03d09000 	.word	0x03d09000
 8008034:	003d0900 	.word	0x003d0900
 8008038:	017d7840 	.word	0x017d7840
 800803c:	02dc6c00 	.word	0x02dc6c00

08008040 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8008048:	4b48      	ldr	r3, [pc, #288]	@ (800816c <RCCEx_PLL2_Config+0x12c>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a47      	ldr	r2, [pc, #284]	@ (800816c <RCCEx_PLL2_Config+0x12c>)
 800804e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008052:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008054:	f7f9 fed2 	bl	8001dfc <HAL_GetTick>
 8008058:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800805a:	e008      	b.n	800806e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800805c:	f7f9 fece 	bl	8001dfc <HAL_GetTick>
 8008060:	4602      	mov	r2, r0
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	1ad3      	subs	r3, r2, r3
 8008066:	2b02      	cmp	r3, #2
 8008068:	d901      	bls.n	800806e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800806a:	2303      	movs	r3, #3
 800806c:	e07a      	b.n	8008164 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800806e:	4b3f      	ldr	r3, [pc, #252]	@ (800816c <RCCEx_PLL2_Config+0x12c>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1f0      	bne.n	800805c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800807a:	4b3c      	ldr	r3, [pc, #240]	@ (800816c <RCCEx_PLL2_Config+0x12c>)
 800807c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800807e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008082:	f023 0303 	bic.w	r3, r3, #3
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	6811      	ldr	r1, [r2, #0]
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	6852      	ldr	r2, [r2, #4]
 800808e:	0212      	lsls	r2, r2, #8
 8008090:	430a      	orrs	r2, r1
 8008092:	4936      	ldr	r1, [pc, #216]	@ (800816c <RCCEx_PLL2_Config+0x12c>)
 8008094:	4313      	orrs	r3, r2
 8008096:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	3b01      	subs	r3, #1
 800809e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	3b01      	subs	r3, #1
 80080a8:	025b      	lsls	r3, r3, #9
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	431a      	orrs	r2, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	3b01      	subs	r3, #1
 80080b4:	041b      	lsls	r3, r3, #16
 80080b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80080ba:	431a      	orrs	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	695b      	ldr	r3, [r3, #20]
 80080c0:	3b01      	subs	r3, #1
 80080c2:	061b      	lsls	r3, r3, #24
 80080c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80080c8:	4928      	ldr	r1, [pc, #160]	@ (800816c <RCCEx_PLL2_Config+0x12c>)
 80080ca:	4313      	orrs	r3, r2
 80080cc:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80080ce:	4b27      	ldr	r3, [pc, #156]	@ (800816c <RCCEx_PLL2_Config+0x12c>)
 80080d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d2:	f023 020c 	bic.w	r2, r3, #12
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	699b      	ldr	r3, [r3, #24]
 80080da:	4924      	ldr	r1, [pc, #144]	@ (800816c <RCCEx_PLL2_Config+0x12c>)
 80080dc:	4313      	orrs	r3, r2
 80080de:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80080e0:	4b22      	ldr	r3, [pc, #136]	@ (800816c <RCCEx_PLL2_Config+0x12c>)
 80080e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e4:	f023 0220 	bic.w	r2, r3, #32
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	69db      	ldr	r3, [r3, #28]
 80080ec:	491f      	ldr	r1, [pc, #124]	@ (800816c <RCCEx_PLL2_Config+0x12c>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80080f2:	4b1e      	ldr	r3, [pc, #120]	@ (800816c <RCCEx_PLL2_Config+0x12c>)
 80080f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080fa:	491c      	ldr	r1, [pc, #112]	@ (800816c <RCCEx_PLL2_Config+0x12c>)
 80080fc:	4313      	orrs	r3, r2
 80080fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8008100:	4b1a      	ldr	r3, [pc, #104]	@ (800816c <RCCEx_PLL2_Config+0x12c>)
 8008102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008104:	4a19      	ldr	r2, [pc, #100]	@ (800816c <RCCEx_PLL2_Config+0x12c>)
 8008106:	f023 0310 	bic.w	r3, r3, #16
 800810a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800810c:	4b17      	ldr	r3, [pc, #92]	@ (800816c <RCCEx_PLL2_Config+0x12c>)
 800810e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008110:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008114:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	6a12      	ldr	r2, [r2, #32]
 800811c:	00d2      	lsls	r2, r2, #3
 800811e:	4913      	ldr	r1, [pc, #76]	@ (800816c <RCCEx_PLL2_Config+0x12c>)
 8008120:	4313      	orrs	r3, r2
 8008122:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8008124:	4b11      	ldr	r3, [pc, #68]	@ (800816c <RCCEx_PLL2_Config+0x12c>)
 8008126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008128:	4a10      	ldr	r2, [pc, #64]	@ (800816c <RCCEx_PLL2_Config+0x12c>)
 800812a:	f043 0310 	orr.w	r3, r3, #16
 800812e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8008130:	4b0e      	ldr	r3, [pc, #56]	@ (800816c <RCCEx_PLL2_Config+0x12c>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a0d      	ldr	r2, [pc, #52]	@ (800816c <RCCEx_PLL2_Config+0x12c>)
 8008136:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800813a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800813c:	f7f9 fe5e 	bl	8001dfc <HAL_GetTick>
 8008140:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008142:	e008      	b.n	8008156 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008144:	f7f9 fe5a 	bl	8001dfc <HAL_GetTick>
 8008148:	4602      	mov	r2, r0
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	2b02      	cmp	r3, #2
 8008150:	d901      	bls.n	8008156 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e006      	b.n	8008164 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008156:	4b05      	ldr	r3, [pc, #20]	@ (800816c <RCCEx_PLL2_Config+0x12c>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d0f0      	beq.n	8008144 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8008162:	2300      	movs	r3, #0

}
 8008164:	4618      	mov	r0, r3
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	44020c00 	.word	0x44020c00

08008170 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8008178:	4b48      	ldr	r3, [pc, #288]	@ (800829c <RCCEx_PLL3_Config+0x12c>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a47      	ldr	r2, [pc, #284]	@ (800829c <RCCEx_PLL3_Config+0x12c>)
 800817e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008182:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008184:	f7f9 fe3a 	bl	8001dfc <HAL_GetTick>
 8008188:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800818a:	e008      	b.n	800819e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800818c:	f7f9 fe36 	bl	8001dfc <HAL_GetTick>
 8008190:	4602      	mov	r2, r0
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	1ad3      	subs	r3, r2, r3
 8008196:	2b02      	cmp	r3, #2
 8008198:	d901      	bls.n	800819e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800819a:	2303      	movs	r3, #3
 800819c:	e07a      	b.n	8008294 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800819e:	4b3f      	ldr	r3, [pc, #252]	@ (800829c <RCCEx_PLL3_Config+0x12c>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1f0      	bne.n	800818c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80081aa:	4b3c      	ldr	r3, [pc, #240]	@ (800829c <RCCEx_PLL3_Config+0x12c>)
 80081ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081ae:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80081b2:	f023 0303 	bic.w	r3, r3, #3
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	6811      	ldr	r1, [r2, #0]
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	6852      	ldr	r2, [r2, #4]
 80081be:	0212      	lsls	r2, r2, #8
 80081c0:	430a      	orrs	r2, r1
 80081c2:	4936      	ldr	r1, [pc, #216]	@ (800829c <RCCEx_PLL3_Config+0x12c>)
 80081c4:	4313      	orrs	r3, r2
 80081c6:	630b      	str	r3, [r1, #48]	@ 0x30
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	3b01      	subs	r3, #1
 80081ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	3b01      	subs	r3, #1
 80081d8:	025b      	lsls	r3, r3, #9
 80081da:	b29b      	uxth	r3, r3
 80081dc:	431a      	orrs	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	3b01      	subs	r3, #1
 80081e4:	041b      	lsls	r3, r3, #16
 80081e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80081ea:	431a      	orrs	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	695b      	ldr	r3, [r3, #20]
 80081f0:	3b01      	subs	r3, #1
 80081f2:	061b      	lsls	r3, r3, #24
 80081f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80081f8:	4928      	ldr	r1, [pc, #160]	@ (800829c <RCCEx_PLL3_Config+0x12c>)
 80081fa:	4313      	orrs	r3, r2
 80081fc:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80081fe:	4b27      	ldr	r3, [pc, #156]	@ (800829c <RCCEx_PLL3_Config+0x12c>)
 8008200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008202:	f023 020c 	bic.w	r2, r3, #12
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	699b      	ldr	r3, [r3, #24]
 800820a:	4924      	ldr	r1, [pc, #144]	@ (800829c <RCCEx_PLL3_Config+0x12c>)
 800820c:	4313      	orrs	r3, r2
 800820e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8008210:	4b22      	ldr	r3, [pc, #136]	@ (800829c <RCCEx_PLL3_Config+0x12c>)
 8008212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008214:	f023 0220 	bic.w	r2, r3, #32
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	69db      	ldr	r3, [r3, #28]
 800821c:	491f      	ldr	r1, [pc, #124]	@ (800829c <RCCEx_PLL3_Config+0x12c>)
 800821e:	4313      	orrs	r3, r2
 8008220:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008222:	4b1e      	ldr	r3, [pc, #120]	@ (800829c <RCCEx_PLL3_Config+0x12c>)
 8008224:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800822a:	491c      	ldr	r1, [pc, #112]	@ (800829c <RCCEx_PLL3_Config+0x12c>)
 800822c:	4313      	orrs	r3, r2
 800822e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8008230:	4b1a      	ldr	r3, [pc, #104]	@ (800829c <RCCEx_PLL3_Config+0x12c>)
 8008232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008234:	4a19      	ldr	r2, [pc, #100]	@ (800829c <RCCEx_PLL3_Config+0x12c>)
 8008236:	f023 0310 	bic.w	r3, r3, #16
 800823a:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800823c:	4b17      	ldr	r3, [pc, #92]	@ (800829c <RCCEx_PLL3_Config+0x12c>)
 800823e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008240:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008244:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	6a12      	ldr	r2, [r2, #32]
 800824c:	00d2      	lsls	r2, r2, #3
 800824e:	4913      	ldr	r1, [pc, #76]	@ (800829c <RCCEx_PLL3_Config+0x12c>)
 8008250:	4313      	orrs	r3, r2
 8008252:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8008254:	4b11      	ldr	r3, [pc, #68]	@ (800829c <RCCEx_PLL3_Config+0x12c>)
 8008256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008258:	4a10      	ldr	r2, [pc, #64]	@ (800829c <RCCEx_PLL3_Config+0x12c>)
 800825a:	f043 0310 	orr.w	r3, r3, #16
 800825e:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8008260:	4b0e      	ldr	r3, [pc, #56]	@ (800829c <RCCEx_PLL3_Config+0x12c>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a0d      	ldr	r2, [pc, #52]	@ (800829c <RCCEx_PLL3_Config+0x12c>)
 8008266:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800826a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800826c:	f7f9 fdc6 	bl	8001dfc <HAL_GetTick>
 8008270:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008272:	e008      	b.n	8008286 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008274:	f7f9 fdc2 	bl	8001dfc <HAL_GetTick>
 8008278:	4602      	mov	r2, r0
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	1ad3      	subs	r3, r2, r3
 800827e:	2b02      	cmp	r3, #2
 8008280:	d901      	bls.n	8008286 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8008282:	2303      	movs	r3, #3
 8008284:	e006      	b.n	8008294 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008286:	4b05      	ldr	r3, [pc, #20]	@ (800829c <RCCEx_PLL3_Config+0x12c>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800828e:	2b00      	cmp	r3, #0
 8008290:	d0f0      	beq.n	8008274 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	44020c00 	.word	0x44020c00

080082a0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d101      	bne.n	80082b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e162      	b.n	8008578 <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a70      	ldr	r2, [pc, #448]	@ (8008478 <HAL_SPI_Init+0x1d8>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d018      	beq.n	80082ee <HAL_SPI_Init+0x4e>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a6e      	ldr	r2, [pc, #440]	@ (800847c <HAL_SPI_Init+0x1dc>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d013      	beq.n	80082ee <HAL_SPI_Init+0x4e>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a6d      	ldr	r2, [pc, #436]	@ (8008480 <HAL_SPI_Init+0x1e0>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d00e      	beq.n	80082ee <HAL_SPI_Init+0x4e>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a6b      	ldr	r2, [pc, #428]	@ (8008484 <HAL_SPI_Init+0x1e4>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d009      	beq.n	80082ee <HAL_SPI_Init+0x4e>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a6a      	ldr	r2, [pc, #424]	@ (8008488 <HAL_SPI_Init+0x1e8>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d004      	beq.n	80082ee <HAL_SPI_Init+0x4e>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a68      	ldr	r2, [pc, #416]	@ (800848c <HAL_SPI_Init+0x1ec>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	e000      	b.n	80082f0 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 80082ee:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a5f      	ldr	r2, [pc, #380]	@ (8008478 <HAL_SPI_Init+0x1d8>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d018      	beq.n	8008332 <HAL_SPI_Init+0x92>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a5d      	ldr	r2, [pc, #372]	@ (800847c <HAL_SPI_Init+0x1dc>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d013      	beq.n	8008332 <HAL_SPI_Init+0x92>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a5c      	ldr	r2, [pc, #368]	@ (8008480 <HAL_SPI_Init+0x1e0>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d00e      	beq.n	8008332 <HAL_SPI_Init+0x92>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a5a      	ldr	r2, [pc, #360]	@ (8008484 <HAL_SPI_Init+0x1e4>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d009      	beq.n	8008332 <HAL_SPI_Init+0x92>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a59      	ldr	r2, [pc, #356]	@ (8008488 <HAL_SPI_Init+0x1e8>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d004      	beq.n	8008332 <HAL_SPI_Init+0x92>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a57      	ldr	r2, [pc, #348]	@ (800848c <HAL_SPI_Init+0x1ec>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d105      	bne.n	800833e <HAL_SPI_Init+0x9e>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	2b0f      	cmp	r3, #15
 8008338:	d901      	bls.n	800833e <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e11c      	b.n	8008578 <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f001 f816 	bl	8009370 <SPI_GetPacketSize>
 8008344:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a4b      	ldr	r2, [pc, #300]	@ (8008478 <HAL_SPI_Init+0x1d8>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d018      	beq.n	8008382 <HAL_SPI_Init+0xe2>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a49      	ldr	r2, [pc, #292]	@ (800847c <HAL_SPI_Init+0x1dc>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d013      	beq.n	8008382 <HAL_SPI_Init+0xe2>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a48      	ldr	r2, [pc, #288]	@ (8008480 <HAL_SPI_Init+0x1e0>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d00e      	beq.n	8008382 <HAL_SPI_Init+0xe2>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a46      	ldr	r2, [pc, #280]	@ (8008484 <HAL_SPI_Init+0x1e4>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d009      	beq.n	8008382 <HAL_SPI_Init+0xe2>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a45      	ldr	r2, [pc, #276]	@ (8008488 <HAL_SPI_Init+0x1e8>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d004      	beq.n	8008382 <HAL_SPI_Init+0xe2>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a43      	ldr	r2, [pc, #268]	@ (800848c <HAL_SPI_Init+0x1ec>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d102      	bne.n	8008388 <HAL_SPI_Init+0xe8>
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2b08      	cmp	r3, #8
 8008386:	d820      	bhi.n	80083ca <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800838c:	4a40      	ldr	r2, [pc, #256]	@ (8008490 <HAL_SPI_Init+0x1f0>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d018      	beq.n	80083c4 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a3f      	ldr	r2, [pc, #252]	@ (8008494 <HAL_SPI_Init+0x1f4>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d013      	beq.n	80083c4 <HAL_SPI_Init+0x124>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a3d      	ldr	r2, [pc, #244]	@ (8008498 <HAL_SPI_Init+0x1f8>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d00e      	beq.n	80083c4 <HAL_SPI_Init+0x124>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a3c      	ldr	r2, [pc, #240]	@ (800849c <HAL_SPI_Init+0x1fc>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d009      	beq.n	80083c4 <HAL_SPI_Init+0x124>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a3a      	ldr	r2, [pc, #232]	@ (80084a0 <HAL_SPI_Init+0x200>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d004      	beq.n	80083c4 <HAL_SPI_Init+0x124>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a39      	ldr	r2, [pc, #228]	@ (80084a4 <HAL_SPI_Init+0x204>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d104      	bne.n	80083ce <HAL_SPI_Init+0x12e>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2b10      	cmp	r3, #16
 80083c8:	d901      	bls.n	80083ce <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	e0d4      	b.n	8008578 <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d106      	bne.n	80083e8 <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7f8 ffaa 	bl	800133c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2202      	movs	r2, #2
 80083ec:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f022 0201 	bic.w	r2, r2, #1
 80083fe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800840a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	699b      	ldr	r3, [r3, #24]
 8008410:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008414:	d119      	bne.n	800844a <HAL_SPI_Init+0x1aa>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800841e:	d103      	bne.n	8008428 <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008424:	2b00      	cmp	r3, #0
 8008426:	d008      	beq.n	800843a <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800842c:	2b00      	cmp	r3, #0
 800842e:	d10c      	bne.n	800844a <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008434:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008438:	d107      	bne.n	800844a <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681a      	ldr	r2, [r3, #0]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008448:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008452:	2b00      	cmp	r3, #0
 8008454:	d028      	beq.n	80084a8 <HAL_SPI_Init+0x208>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	2b06      	cmp	r3, #6
 800845c:	d924      	bls.n	80084a8 <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	430a      	orrs	r2, r1
 8008472:	601a      	str	r2, [r3, #0]
 8008474:	e020      	b.n	80084b8 <HAL_SPI_Init+0x218>
 8008476:	bf00      	nop
 8008478:	40014c00 	.word	0x40014c00
 800847c:	50014c00 	.word	0x50014c00
 8008480:	44002000 	.word	0x44002000
 8008484:	54002000 	.word	0x54002000
 8008488:	40015000 	.word	0x40015000
 800848c:	50015000 	.word	0x50015000
 8008490:	40013000 	.word	0x40013000
 8008494:	50013000 	.word	0x50013000
 8008498:	40003800 	.word	0x40003800
 800849c:	50003800 	.word	0x50003800
 80084a0:	40003c00 	.word	0x40003c00
 80084a4:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80084b6:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	69da      	ldr	r2, [r3, #28]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084c0:	431a      	orrs	r2, r3
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	431a      	orrs	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084ca:	ea42 0103 	orr.w	r1, r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	68da      	ldr	r2, [r3, #12]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	430a      	orrs	r2, r1
 80084d8:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084e2:	431a      	orrs	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084e8:	431a      	orrs	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	699b      	ldr	r3, [r3, #24]
 80084ee:	431a      	orrs	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	431a      	orrs	r2, r3
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	695b      	ldr	r3, [r3, #20]
 80084fa:	431a      	orrs	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6a1b      	ldr	r3, [r3, #32]
 8008500:	431a      	orrs	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	431a      	orrs	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800850c:	431a      	orrs	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	431a      	orrs	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008518:	431a      	orrs	r2, r3
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800851e:	431a      	orrs	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008524:	ea42 0103 	orr.w	r1, r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	430a      	orrs	r2, r1
 8008532:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f022 0201 	bic.w	r2, r2, #1
 8008542:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800854c:	2b00      	cmp	r3, #0
 800854e:	d00a      	beq.n	8008566 <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	430a      	orrs	r2, r1
 8008564:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2201      	movs	r2, #1
 8008572:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b088      	sub	sp, #32
 8008584:	af02      	add	r7, sp, #8
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	603b      	str	r3, [r7, #0]
 800858c:	4613      	mov	r3, r2
 800858e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	3320      	adds	r3, #32
 8008596:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008598:	f7f9 fc30 	bl	8001dfc <HAL_GetTick>
 800859c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d001      	beq.n	80085ae <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80085aa:	2302      	movs	r3, #2
 80085ac:	e1f9      	b.n	80089a2 <HAL_SPI_Transmit+0x422>
  }

  if ((pData == NULL) || (Size == 0UL))
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d002      	beq.n	80085ba <HAL_SPI_Transmit+0x3a>
 80085b4:	88fb      	ldrh	r3, [r7, #6]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d101      	bne.n	80085be <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e1f1      	b.n	80089a2 <HAL_SPI_Transmit+0x422>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d101      	bne.n	80085cc <HAL_SPI_Transmit+0x4c>
 80085c8:	2302      	movs	r3, #2
 80085ca:	e1ea      	b.n	80089a2 <HAL_SPI_Transmit+0x422>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2203      	movs	r2, #3
 80085d8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	88fa      	ldrh	r2, [r7, #6]
 80085ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	88fa      	ldrh	r2, [r7, #6]
 80085f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2200      	movs	r2, #0
 80085fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2200      	movs	r2, #0
 8008604:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2200      	movs	r2, #0
 800860c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2200      	movs	r2, #0
 8008614:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2200      	movs	r2, #0
 800861a:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008624:	d108      	bne.n	8008638 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008634:	601a      	str	r2, [r3, #0]
 8008636:	e009      	b.n	800864c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800864a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	0c1b      	lsrs	r3, r3, #16
 8008654:	041b      	lsls	r3, r3, #16
 8008656:	88f9      	ldrh	r1, [r7, #6]
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	6812      	ldr	r2, [r2, #0]
 800865c:	430b      	orrs	r3, r1
 800865e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f042 0201 	orr.w	r2, r2, #1
 800866e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008678:	d107      	bne.n	800868a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008688:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	2b0f      	cmp	r3, #15
 8008690:	d965      	bls.n	800875e <HAL_SPI_Transmit+0x1de>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a94      	ldr	r2, [pc, #592]	@ (80088e8 <HAL_SPI_Transmit+0x368>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d059      	beq.n	8008750 <HAL_SPI_Transmit+0x1d0>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a92      	ldr	r2, [pc, #584]	@ (80088ec <HAL_SPI_Transmit+0x36c>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d054      	beq.n	8008750 <HAL_SPI_Transmit+0x1d0>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a91      	ldr	r2, [pc, #580]	@ (80088f0 <HAL_SPI_Transmit+0x370>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d04f      	beq.n	8008750 <HAL_SPI_Transmit+0x1d0>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a8f      	ldr	r2, [pc, #572]	@ (80088f4 <HAL_SPI_Transmit+0x374>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d04a      	beq.n	8008750 <HAL_SPI_Transmit+0x1d0>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a8e      	ldr	r2, [pc, #568]	@ (80088f8 <HAL_SPI_Transmit+0x378>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d045      	beq.n	8008750 <HAL_SPI_Transmit+0x1d0>
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a8c      	ldr	r2, [pc, #560]	@ (80088fc <HAL_SPI_Transmit+0x37c>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d147      	bne.n	800875e <HAL_SPI_Transmit+0x1de>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80086ce:	e03f      	b.n	8008750 <HAL_SPI_Transmit+0x1d0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	695b      	ldr	r3, [r3, #20]
 80086d6:	f003 0302 	and.w	r3, r3, #2
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d114      	bne.n	8008708 <HAL_SPI_Transmit+0x188>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	6812      	ldr	r2, [r2, #0]
 80086e8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80086ee:	1d1a      	adds	r2, r3, #4
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	3b01      	subs	r3, #1
 80086fe:	b29a      	uxth	r2, r3
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008706:	e023      	b.n	8008750 <HAL_SPI_Transmit+0x1d0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008708:	f7f9 fb78 	bl	8001dfc <HAL_GetTick>
 800870c:	4602      	mov	r2, r0
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	1ad3      	subs	r3, r2, r3
 8008712:	683a      	ldr	r2, [r7, #0]
 8008714:	429a      	cmp	r2, r3
 8008716:	d803      	bhi.n	8008720 <HAL_SPI_Transmit+0x1a0>
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800871e:	d102      	bne.n	8008726 <HAL_SPI_Transmit+0x1a6>
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d114      	bne.n	8008750 <HAL_SPI_Transmit+0x1d0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f000 fd54 	bl	80091d4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008732:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2200      	movs	r2, #0
 8008748:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800874c:	2303      	movs	r3, #3
 800874e:	e128      	b.n	80089a2 <HAL_SPI_Transmit+0x422>
    while (hspi->TxXferCount > 0UL)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008756:	b29b      	uxth	r3, r3
 8008758:	2b00      	cmp	r3, #0
 800875a:	d1b9      	bne.n	80086d0 <HAL_SPI_Transmit+0x150>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800875c:	e0fb      	b.n	8008956 <HAL_SPI_Transmit+0x3d6>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	2b07      	cmp	r3, #7
 8008764:	f240 80f0 	bls.w	8008948 <HAL_SPI_Transmit+0x3c8>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008768:	e05d      	b.n	8008826 <HAL_SPI_Transmit+0x2a6>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	695b      	ldr	r3, [r3, #20]
 8008770:	f003 0302 	and.w	r3, r3, #2
 8008774:	2b02      	cmp	r3, #2
 8008776:	d132      	bne.n	80087de <HAL_SPI_Transmit+0x25e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800877e:	b29b      	uxth	r3, r3
 8008780:	2b01      	cmp	r3, #1
 8008782:	d918      	bls.n	80087b6 <HAL_SPI_Transmit+0x236>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008788:	2b00      	cmp	r3, #0
 800878a:	d014      	beq.n	80087b6 <HAL_SPI_Transmit+0x236>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	6812      	ldr	r2, [r2, #0]
 8008796:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800879c:	1d1a      	adds	r2, r3, #4
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	3b02      	subs	r3, #2
 80087ac:	b29a      	uxth	r2, r3
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80087b4:	e037      	b.n	8008826 <HAL_SPI_Transmit+0x2a6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087ba:	881a      	ldrh	r2, [r3, #0]
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087c4:	1c9a      	adds	r2, r3, #2
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	3b01      	subs	r3, #1
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80087dc:	e023      	b.n	8008826 <HAL_SPI_Transmit+0x2a6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087de:	f7f9 fb0d 	bl	8001dfc <HAL_GetTick>
 80087e2:	4602      	mov	r2, r0
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	1ad3      	subs	r3, r2, r3
 80087e8:	683a      	ldr	r2, [r7, #0]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d803      	bhi.n	80087f6 <HAL_SPI_Transmit+0x276>
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f4:	d102      	bne.n	80087fc <HAL_SPI_Transmit+0x27c>
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d114      	bne.n	8008826 <HAL_SPI_Transmit+0x2a6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f000 fce9 	bl	80091d4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008808:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2201      	movs	r2, #1
 8008816:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2200      	movs	r2, #0
 800881e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008822:	2303      	movs	r3, #3
 8008824:	e0bd      	b.n	80089a2 <HAL_SPI_Transmit+0x422>
    while (hspi->TxXferCount > 0UL)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800882c:	b29b      	uxth	r3, r3
 800882e:	2b00      	cmp	r3, #0
 8008830:	d19b      	bne.n	800876a <HAL_SPI_Transmit+0x1ea>
 8008832:	e090      	b.n	8008956 <HAL_SPI_Transmit+0x3d6>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	695b      	ldr	r3, [r3, #20]
 800883a:	f003 0302 	and.w	r3, r3, #2
 800883e:	2b02      	cmp	r3, #2
 8008840:	d15e      	bne.n	8008900 <HAL_SPI_Transmit+0x380>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008848:	b29b      	uxth	r3, r3
 800884a:	2b03      	cmp	r3, #3
 800884c:	d918      	bls.n	8008880 <HAL_SPI_Transmit+0x300>
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008852:	2b40      	cmp	r3, #64	@ 0x40
 8008854:	d914      	bls.n	8008880 <HAL_SPI_Transmit+0x300>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	6812      	ldr	r2, [r2, #0]
 8008860:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008866:	1d1a      	adds	r2, r3, #4
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008872:	b29b      	uxth	r3, r3
 8008874:	3b04      	subs	r3, #4
 8008876:	b29a      	uxth	r2, r3
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800887e:	e063      	b.n	8008948 <HAL_SPI_Transmit+0x3c8>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008886:	b29b      	uxth	r3, r3
 8008888:	2b01      	cmp	r3, #1
 800888a:	d917      	bls.n	80088bc <HAL_SPI_Transmit+0x33c>
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008890:	2b00      	cmp	r3, #0
 8008892:	d013      	beq.n	80088bc <HAL_SPI_Transmit+0x33c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008898:	881a      	ldrh	r2, [r3, #0]
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088a2:	1c9a      	adds	r2, r3, #2
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	3b02      	subs	r3, #2
 80088b2:	b29a      	uxth	r2, r3
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80088ba:	e045      	b.n	8008948 <HAL_SPI_Transmit+0x3c8>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	3320      	adds	r3, #32
 80088c6:	7812      	ldrb	r2, [r2, #0]
 80088c8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088ce:	1c5a      	adds	r2, r3, #1
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80088da:	b29b      	uxth	r3, r3
 80088dc:	3b01      	subs	r3, #1
 80088de:	b29a      	uxth	r2, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80088e6:	e02f      	b.n	8008948 <HAL_SPI_Transmit+0x3c8>
 80088e8:	40013000 	.word	0x40013000
 80088ec:	50013000 	.word	0x50013000
 80088f0:	40003800 	.word	0x40003800
 80088f4:	50003800 	.word	0x50003800
 80088f8:	40003c00 	.word	0x40003c00
 80088fc:	50003c00 	.word	0x50003c00
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008900:	f7f9 fa7c 	bl	8001dfc <HAL_GetTick>
 8008904:	4602      	mov	r2, r0
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	683a      	ldr	r2, [r7, #0]
 800890c:	429a      	cmp	r2, r3
 800890e:	d803      	bhi.n	8008918 <HAL_SPI_Transmit+0x398>
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008916:	d102      	bne.n	800891e <HAL_SPI_Transmit+0x39e>
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d114      	bne.n	8008948 <HAL_SPI_Transmit+0x3c8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	f000 fc58 	bl	80091d4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800892a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2200      	movs	r2, #0
 8008940:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008944:	2303      	movs	r3, #3
 8008946:	e02c      	b.n	80089a2 <HAL_SPI_Transmit+0x422>
    while (hspi->TxXferCount > 0UL)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800894e:	b29b      	uxth	r3, r3
 8008950:	2b00      	cmp	r3, #0
 8008952:	f47f af6f 	bne.w	8008834 <HAL_SPI_Transmit+0x2b4>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	9300      	str	r3, [sp, #0]
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	2200      	movs	r2, #0
 800895e:	2108      	movs	r1, #8
 8008960:	68f8      	ldr	r0, [r7, #12]
 8008962:	f000 fcd7 	bl	8009314 <SPI_WaitOnFlagUntilTimeout>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d007      	beq.n	800897c <HAL_SPI_Transmit+0x3fc>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008972:	f043 0220 	orr.w	r2, r3, #32
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800897c:	68f8      	ldr	r0, [r7, #12]
 800897e:	f000 fc29 	bl	80091d4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2201      	movs	r2, #1
 8008986:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008998:	2b00      	cmp	r3, #0
 800899a:	d001      	beq.n	80089a0 <HAL_SPI_Transmit+0x420>
  {
    return HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	e000      	b.n	80089a2 <HAL_SPI_Transmit+0x422>
  }
  else
  {
    return HAL_OK;
 80089a0:	2300      	movs	r3, #0
  }
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3718      	adds	r7, #24
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop

080089ac <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b086      	sub	sp, #24
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	603b      	str	r3, [r7, #0]
 80089b8:	4613      	mov	r3, r2
 80089ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	3330      	adds	r3, #48	@ 0x30
 80089c2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80089c4:	f7f9 fa1a 	bl	8001dfc <HAL_GetTick>
 80089c8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d001      	beq.n	80089da <HAL_SPI_Receive+0x2e>
  {
    return HAL_BUSY;
 80089d6:	2302      	movs	r3, #2
 80089d8:	e181      	b.n	8008cde <HAL_SPI_Receive+0x332>
  }

  if ((pData == NULL) || (Size == 0UL))
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d002      	beq.n	80089e6 <HAL_SPI_Receive+0x3a>
 80089e0:	88fb      	ldrh	r3, [r7, #6]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d101      	bne.n	80089ea <HAL_SPI_Receive+0x3e>
  {
    return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e179      	b.n	8008cde <HAL_SPI_Receive+0x332>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d101      	bne.n	80089f8 <HAL_SPI_Receive+0x4c>
 80089f4:	2302      	movs	r3, #2
 80089f6:	e172      	b.n	8008cde <HAL_SPI_Receive+0x332>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2204      	movs	r2, #4
 8008a04:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	68ba      	ldr	r2, [r7, #8]
 8008a14:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	88fa      	ldrh	r2, [r7, #6]
 8008a1a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	88fa      	ldrh	r2, [r7, #6]
 8008a22:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2200      	movs	r2, #0
 8008a46:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8008a50:	d108      	bne.n	8008a64 <HAL_SPI_Receive+0xb8>
  {
    SPI_1LINE_RX(hspi);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008a60:	601a      	str	r2, [r3, #0]
 8008a62:	e009      	b.n	8008a78 <HAL_SPI_Receive+0xcc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008a76:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	0c1b      	lsrs	r3, r3, #16
 8008a80:	041b      	lsls	r3, r3, #16
 8008a82:	88f9      	ldrh	r1, [r7, #6]
 8008a84:	68fa      	ldr	r2, [r7, #12]
 8008a86:	6812      	ldr	r2, [r2, #0]
 8008a88:	430b      	orrs	r3, r1
 8008a8a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f042 0201 	orr.w	r2, r2, #1
 8008a9a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008aa4:	d107      	bne.n	8008ab6 <HAL_SPI_Receive+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ab4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	2b0f      	cmp	r3, #15
 8008abc:	d966      	bls.n	8008b8c <HAL_SPI_Receive+0x1e0>
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a89      	ldr	r2, [pc, #548]	@ (8008ce8 <HAL_SPI_Receive+0x33c>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d05a      	beq.n	8008b7e <HAL_SPI_Receive+0x1d2>
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a87      	ldr	r2, [pc, #540]	@ (8008cec <HAL_SPI_Receive+0x340>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d055      	beq.n	8008b7e <HAL_SPI_Receive+0x1d2>
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a86      	ldr	r2, [pc, #536]	@ (8008cf0 <HAL_SPI_Receive+0x344>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d050      	beq.n	8008b7e <HAL_SPI_Receive+0x1d2>
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a84      	ldr	r2, [pc, #528]	@ (8008cf4 <HAL_SPI_Receive+0x348>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d04b      	beq.n	8008b7e <HAL_SPI_Receive+0x1d2>
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a83      	ldr	r2, [pc, #524]	@ (8008cf8 <HAL_SPI_Receive+0x34c>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d046      	beq.n	8008b7e <HAL_SPI_Receive+0x1d2>
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a81      	ldr	r2, [pc, #516]	@ (8008cfc <HAL_SPI_Receive+0x350>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d148      	bne.n	8008b8c <HAL_SPI_Receive+0x1e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008afa:	e040      	b.n	8008b7e <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	695a      	ldr	r2, [r3, #20]
 8008b02:	f248 0308 	movw	r3, #32776	@ 0x8008
 8008b06:	4013      	ands	r3, r2
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d014      	beq.n	8008b36 <HAL_SPI_Receive+0x18a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b14:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008b16:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b1c:	1d1a      	adds	r2, r3, #4
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	3b01      	subs	r3, #1
 8008b2c:	b29a      	uxth	r2, r3
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8008b34:	e023      	b.n	8008b7e <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b36:	f7f9 f961 	bl	8001dfc <HAL_GetTick>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	1ad3      	subs	r3, r2, r3
 8008b40:	683a      	ldr	r2, [r7, #0]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d803      	bhi.n	8008b4e <HAL_SPI_Receive+0x1a2>
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b4c:	d102      	bne.n	8008b54 <HAL_SPI_Receive+0x1a8>
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d114      	bne.n	8008b7e <HAL_SPI_Receive+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008b54:	68f8      	ldr	r0, [r7, #12]
 8008b56:	f000 fb3d 	bl	80091d4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b60:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2200      	movs	r2, #0
 8008b76:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	e0af      	b.n	8008cde <HAL_SPI_Receive+0x332>
    while (hspi->RxXferCount > 0UL)
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d1b8      	bne.n	8008afc <HAL_SPI_Receive+0x150>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008b8a:	e095      	b.n	8008cb8 <HAL_SPI_Receive+0x30c>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	2b07      	cmp	r3, #7
 8008b92:	f240 808b 	bls.w	8008cac <HAL_SPI_Receive+0x300>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008b96:	e03f      	b.n	8008c18 <HAL_SPI_Receive+0x26c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	695b      	ldr	r3, [r3, #20]
 8008b9e:	f003 0301 	and.w	r3, r3, #1
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d114      	bne.n	8008bd0 <HAL_SPI_Receive+0x224>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008baa:	697a      	ldr	r2, [r7, #20]
 8008bac:	8812      	ldrh	r2, [r2, #0]
 8008bae:	b292      	uxth	r2, r2
 8008bb0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008bb6:	1c9a      	adds	r2, r3, #2
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	3b01      	subs	r3, #1
 8008bc6:	b29a      	uxth	r2, r3
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8008bce:	e023      	b.n	8008c18 <HAL_SPI_Receive+0x26c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008bd0:	f7f9 f914 	bl	8001dfc <HAL_GetTick>
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	1ad3      	subs	r3, r2, r3
 8008bda:	683a      	ldr	r2, [r7, #0]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d803      	bhi.n	8008be8 <HAL_SPI_Receive+0x23c>
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008be6:	d102      	bne.n	8008bee <HAL_SPI_Receive+0x242>
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d114      	bne.n	8008c18 <HAL_SPI_Receive+0x26c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008bee:	68f8      	ldr	r0, [r7, #12]
 8008bf0:	f000 faf0 	bl	80091d4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008bfa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008c14:	2303      	movs	r3, #3
 8008c16:	e062      	b.n	8008cde <HAL_SPI_Receive+0x332>
    while (hspi->RxXferCount > 0UL)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d1b9      	bne.n	8008b98 <HAL_SPI_Receive+0x1ec>
 8008c24:	e048      	b.n	8008cb8 <HAL_SPI_Receive+0x30c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	695b      	ldr	r3, [r3, #20]
 8008c2c:	f003 0301 	and.w	r3, r3, #1
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d117      	bne.n	8008c64 <HAL_SPI_Receive+0x2b8>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c40:	7812      	ldrb	r2, [r2, #0]
 8008c42:	b2d2      	uxtb	r2, r2
 8008c44:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c4a:	1c5a      	adds	r2, r3, #1
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	3b01      	subs	r3, #1
 8008c5a:	b29a      	uxth	r2, r3
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8008c62:	e023      	b.n	8008cac <HAL_SPI_Receive+0x300>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c64:	f7f9 f8ca 	bl	8001dfc <HAL_GetTick>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	1ad3      	subs	r3, r2, r3
 8008c6e:	683a      	ldr	r2, [r7, #0]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d803      	bhi.n	8008c7c <HAL_SPI_Receive+0x2d0>
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c7a:	d102      	bne.n	8008c82 <HAL_SPI_Receive+0x2d6>
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d114      	bne.n	8008cac <HAL_SPI_Receive+0x300>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f000 faa6 	bl	80091d4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c8e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008ca8:	2303      	movs	r3, #3
 8008caa:	e018      	b.n	8008cde <HAL_SPI_Receive+0x332>
    while (hspi->RxXferCount > 0UL)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d1b6      	bne.n	8008c26 <HAL_SPI_Receive+0x27a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008cb8:	68f8      	ldr	r0, [r7, #12]
 8008cba:	f000 fa8b 	bl	80091d4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d001      	beq.n	8008cdc <HAL_SPI_Receive+0x330>
  {
    return HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e000      	b.n	8008cde <HAL_SPI_Receive+0x332>
  }
  else
  {
    return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
  }
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3718      	adds	r7, #24
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	40013000 	.word	0x40013000
 8008cec:	50013000 	.word	0x50013000
 8008cf0:	40003800 	.word	0x40003800
 8008cf4:	50003800 	.word	0x50003800
 8008cf8:	40003c00 	.word	0x40003c00
 8008cfc:	50003c00 	.word	0x50003c00

08008d00 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b08c      	sub	sp, #48	@ 0x30
 8008d04:	af02      	add	r7, sp, #8
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	60b9      	str	r1, [r7, #8]
 8008d0a:	607a      	str	r2, [r7, #4]
 8008d0c:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	3320      	adds	r3, #32
 8008d14:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	3330      	adds	r3, #48	@ 0x30
 8008d1c:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d1e:	f7f9 f86d 	bl	8001dfc <HAL_GetTick>
 8008d22:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 8008d24:	887b      	ldrh	r3, [r7, #2]
 8008d26:	847b      	strh	r3, [r7, #34]	@ 0x22
  initial_RxXferCount = Size;
 8008d28:	887b      	ldrh	r3, [r7, #2]
 8008d2a:	843b      	strh	r3, [r7, #32]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d001      	beq.n	8008d3c <HAL_SPI_TransmitReceive+0x3c>
  {
    return HAL_BUSY;
 8008d38:	2302      	movs	r3, #2
 8008d3a:	e247      	b.n	80091cc <HAL_SPI_TransmitReceive+0x4cc>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d005      	beq.n	8008d4e <HAL_SPI_TransmitReceive+0x4e>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d002      	beq.n	8008d4e <HAL_SPI_TransmitReceive+0x4e>
 8008d48:	887b      	ldrh	r3, [r7, #2]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d101      	bne.n	8008d52 <HAL_SPI_TransmitReceive+0x52>
  {
    return HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e23c      	b.n	80091cc <HAL_SPI_TransmitReceive+0x4cc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d101      	bne.n	8008d60 <HAL_SPI_TransmitReceive+0x60>
 8008d5c:	2302      	movs	r3, #2
 8008d5e:	e235      	b.n	80091cc <HAL_SPI_TransmitReceive+0x4cc>
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2205      	movs	r2, #5
 8008d6c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferCount = Size;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	887a      	ldrh	r2, [r7, #2]
 8008d82:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->RxXferSize  = Size;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	887a      	ldrh	r2, [r7, #2]
 8008d8a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	68ba      	ldr	r2, [r7, #8]
 8008d92:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferCount = Size;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	887a      	ldrh	r2, [r7, #2]
 8008d98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferSize  = Size;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	887a      	ldrh	r2, [r7, #2]
 8008da0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2200      	movs	r2, #0
 8008da8:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2200      	movs	r2, #0
 8008dae:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	68da      	ldr	r2, [r3, #12]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 8008dbe:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_FULL_INSTANCE(hspi->Instance))
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a72      	ldr	r2, [pc, #456]	@ (8008f90 <HAL_SPI_TransmitReceive+0x290>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d018      	beq.n	8008dfc <HAL_SPI_TransmitReceive+0xfc>
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a71      	ldr	r2, [pc, #452]	@ (8008f94 <HAL_SPI_TransmitReceive+0x294>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d013      	beq.n	8008dfc <HAL_SPI_TransmitReceive+0xfc>
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a6f      	ldr	r2, [pc, #444]	@ (8008f98 <HAL_SPI_TransmitReceive+0x298>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d00e      	beq.n	8008dfc <HAL_SPI_TransmitReceive+0xfc>
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a6e      	ldr	r2, [pc, #440]	@ (8008f9c <HAL_SPI_TransmitReceive+0x29c>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d009      	beq.n	8008dfc <HAL_SPI_TransmitReceive+0xfc>
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a6c      	ldr	r2, [pc, #432]	@ (8008fa0 <HAL_SPI_TransmitReceive+0x2a0>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d004      	beq.n	8008dfc <HAL_SPI_TransmitReceive+0xfc>
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a6b      	ldr	r2, [pc, #428]	@ (8008fa4 <HAL_SPI_TransmitReceive+0x2a4>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d102      	bne.n	8008e02 <HAL_SPI_TransmitReceive+0x102>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 8008dfc:	2310      	movs	r3, #16
 8008dfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e00:	e001      	b.n	8008e06 <HAL_SPI_TransmitReceive+0x106>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 8008e02:	2308      	movs	r3, #8
 8008e04:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	0c1b      	lsrs	r3, r3, #16
 8008e0e:	041b      	lsls	r3, r3, #16
 8008e10:	8879      	ldrh	r1, [r7, #2]
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	6812      	ldr	r2, [r2, #0]
 8008e16:	430b      	orrs	r3, r1
 8008e18:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f042 0201 	orr.w	r2, r2, #1
 8008e28:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e32:	d107      	bne.n	8008e44 <HAL_SPI_TransmitReceive+0x144>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	681a      	ldr	r2, [r3, #0]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	2b0f      	cmp	r3, #15
 8008e4a:	f240 8098 	bls.w	8008f7e <HAL_SPI_TransmitReceive+0x27e>
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a4f      	ldr	r2, [pc, #316]	@ (8008f90 <HAL_SPI_TransmitReceive+0x290>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d018      	beq.n	8008e8a <HAL_SPI_TransmitReceive+0x18a>
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a4d      	ldr	r2, [pc, #308]	@ (8008f94 <HAL_SPI_TransmitReceive+0x294>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d013      	beq.n	8008e8a <HAL_SPI_TransmitReceive+0x18a>
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a4c      	ldr	r2, [pc, #304]	@ (8008f98 <HAL_SPI_TransmitReceive+0x298>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d00e      	beq.n	8008e8a <HAL_SPI_TransmitReceive+0x18a>
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a4a      	ldr	r2, [pc, #296]	@ (8008f9c <HAL_SPI_TransmitReceive+0x29c>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d009      	beq.n	8008e8a <HAL_SPI_TransmitReceive+0x18a>
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a49      	ldr	r2, [pc, #292]	@ (8008fa0 <HAL_SPI_TransmitReceive+0x2a0>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d004      	beq.n	8008e8a <HAL_SPI_TransmitReceive+0x18a>
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a47      	ldr	r2, [pc, #284]	@ (8008fa4 <HAL_SPI_TransmitReceive+0x2a4>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d179      	bne.n	8008f7e <HAL_SPI_TransmitReceive+0x27e>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e8c:	089b      	lsrs	r3, r3, #2
 8008e8e:	627b      	str	r3, [r7, #36]	@ 0x24

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008e90:	e06e      	b.n	8008f70 <HAL_SPI_TransmitReceive+0x270>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	695b      	ldr	r3, [r3, #20]
 8008e98:	f003 0302 	and.w	r3, r3, #2
 8008e9c:	2b02      	cmp	r3, #2
 8008e9e:	d120      	bne.n	8008ee2 <HAL_SPI_TransmitReceive+0x1e2>
 8008ea0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d01d      	beq.n	8008ee2 <HAL_SPI_TransmitReceive+0x1e2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8008ea6:	8c3a      	ldrh	r2, [r7, #32]
 8008ea8:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8008eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eac:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d217      	bcs.n	8008ee2 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	6812      	ldr	r2, [r2, #0]
 8008ebc:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008ec2:	1d1a      	adds	r2, r3, #4
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount --;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	b29a      	uxth	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ee0:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	695a      	ldr	r2, [r3, #20]
 8008ee8:	f248 0308 	movw	r3, #32776	@ 0x8008
 8008eec:	4013      	ands	r3, r2
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d01a      	beq.n	8008f28 <HAL_SPI_TransmitReceive+0x228>
 8008ef2:	8c3b      	ldrh	r3, [r7, #32]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d017      	beq.n	8008f28 <HAL_SPI_TransmitReceive+0x228>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f00:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008f02:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f08:	1d1a      	adds	r2, r3, #4
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount --;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	3b01      	subs	r3, #1
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008f26:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f28:	f7f8 ff68 	bl	8001dfc <HAL_GetTick>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	1ad3      	subs	r3, r2, r3
 8008f32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d803      	bhi.n	8008f40 <HAL_SPI_TransmitReceive+0x240>
 8008f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f3e:	d102      	bne.n	8008f46 <HAL_SPI_TransmitReceive+0x246>
 8008f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d114      	bne.n	8008f70 <HAL_SPI_TransmitReceive+0x270>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	f000 f944 	bl	80091d4 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f52:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2200      	movs	r2, #0
 8008f68:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e12d      	b.n	80091cc <HAL_SPI_TransmitReceive+0x4cc>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008f70:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d18d      	bne.n	8008e92 <HAL_SPI_TransmitReceive+0x192>
 8008f76:	8c3b      	ldrh	r3, [r7, #32]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d18a      	bne.n	8008e92 <HAL_SPI_TransmitReceive+0x192>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008f7c:	e100      	b.n	8009180 <HAL_SPI_TransmitReceive+0x480>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	2b07      	cmp	r3, #7
 8008f84:	f240 80f6 	bls.w	8009174 <HAL_SPI_TransmitReceive+0x474>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 8008f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f8a:	085b      	lsrs	r3, r3, #1
 8008f8c:	627b      	str	r3, [r7, #36]	@ 0x24

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008f8e:	e078      	b.n	8009082 <HAL_SPI_TransmitReceive+0x382>
 8008f90:	40013000 	.word	0x40013000
 8008f94:	50013000 	.word	0x50013000
 8008f98:	40003800 	.word	0x40003800
 8008f9c:	50003800 	.word	0x50003800
 8008fa0:	40003c00 	.word	0x40003c00
 8008fa4:	50003c00 	.word	0x50003c00
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	695b      	ldr	r3, [r3, #20]
 8008fae:	f003 0302 	and.w	r3, r3, #2
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	d11f      	bne.n	8008ff6 <HAL_SPI_TransmitReceive+0x2f6>
 8008fb6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d01c      	beq.n	8008ff6 <HAL_SPI_TransmitReceive+0x2f6>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 8008fbc:	8c3a      	ldrh	r2, [r7, #32]
 8008fbe:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8008fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d216      	bcs.n	8008ff6 <HAL_SPI_TransmitReceive+0x2f6>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fcc:	881a      	ldrh	r2, [r3, #0]
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fd6:	1c9a      	adds	r2, r3, #2
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	3b01      	subs	r3, #1
 8008fe6:	b29a      	uxth	r2, r3
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008ff4:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	695b      	ldr	r3, [r3, #20]
 8008ffc:	f003 0301 	and.w	r3, r3, #1
 8009000:	2b01      	cmp	r3, #1
 8009002:	d11a      	bne.n	800903a <HAL_SPI_TransmitReceive+0x33a>
 8009004:	8c3b      	ldrh	r3, [r7, #32]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d017      	beq.n	800903a <HAL_SPI_TransmitReceive+0x33a>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800900e:	69ba      	ldr	r2, [r7, #24]
 8009010:	8812      	ldrh	r2, [r2, #0]
 8009012:	b292      	uxth	r2, r2
 8009014:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800901a:	1c9a      	adds	r2, r3, #2
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009026:	b29b      	uxth	r3, r3
 8009028:	3b01      	subs	r3, #1
 800902a:	b29a      	uxth	r2, r3
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009038:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800903a:	f7f8 fedf 	bl	8001dfc <HAL_GetTick>
 800903e:	4602      	mov	r2, r0
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	1ad3      	subs	r3, r2, r3
 8009044:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009046:	429a      	cmp	r2, r3
 8009048:	d803      	bhi.n	8009052 <HAL_SPI_TransmitReceive+0x352>
 800904a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800904c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009050:	d102      	bne.n	8009058 <HAL_SPI_TransmitReceive+0x358>
 8009052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009054:	2b00      	cmp	r3, #0
 8009056:	d114      	bne.n	8009082 <HAL_SPI_TransmitReceive+0x382>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8009058:	68f8      	ldr	r0, [r7, #12]
 800905a:	f000 f8bb 	bl	80091d4 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009064:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2201      	movs	r2, #1
 8009072:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2200      	movs	r2, #0
 800907a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800907e:	2303      	movs	r3, #3
 8009080:	e0a4      	b.n	80091cc <HAL_SPI_TransmitReceive+0x4cc>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009082:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009084:	2b00      	cmp	r3, #0
 8009086:	d18f      	bne.n	8008fa8 <HAL_SPI_TransmitReceive+0x2a8>
 8009088:	8c3b      	ldrh	r3, [r7, #32]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d18c      	bne.n	8008fa8 <HAL_SPI_TransmitReceive+0x2a8>
 800908e:	e077      	b.n	8009180 <HAL_SPI_TransmitReceive+0x480>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	695b      	ldr	r3, [r3, #20]
 8009096:	f003 0302 	and.w	r3, r3, #2
 800909a:	2b02      	cmp	r3, #2
 800909c:	d121      	bne.n	80090e2 <HAL_SPI_TransmitReceive+0x3e2>
 800909e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d01e      	beq.n	80090e2 <HAL_SPI_TransmitReceive+0x3e2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 80090a4:	8c3a      	ldrh	r2, [r7, #32]
 80090a6:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 80090a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090aa:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d218      	bcs.n	80090e2 <HAL_SPI_TransmitReceive+0x3e2>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	3320      	adds	r3, #32
 80090ba:	7812      	ldrb	r2, [r2, #0]
 80090bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090c2:	1c5a      	adds	r2, r3, #1
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	3b01      	subs	r3, #1
 80090d2:	b29a      	uxth	r2, r3
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80090e0:	847b      	strh	r3, [r7, #34]	@ 0x22
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	695b      	ldr	r3, [r3, #20]
 80090e8:	f003 0301 	and.w	r3, r3, #1
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d11d      	bne.n	800912c <HAL_SPI_TransmitReceive+0x42c>
 80090f0:	8c3b      	ldrh	r3, [r7, #32]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d01a      	beq.n	800912c <HAL_SPI_TransmitReceive+0x42c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009102:	7812      	ldrb	r2, [r2, #0]
 8009104:	b2d2      	uxtb	r2, r2
 8009106:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800910c:	1c5a      	adds	r2, r3, #1
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8009118:	b29b      	uxth	r3, r3
 800911a:	3b01      	subs	r3, #1
 800911c:	b29a      	uxth	r2, r3
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800912a:	843b      	strh	r3, [r7, #32]
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800912c:	f7f8 fe66 	bl	8001dfc <HAL_GetTick>
 8009130:	4602      	mov	r2, r0
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	1ad3      	subs	r3, r2, r3
 8009136:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009138:	429a      	cmp	r2, r3
 800913a:	d803      	bhi.n	8009144 <HAL_SPI_TransmitReceive+0x444>
 800913c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800913e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009142:	d102      	bne.n	800914a <HAL_SPI_TransmitReceive+0x44a>
 8009144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009146:	2b00      	cmp	r3, #0
 8009148:	d114      	bne.n	8009174 <HAL_SPI_TransmitReceive+0x474>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800914a:	68f8      	ldr	r0, [r7, #12]
 800914c:	f000 f842 	bl	80091d4 <SPI_CloseTransfer>

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009156:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2201      	movs	r2, #1
 8009164:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2200      	movs	r2, #0
 800916c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009170:	2303      	movs	r3, #3
 8009172:	e02b      	b.n	80091cc <HAL_SPI_TransmitReceive+0x4cc>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009174:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009176:	2b00      	cmp	r3, #0
 8009178:	d18a      	bne.n	8009090 <HAL_SPI_TransmitReceive+0x390>
 800917a:	8c3b      	ldrh	r3, [r7, #32]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d187      	bne.n	8009090 <HAL_SPI_TransmitReceive+0x390>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	9300      	str	r3, [sp, #0]
 8009184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009186:	2200      	movs	r2, #0
 8009188:	2108      	movs	r1, #8
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	f000 f8c2 	bl	8009314 <SPI_WaitOnFlagUntilTimeout>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d007      	beq.n	80091a6 <HAL_SPI_TransmitReceive+0x4a6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800919c:	f043 0220 	orr.w	r2, r3, #32
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	f000 f814 	bl	80091d4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2200      	movs	r2, #0
 80091b8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d001      	beq.n	80091ca <HAL_SPI_TransmitReceive+0x4ca>
  {
    return HAL_ERROR;
 80091c6:	2301      	movs	r3, #1
 80091c8:	e000      	b.n	80091cc <HAL_SPI_TransmitReceive+0x4cc>
  }
  else
  {
    return HAL_OK;
 80091ca:	2300      	movs	r3, #0
  }
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3728      	adds	r7, #40	@ 0x28
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b085      	sub	sp, #20
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	695b      	ldr	r3, [r3, #20]
 80091e2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	699a      	ldr	r2, [r3, #24]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f042 0208 	orr.w	r2, r2, #8
 80091f2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	699a      	ldr	r2, [r3, #24]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f042 0210 	orr.w	r2, r2, #16
 8009202:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f022 0201 	bic.w	r2, r2, #1
 8009212:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	691b      	ldr	r3, [r3, #16]
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	6812      	ldr	r2, [r2, #0]
 800921e:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8009222:	f023 0303 	bic.w	r3, r3, #3
 8009226:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	689a      	ldr	r2, [r3, #8]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8009236:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800923e:	b2db      	uxtb	r3, r3
 8009240:	2b04      	cmp	r3, #4
 8009242:	d014      	beq.n	800926e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f003 0320 	and.w	r3, r3, #32
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00f      	beq.n	800926e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009254:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	699a      	ldr	r2, [r3, #24]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f042 0220 	orr.w	r2, r2, #32
 800926c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8009274:	b2db      	uxtb	r3, r3
 8009276:	2b03      	cmp	r3, #3
 8009278:	d014      	beq.n	80092a4 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009280:	2b00      	cmp	r3, #0
 8009282:	d00f      	beq.n	80092a4 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800928a:	f043 0204 	orr.w	r2, r3, #4
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	699a      	ldr	r2, [r3, #24]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80092a2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00f      	beq.n	80092ce <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092b4:	f043 0201 	orr.w	r2, r3, #1
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	699a      	ldr	r2, [r3, #24]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80092cc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d00f      	beq.n	80092f8 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092de:	f043 0208 	orr.w	r2, r3, #8
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	699a      	ldr	r2, [r3, #24]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80092f6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8009308:	bf00      	nop
 800930a:	3714      	adds	r7, #20
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	60b9      	str	r1, [r7, #8]
 800931e:	603b      	str	r3, [r7, #0]
 8009320:	4613      	mov	r3, r2
 8009322:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009324:	e010      	b.n	8009348 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009326:	f7f8 fd69 	bl	8001dfc <HAL_GetTick>
 800932a:	4602      	mov	r2, r0
 800932c:	69bb      	ldr	r3, [r7, #24]
 800932e:	1ad3      	subs	r3, r2, r3
 8009330:	683a      	ldr	r2, [r7, #0]
 8009332:	429a      	cmp	r2, r3
 8009334:	d803      	bhi.n	800933e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800933c:	d102      	bne.n	8009344 <SPI_WaitOnFlagUntilTimeout+0x30>
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d101      	bne.n	8009348 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009344:	2303      	movs	r3, #3
 8009346:	e00f      	b.n	8009368 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	695a      	ldr	r2, [r3, #20]
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	4013      	ands	r3, r2
 8009352:	68ba      	ldr	r2, [r7, #8]
 8009354:	429a      	cmp	r2, r3
 8009356:	bf0c      	ite	eq
 8009358:	2301      	moveq	r3, #1
 800935a:	2300      	movne	r3, #0
 800935c:	b2db      	uxtb	r3, r3
 800935e:	461a      	mov	r2, r3
 8009360:	79fb      	ldrb	r3, [r7, #7]
 8009362:	429a      	cmp	r2, r3
 8009364:	d0df      	beq.n	8009326 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	3710      	adds	r7, #16
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009370:	b480      	push	{r7}
 8009372:	b085      	sub	sp, #20
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800937c:	095b      	lsrs	r3, r3, #5
 800937e:	3301      	adds	r3, #1
 8009380:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	3301      	adds	r3, #1
 8009388:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	3307      	adds	r3, #7
 800938e:	08db      	lsrs	r3, r3, #3
 8009390:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	68fa      	ldr	r2, [r7, #12]
 8009396:	fb02 f303 	mul.w	r3, r2, r3
}
 800939a:	4618      	mov	r0, r3
 800939c:	3714      	adds	r7, #20
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr

080093a6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b082      	sub	sp, #8
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d101      	bne.n	80093b8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093b4:	2301      	movs	r3, #1
 80093b6:	e042      	b.n	800943e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d106      	bne.n	80093d0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f7f8 fa16 	bl	80017fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2224      	movs	r2, #36	@ 0x24
 80093d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f022 0201 	bic.w	r2, r2, #1
 80093e6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d002      	beq.n	80093f6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 fa17 	bl	8009824 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 f826 	bl	8009448 <UART_SetConfig>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d101      	bne.n	8009406 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009402:	2301      	movs	r3, #1
 8009404:	e01b      	b.n	800943e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	685a      	ldr	r2, [r3, #4]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009414:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	689a      	ldr	r2, [r3, #8]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009424:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f042 0201 	orr.w	r2, r2, #1
 8009434:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 fa96 	bl	8009968 <UART_CheckIdleState>
 800943c:	4603      	mov	r3, r0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
	...

08009448 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800944c:	b094      	sub	sp, #80	@ 0x50
 800944e:	af00      	add	r7, sp, #0
 8009450:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009452:	2300      	movs	r3, #0
 8009454:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	4b78      	ldr	r3, [pc, #480]	@ (8009640 <UART_SetConfig+0x1f8>)
 800945e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009462:	689a      	ldr	r2, [r3, #8]
 8009464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	431a      	orrs	r2, r3
 800946a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800946c:	695b      	ldr	r3, [r3, #20]
 800946e:	431a      	orrs	r2, r3
 8009470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009472:	69db      	ldr	r3, [r3, #28]
 8009474:	4313      	orrs	r3, r2
 8009476:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4971      	ldr	r1, [pc, #452]	@ (8009644 <UART_SetConfig+0x1fc>)
 8009480:	4019      	ands	r1, r3
 8009482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009488:	430b      	orrs	r3, r1
 800948a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800948c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009498:	68d9      	ldr	r1, [r3, #12]
 800949a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	ea40 0301 	orr.w	r3, r0, r1
 80094a2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80094a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a6:	699b      	ldr	r3, [r3, #24]
 80094a8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80094aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	4b64      	ldr	r3, [pc, #400]	@ (8009640 <UART_SetConfig+0x1f8>)
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d009      	beq.n	80094c8 <UART_SetConfig+0x80>
 80094b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	4b63      	ldr	r3, [pc, #396]	@ (8009648 <UART_SetConfig+0x200>)
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d004      	beq.n	80094c8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80094be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094c0:	6a1a      	ldr	r2, [r3, #32]
 80094c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094c4:	4313      	orrs	r3, r2
 80094c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80094c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80094d2:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80094d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094dc:	430b      	orrs	r3, r1
 80094de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80094e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094e6:	f023 000f 	bic.w	r0, r3, #15
 80094ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ec:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80094ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	ea40 0301 	orr.w	r3, r0, r1
 80094f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80094f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	4b53      	ldr	r3, [pc, #332]	@ (800964c <UART_SetConfig+0x204>)
 80094fe:	429a      	cmp	r2, r3
 8009500:	d102      	bne.n	8009508 <UART_SetConfig+0xc0>
 8009502:	2301      	movs	r3, #1
 8009504:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009506:	e066      	b.n	80095d6 <UART_SetConfig+0x18e>
 8009508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	4b50      	ldr	r3, [pc, #320]	@ (8009650 <UART_SetConfig+0x208>)
 800950e:	429a      	cmp	r2, r3
 8009510:	d102      	bne.n	8009518 <UART_SetConfig+0xd0>
 8009512:	2302      	movs	r3, #2
 8009514:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009516:	e05e      	b.n	80095d6 <UART_SetConfig+0x18e>
 8009518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	4b4d      	ldr	r3, [pc, #308]	@ (8009654 <UART_SetConfig+0x20c>)
 800951e:	429a      	cmp	r2, r3
 8009520:	d102      	bne.n	8009528 <UART_SetConfig+0xe0>
 8009522:	2304      	movs	r3, #4
 8009524:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009526:	e056      	b.n	80095d6 <UART_SetConfig+0x18e>
 8009528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	4b4a      	ldr	r3, [pc, #296]	@ (8009658 <UART_SetConfig+0x210>)
 800952e:	429a      	cmp	r2, r3
 8009530:	d102      	bne.n	8009538 <UART_SetConfig+0xf0>
 8009532:	2308      	movs	r3, #8
 8009534:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009536:	e04e      	b.n	80095d6 <UART_SetConfig+0x18e>
 8009538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	4b47      	ldr	r3, [pc, #284]	@ (800965c <UART_SetConfig+0x214>)
 800953e:	429a      	cmp	r2, r3
 8009540:	d102      	bne.n	8009548 <UART_SetConfig+0x100>
 8009542:	2310      	movs	r3, #16
 8009544:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009546:	e046      	b.n	80095d6 <UART_SetConfig+0x18e>
 8009548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	4b44      	ldr	r3, [pc, #272]	@ (8009660 <UART_SetConfig+0x218>)
 800954e:	429a      	cmp	r2, r3
 8009550:	d102      	bne.n	8009558 <UART_SetConfig+0x110>
 8009552:	2320      	movs	r3, #32
 8009554:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009556:	e03e      	b.n	80095d6 <UART_SetConfig+0x18e>
 8009558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	4b41      	ldr	r3, [pc, #260]	@ (8009664 <UART_SetConfig+0x21c>)
 800955e:	429a      	cmp	r2, r3
 8009560:	d102      	bne.n	8009568 <UART_SetConfig+0x120>
 8009562:	2340      	movs	r3, #64	@ 0x40
 8009564:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009566:	e036      	b.n	80095d6 <UART_SetConfig+0x18e>
 8009568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	4b3e      	ldr	r3, [pc, #248]	@ (8009668 <UART_SetConfig+0x220>)
 800956e:	429a      	cmp	r2, r3
 8009570:	d102      	bne.n	8009578 <UART_SetConfig+0x130>
 8009572:	2380      	movs	r3, #128	@ 0x80
 8009574:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009576:	e02e      	b.n	80095d6 <UART_SetConfig+0x18e>
 8009578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	4b3b      	ldr	r3, [pc, #236]	@ (800966c <UART_SetConfig+0x224>)
 800957e:	429a      	cmp	r2, r3
 8009580:	d103      	bne.n	800958a <UART_SetConfig+0x142>
 8009582:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009586:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009588:	e025      	b.n	80095d6 <UART_SetConfig+0x18e>
 800958a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	4b38      	ldr	r3, [pc, #224]	@ (8009670 <UART_SetConfig+0x228>)
 8009590:	429a      	cmp	r2, r3
 8009592:	d103      	bne.n	800959c <UART_SetConfig+0x154>
 8009594:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009598:	64bb      	str	r3, [r7, #72]	@ 0x48
 800959a:	e01c      	b.n	80095d6 <UART_SetConfig+0x18e>
 800959c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	4b34      	ldr	r3, [pc, #208]	@ (8009674 <UART_SetConfig+0x22c>)
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d103      	bne.n	80095ae <UART_SetConfig+0x166>
 80095a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80095aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095ac:	e013      	b.n	80095d6 <UART_SetConfig+0x18e>
 80095ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	4b31      	ldr	r3, [pc, #196]	@ (8009678 <UART_SetConfig+0x230>)
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d103      	bne.n	80095c0 <UART_SetConfig+0x178>
 80095b8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80095bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095be:	e00a      	b.n	80095d6 <UART_SetConfig+0x18e>
 80095c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	4b1e      	ldr	r3, [pc, #120]	@ (8009640 <UART_SetConfig+0x1f8>)
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d103      	bne.n	80095d2 <UART_SetConfig+0x18a>
 80095ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80095ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095d0:	e001      	b.n	80095d6 <UART_SetConfig+0x18e>
 80095d2:	2300      	movs	r3, #0
 80095d4:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80095d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	4b19      	ldr	r3, [pc, #100]	@ (8009640 <UART_SetConfig+0x1f8>)
 80095dc:	429a      	cmp	r2, r3
 80095de:	d005      	beq.n	80095ec <UART_SetConfig+0x1a4>
 80095e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	4b18      	ldr	r3, [pc, #96]	@ (8009648 <UART_SetConfig+0x200>)
 80095e6:	429a      	cmp	r2, r3
 80095e8:	f040 8094 	bne.w	8009714 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80095ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095ee:	2200      	movs	r2, #0
 80095f0:	623b      	str	r3, [r7, #32]
 80095f2:	627a      	str	r2, [r7, #36]	@ 0x24
 80095f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80095f8:	f7fc f9fc 	bl	80059f4 <HAL_RCCEx_GetPeriphCLKFreq>
 80095fc:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80095fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009600:	2b00      	cmp	r3, #0
 8009602:	f000 80f7 	beq.w	80097f4 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800960a:	4a1c      	ldr	r2, [pc, #112]	@ (800967c <UART_SetConfig+0x234>)
 800960c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009610:	461a      	mov	r2, r3
 8009612:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009614:	fbb3 f3f2 	udiv	r3, r3, r2
 8009618:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800961a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800961c:	685a      	ldr	r2, [r3, #4]
 800961e:	4613      	mov	r3, r2
 8009620:	005b      	lsls	r3, r3, #1
 8009622:	4413      	add	r3, r2
 8009624:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009626:	429a      	cmp	r2, r3
 8009628:	d305      	bcc.n	8009636 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800962a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009630:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009632:	429a      	cmp	r2, r3
 8009634:	d924      	bls.n	8009680 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800963c:	e069      	b.n	8009712 <UART_SetConfig+0x2ca>
 800963e:	bf00      	nop
 8009640:	44002400 	.word	0x44002400
 8009644:	cfff69f3 	.word	0xcfff69f3
 8009648:	54002400 	.word	0x54002400
 800964c:	40013800 	.word	0x40013800
 8009650:	40004400 	.word	0x40004400
 8009654:	40004800 	.word	0x40004800
 8009658:	40004c00 	.word	0x40004c00
 800965c:	40005000 	.word	0x40005000
 8009660:	40006400 	.word	0x40006400
 8009664:	40007800 	.word	0x40007800
 8009668:	40007c00 	.word	0x40007c00
 800966c:	40008000 	.word	0x40008000
 8009670:	40006800 	.word	0x40006800
 8009674:	40006c00 	.word	0x40006c00
 8009678:	40008400 	.word	0x40008400
 800967c:	0800bf18 	.word	0x0800bf18
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009680:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009682:	2200      	movs	r2, #0
 8009684:	61bb      	str	r3, [r7, #24]
 8009686:	61fa      	str	r2, [r7, #28]
 8009688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800968a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800968c:	4a64      	ldr	r2, [pc, #400]	@ (8009820 <UART_SetConfig+0x3d8>)
 800968e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009692:	b29b      	uxth	r3, r3
 8009694:	2200      	movs	r2, #0
 8009696:	613b      	str	r3, [r7, #16]
 8009698:	617a      	str	r2, [r7, #20]
 800969a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800969e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80096a2:	f7f6 fdf3 	bl	800028c <__aeabi_uldivmod>
 80096a6:	4602      	mov	r2, r0
 80096a8:	460b      	mov	r3, r1
 80096aa:	4610      	mov	r0, r2
 80096ac:	4619      	mov	r1, r3
 80096ae:	f04f 0200 	mov.w	r2, #0
 80096b2:	f04f 0300 	mov.w	r3, #0
 80096b6:	020b      	lsls	r3, r1, #8
 80096b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80096bc:	0202      	lsls	r2, r0, #8
 80096be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096c0:	6849      	ldr	r1, [r1, #4]
 80096c2:	0849      	lsrs	r1, r1, #1
 80096c4:	2000      	movs	r0, #0
 80096c6:	460c      	mov	r4, r1
 80096c8:	4605      	mov	r5, r0
 80096ca:	eb12 0804 	adds.w	r8, r2, r4
 80096ce:	eb43 0905 	adc.w	r9, r3, r5
 80096d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	60bb      	str	r3, [r7, #8]
 80096da:	60fa      	str	r2, [r7, #12]
 80096dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80096e0:	4640      	mov	r0, r8
 80096e2:	4649      	mov	r1, r9
 80096e4:	f7f6 fdd2 	bl	800028c <__aeabi_uldivmod>
 80096e8:	4602      	mov	r2, r0
 80096ea:	460b      	mov	r3, r1
 80096ec:	4613      	mov	r3, r2
 80096ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80096f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80096f6:	d308      	bcc.n	800970a <UART_SetConfig+0x2c2>
 80096f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80096fe:	d204      	bcs.n	800970a <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 8009700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009706:	60da      	str	r2, [r3, #12]
 8009708:	e003      	b.n	8009712 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800970a:	2301      	movs	r3, #1
 800970c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8009710:	e070      	b.n	80097f4 <UART_SetConfig+0x3ac>
 8009712:	e06f      	b.n	80097f4 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009716:	69db      	ldr	r3, [r3, #28]
 8009718:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800971c:	d13c      	bne.n	8009798 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800971e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009720:	2200      	movs	r2, #0
 8009722:	603b      	str	r3, [r7, #0]
 8009724:	607a      	str	r2, [r7, #4]
 8009726:	e9d7 0100 	ldrd	r0, r1, [r7]
 800972a:	f7fc f963 	bl	80059f4 <HAL_RCCEx_GetPeriphCLKFreq>
 800972e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009730:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009732:	2b00      	cmp	r3, #0
 8009734:	d05e      	beq.n	80097f4 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800973a:	4a39      	ldr	r2, [pc, #228]	@ (8009820 <UART_SetConfig+0x3d8>)
 800973c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009740:	461a      	mov	r2, r3
 8009742:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009744:	fbb3 f3f2 	udiv	r3, r3, r2
 8009748:	005a      	lsls	r2, r3, #1
 800974a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	085b      	lsrs	r3, r3, #1
 8009750:	441a      	add	r2, r3
 8009752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	fbb2 f3f3 	udiv	r3, r2, r3
 800975a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800975c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800975e:	2b0f      	cmp	r3, #15
 8009760:	d916      	bls.n	8009790 <UART_SetConfig+0x348>
 8009762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009768:	d212      	bcs.n	8009790 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800976a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800976c:	b29b      	uxth	r3, r3
 800976e:	f023 030f 	bic.w	r3, r3, #15
 8009772:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009776:	085b      	lsrs	r3, r3, #1
 8009778:	b29b      	uxth	r3, r3
 800977a:	f003 0307 	and.w	r3, r3, #7
 800977e:	b29a      	uxth	r2, r3
 8009780:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009782:	4313      	orrs	r3, r2
 8009784:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8009786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800978c:	60da      	str	r2, [r3, #12]
 800978e:	e031      	b.n	80097f4 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009796:	e02d      	b.n	80097f4 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009798:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800979a:	2200      	movs	r2, #0
 800979c:	469a      	mov	sl, r3
 800979e:	4693      	mov	fp, r2
 80097a0:	4650      	mov	r0, sl
 80097a2:	4659      	mov	r1, fp
 80097a4:	f7fc f926 	bl	80059f4 <HAL_RCCEx_GetPeriphCLKFreq>
 80097a8:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80097aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d021      	beq.n	80097f4 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097b4:	4a1a      	ldr	r2, [pc, #104]	@ (8009820 <UART_SetConfig+0x3d8>)
 80097b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097ba:	461a      	mov	r2, r3
 80097bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80097be:	fbb3 f2f2 	udiv	r2, r3, r2
 80097c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	085b      	lsrs	r3, r3, #1
 80097c8:	441a      	add	r2, r3
 80097ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80097d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097d6:	2b0f      	cmp	r3, #15
 80097d8:	d909      	bls.n	80097ee <UART_SetConfig+0x3a6>
 80097da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097e0:	d205      	bcs.n	80097ee <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80097e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097e4:	b29a      	uxth	r2, r3
 80097e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	60da      	str	r2, [r3, #12]
 80097ec:	e002      	b.n	80097f4 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 80097ee:	2301      	movs	r3, #1
 80097f0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80097f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097f6:	2201      	movs	r2, #1
 80097f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80097fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097fe:	2201      	movs	r2, #1
 8009800:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009806:	2200      	movs	r2, #0
 8009808:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800980a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800980c:	2200      	movs	r2, #0
 800980e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009810:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009814:	4618      	mov	r0, r3
 8009816:	3750      	adds	r7, #80	@ 0x50
 8009818:	46bd      	mov	sp, r7
 800981a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800981e:	bf00      	nop
 8009820:	0800bf18 	.word	0x0800bf18

08009824 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009830:	f003 0308 	and.w	r3, r3, #8
 8009834:	2b00      	cmp	r3, #0
 8009836:	d00a      	beq.n	800984e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	430a      	orrs	r2, r1
 800984c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009852:	f003 0301 	and.w	r3, r3, #1
 8009856:	2b00      	cmp	r3, #0
 8009858:	d00a      	beq.n	8009870 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	430a      	orrs	r2, r1
 800986e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009874:	f003 0302 	and.w	r3, r3, #2
 8009878:	2b00      	cmp	r3, #0
 800987a:	d00a      	beq.n	8009892 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	430a      	orrs	r2, r1
 8009890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009896:	f003 0304 	and.w	r3, r3, #4
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00a      	beq.n	80098b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	430a      	orrs	r2, r1
 80098b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098b8:	f003 0310 	and.w	r3, r3, #16
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d00a      	beq.n	80098d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	430a      	orrs	r2, r1
 80098d4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098da:	f003 0320 	and.w	r3, r3, #32
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00a      	beq.n	80098f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	430a      	orrs	r2, r1
 80098f6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009900:	2b00      	cmp	r3, #0
 8009902:	d01a      	beq.n	800993a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	430a      	orrs	r2, r1
 8009918:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800991e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009922:	d10a      	bne.n	800993a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	430a      	orrs	r2, r1
 8009938:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800993e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009942:	2b00      	cmp	r3, #0
 8009944:	d00a      	beq.n	800995c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	430a      	orrs	r2, r1
 800995a:	605a      	str	r2, [r3, #4]
  }
}
 800995c:	bf00      	nop
 800995e:	370c      	adds	r7, #12
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b098      	sub	sp, #96	@ 0x60
 800996c:	af02      	add	r7, sp, #8
 800996e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009978:	f7f8 fa40 	bl	8001dfc <HAL_GetTick>
 800997c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f003 0308 	and.w	r3, r3, #8
 8009988:	2b08      	cmp	r3, #8
 800998a:	d12f      	bne.n	80099ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800998c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009990:	9300      	str	r3, [sp, #0]
 8009992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009994:	2200      	movs	r2, #0
 8009996:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 f88e 	bl	8009abc <UART_WaitOnFlagUntilTimeout>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d022      	beq.n	80099ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ae:	e853 3f00 	ldrex	r3, [r3]
 80099b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80099b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80099ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	461a      	mov	r2, r3
 80099c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80099c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80099ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80099cc:	e841 2300 	strex	r3, r2, [r1]
 80099d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80099d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d1e6      	bne.n	80099a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2220      	movs	r2, #32
 80099dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099e8:	2303      	movs	r3, #3
 80099ea:	e063      	b.n	8009ab4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f003 0304 	and.w	r3, r3, #4
 80099f6:	2b04      	cmp	r3, #4
 80099f8:	d149      	bne.n	8009a8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80099fe:	9300      	str	r3, [sp, #0]
 8009a00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a02:	2200      	movs	r2, #0
 8009a04:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 f857 	bl	8009abc <UART_WaitOnFlagUntilTimeout>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d03c      	beq.n	8009a8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a1c:	e853 3f00 	ldrex	r3, [r3]
 8009a20:	623b      	str	r3, [r7, #32]
   return(result);
 8009a22:	6a3b      	ldr	r3, [r7, #32]
 8009a24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	461a      	mov	r2, r3
 8009a30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a32:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a34:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a3a:	e841 2300 	strex	r3, r2, [r1]
 8009a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d1e6      	bne.n	8009a14 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	3308      	adds	r3, #8
 8009a4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	e853 3f00 	ldrex	r3, [r3]
 8009a54:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f023 0301 	bic.w	r3, r3, #1
 8009a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	3308      	adds	r3, #8
 8009a64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a66:	61fa      	str	r2, [r7, #28]
 8009a68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a6a:	69b9      	ldr	r1, [r7, #24]
 8009a6c:	69fa      	ldr	r2, [r7, #28]
 8009a6e:	e841 2300 	strex	r3, r2, [r1]
 8009a72:	617b      	str	r3, [r7, #20]
   return(result);
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d1e5      	bne.n	8009a46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2220      	movs	r2, #32
 8009a7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2200      	movs	r2, #0
 8009a86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a8a:	2303      	movs	r3, #3
 8009a8c:	e012      	b.n	8009ab4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2220      	movs	r2, #32
 8009a92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2220      	movs	r2, #32
 8009a9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ab2:	2300      	movs	r3, #0
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3758      	adds	r7, #88	@ 0x58
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	603b      	str	r3, [r7, #0]
 8009ac8:	4613      	mov	r3, r2
 8009aca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009acc:	e04f      	b.n	8009b6e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ace:	69bb      	ldr	r3, [r7, #24]
 8009ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ad4:	d04b      	beq.n	8009b6e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ad6:	f7f8 f991 	bl	8001dfc <HAL_GetTick>
 8009ada:	4602      	mov	r2, r0
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	1ad3      	subs	r3, r2, r3
 8009ae0:	69ba      	ldr	r2, [r7, #24]
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d302      	bcc.n	8009aec <UART_WaitOnFlagUntilTimeout+0x30>
 8009ae6:	69bb      	ldr	r3, [r7, #24]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d101      	bne.n	8009af0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009aec:	2303      	movs	r3, #3
 8009aee:	e04e      	b.n	8009b8e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f003 0304 	and.w	r3, r3, #4
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d037      	beq.n	8009b6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	2b80      	cmp	r3, #128	@ 0x80
 8009b02:	d034      	beq.n	8009b6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	2b40      	cmp	r3, #64	@ 0x40
 8009b08:	d031      	beq.n	8009b6e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	69db      	ldr	r3, [r3, #28]
 8009b10:	f003 0308 	and.w	r3, r3, #8
 8009b14:	2b08      	cmp	r3, #8
 8009b16:	d110      	bne.n	8009b3a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2208      	movs	r2, #8
 8009b1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009b20:	68f8      	ldr	r0, [r7, #12]
 8009b22:	f000 f838 	bl	8009b96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2208      	movs	r2, #8
 8009b2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2200      	movs	r2, #0
 8009b32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009b36:	2301      	movs	r3, #1
 8009b38:	e029      	b.n	8009b8e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	69db      	ldr	r3, [r3, #28]
 8009b40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b48:	d111      	bne.n	8009b6e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009b52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009b54:	68f8      	ldr	r0, [r7, #12]
 8009b56:	f000 f81e 	bl	8009b96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2220      	movs	r2, #32
 8009b5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009b6a:	2303      	movs	r3, #3
 8009b6c:	e00f      	b.n	8009b8e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	69da      	ldr	r2, [r3, #28]
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	4013      	ands	r3, r2
 8009b78:	68ba      	ldr	r2, [r7, #8]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	bf0c      	ite	eq
 8009b7e:	2301      	moveq	r3, #1
 8009b80:	2300      	movne	r3, #0
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	461a      	mov	r2, r3
 8009b86:	79fb      	ldrb	r3, [r7, #7]
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d0a0      	beq.n	8009ace <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b8c:	2300      	movs	r3, #0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b96:	b480      	push	{r7}
 8009b98:	b095      	sub	sp, #84	@ 0x54
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ba6:	e853 3f00 	ldrex	r3, [r3]
 8009baa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	461a      	mov	r2, r3
 8009bba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8009bbe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009bc2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009bc4:	e841 2300 	strex	r3, r2, [r1]
 8009bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d1e6      	bne.n	8009b9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	3308      	adds	r3, #8
 8009bd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd8:	6a3b      	ldr	r3, [r7, #32]
 8009bda:	e853 3f00 	ldrex	r3, [r3]
 8009bde:	61fb      	str	r3, [r7, #28]
   return(result);
 8009be0:	69fb      	ldr	r3, [r7, #28]
 8009be2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009be6:	f023 0301 	bic.w	r3, r3, #1
 8009bea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	3308      	adds	r3, #8
 8009bf2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009bf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009bfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bfc:	e841 2300 	strex	r3, r2, [r1]
 8009c00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d1e3      	bne.n	8009bd0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d118      	bne.n	8009c42 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	e853 3f00 	ldrex	r3, [r3]
 8009c1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	f023 0310 	bic.w	r3, r3, #16
 8009c24:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c2e:	61bb      	str	r3, [r7, #24]
 8009c30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c32:	6979      	ldr	r1, [r7, #20]
 8009c34:	69ba      	ldr	r2, [r7, #24]
 8009c36:	e841 2300 	strex	r3, r2, [r1]
 8009c3a:	613b      	str	r3, [r7, #16]
   return(result);
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d1e6      	bne.n	8009c10 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2220      	movs	r2, #32
 8009c46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2200      	movs	r2, #0
 8009c54:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009c56:	bf00      	nop
 8009c58:	3754      	adds	r7, #84	@ 0x54
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr

08009c62 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009c62:	b480      	push	{r7}
 8009c64:	b085      	sub	sp, #20
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d101      	bne.n	8009c78 <HAL_UARTEx_DisableFifoMode+0x16>
 8009c74:	2302      	movs	r3, #2
 8009c76:	e027      	b.n	8009cc8 <HAL_UARTEx_DisableFifoMode+0x66>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2224      	movs	r2, #36	@ 0x24
 8009c84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f022 0201 	bic.w	r2, r2, #1
 8009c9e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009ca6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2200      	movs	r2, #0
 8009cac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	68fa      	ldr	r2, [r7, #12]
 8009cb4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2220      	movs	r2, #32
 8009cba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009cc6:	2300      	movs	r3, #0
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3714      	adds	r7, #20
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr

08009cd4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d101      	bne.n	8009cec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009ce8:	2302      	movs	r3, #2
 8009cea:	e02d      	b.n	8009d48 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2201      	movs	r2, #1
 8009cf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2224      	movs	r2, #36	@ 0x24
 8009cf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f022 0201 	bic.w	r2, r2, #1
 8009d12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	683a      	ldr	r2, [r7, #0]
 8009d24:	430a      	orrs	r2, r1
 8009d26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 f84f 	bl	8009dcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	68fa      	ldr	r2, [r7, #12]
 8009d34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2220      	movs	r2, #32
 8009d3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d46:	2300      	movs	r3, #0
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3710      	adds	r7, #16
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d101      	bne.n	8009d68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009d64:	2302      	movs	r3, #2
 8009d66:	e02d      	b.n	8009dc4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2224      	movs	r2, #36	@ 0x24
 8009d74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f022 0201 	bic.w	r2, r2, #1
 8009d8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	683a      	ldr	r2, [r7, #0]
 8009da0:	430a      	orrs	r2, r1
 8009da2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 f811 	bl	8009dcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	68fa      	ldr	r2, [r7, #12]
 8009db0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2220      	movs	r2, #32
 8009db6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009dc2:	2300      	movs	r3, #0
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3710      	adds	r7, #16
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b085      	sub	sp, #20
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d108      	bne.n	8009dee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2201      	movs	r2, #1
 8009de0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2201      	movs	r2, #1
 8009de8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009dec:	e031      	b.n	8009e52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009dee:	2308      	movs	r3, #8
 8009df0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009df2:	2308      	movs	r3, #8
 8009df4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	0e5b      	lsrs	r3, r3, #25
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	f003 0307 	and.w	r3, r3, #7
 8009e04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	0f5b      	lsrs	r3, r3, #29
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	f003 0307 	and.w	r3, r3, #7
 8009e14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e16:	7bbb      	ldrb	r3, [r7, #14]
 8009e18:	7b3a      	ldrb	r2, [r7, #12]
 8009e1a:	4911      	ldr	r1, [pc, #68]	@ (8009e60 <UARTEx_SetNbDataToProcess+0x94>)
 8009e1c:	5c8a      	ldrb	r2, [r1, r2]
 8009e1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009e22:	7b3a      	ldrb	r2, [r7, #12]
 8009e24:	490f      	ldr	r1, [pc, #60]	@ (8009e64 <UARTEx_SetNbDataToProcess+0x98>)
 8009e26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e28:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e2c:	b29a      	uxth	r2, r3
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e34:	7bfb      	ldrb	r3, [r7, #15]
 8009e36:	7b7a      	ldrb	r2, [r7, #13]
 8009e38:	4909      	ldr	r1, [pc, #36]	@ (8009e60 <UARTEx_SetNbDataToProcess+0x94>)
 8009e3a:	5c8a      	ldrb	r2, [r1, r2]
 8009e3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009e40:	7b7a      	ldrb	r2, [r7, #13]
 8009e42:	4908      	ldr	r1, [pc, #32]	@ (8009e64 <UARTEx_SetNbDataToProcess+0x98>)
 8009e44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e46:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e4a:	b29a      	uxth	r2, r3
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009e52:	bf00      	nop
 8009e54:	3714      	adds	r7, #20
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr
 8009e5e:	bf00      	nop
 8009e60:	0800bf30 	.word	0x0800bf30
 8009e64:	0800bf38 	.word	0x0800bf38

08009e68 <bgt60utr13d_modify_sfctl>:
 * All other bits are kept the same.
 * @param r struct holding register fields
 * @param val current binary register representation
 * @return packed register representation
 */
static inline  uint32_t bgt60utr13d_modify_sfctl(const struct bgt60utr13d_reg_sfctl *r, uint32_t val){
 8009e68:	b480      	push	{r7}
 8009e6a:	b083      	sub	sp, #12
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
  val = (val & ~0x1FFFU) | (uint32_t) ((r->fifo_cref & 0x1FFFU) << 0U);
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8009e78:	f023 031f 	bic.w	r3, r3, #31
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	8812      	ldrh	r2, [r2, #0]
 8009e80:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8009e84:	b292      	uxth	r2, r2
 8009e86:	4313      	orrs	r3, r2
 8009e88:	603b      	str	r3, [r7, #0]
  val = (val & ~0xC000U) | (uint32_t) ((r->fifo_pd_mode & 0x3U) << 14U);
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	785b      	ldrb	r3, [r3, #1]
 8009e94:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	039b      	lsls	r3, r3, #14
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	603b      	str	r3, [r7, #0]
  val = (val & ~0x10000U) | (uint32_t) ((r->miso_hs_read & 0x1U) << 16U);
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	785b      	ldrb	r3, [r3, #1]
 8009eaa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	041b      	lsls	r3, r3, #16
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	603b      	str	r3, [r7, #0]
  val = (val & ~0x20000U) | (uint32_t) ((r->lfsr_en & 0x1U) << 17U);
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	789b      	ldrb	r3, [r3, #2]
 8009ec0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009ec4:	b2db      	uxtb	r3, r3
 8009ec6:	045b      	lsls	r3, r3, #17
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	603b      	str	r3, [r7, #0]
  val = (val & ~0x40000U) | (uint32_t) ((r->prefix_en & 0x1U) << 18U);
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	789b      	ldrb	r3, [r3, #2]
 8009ed6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	049b      	lsls	r3, r3, #18
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	603b      	str	r3, [r7, #0]
  val = (val & ~0x80000U) | (uint32_t) ((r->pad_mode & 0x1U) << 19U);
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	789b      	ldrb	r3, [r3, #2]
 8009eec:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	04db      	lsls	r3, r3, #19
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	603b      	str	r3, [r7, #0]
 return val;
 8009ef8:	683b      	ldr	r3, [r7, #0]
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	370c      	adds	r7, #12
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr

08009f06 <bgt60utr13d_pack_sfctl>:
 * All 'always_write' bits (if any) are set to the correct value.
 * All other bits are are set to 0.
 * @param r struct holding register fields
 * @return packed register representation
 */
static inline  uint32_t bgt60utr13d_pack_sfctl(const struct bgt60utr13d_reg_sfctl *r){
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b082      	sub	sp, #8
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
  return bgt60utr13d_modify_sfctl(r, 0);
 8009f0e:	2100      	movs	r1, #0
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f7ff ffa9 	bl	8009e68 <bgt60utr13d_modify_sfctl>
 8009f16:	4603      	mov	r3, r0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3708      	adds	r7, #8
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <bgt60utr13d_unpack_sfctl>:
/**
 * @brief Unpack the 'SFCTL' register's binary representation into seperate fields
 * @param r buffer to store the unpacked fields
 * @param val packed register representation
 */
static inline void bgt60utr13d_unpack_sfctl(struct bgt60utr13d_reg_sfctl *r, uint32_t val){
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
  r->fifo_cref = (uint16_t) ((val & 0x1FFFU) >> 0U);
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f30:	b299      	uxth	r1, r3
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	8813      	ldrh	r3, [r2, #0]
 8009f36:	f361 030c 	bfi	r3, r1, #0, #13
 8009f3a:	8013      	strh	r3, [r2, #0]
  r->fifo_pd_mode = (uint8_t) ((val & 0xC000U) >> 14U);
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	0b9b      	lsrs	r3, r3, #14
 8009f40:	f003 0303 	and.w	r3, r3, #3
 8009f44:	b2d9      	uxtb	r1, r3
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	7853      	ldrb	r3, [r2, #1]
 8009f4a:	f361 1346 	bfi	r3, r1, #5, #2
 8009f4e:	7053      	strb	r3, [r2, #1]
  r->miso_hs_read = (uint8_t) ((val & 0x10000U) >> 16U);
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	0c1b      	lsrs	r3, r3, #16
 8009f54:	f003 0301 	and.w	r3, r3, #1
 8009f58:	b2d9      	uxtb	r1, r3
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	7853      	ldrb	r3, [r2, #1]
 8009f5e:	f361 13c7 	bfi	r3, r1, #7, #1
 8009f62:	7053      	strb	r3, [r2, #1]
  r->lfsr_en = (uint8_t) ((val & 0x20000U) >> 17U);
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	0c5b      	lsrs	r3, r3, #17
 8009f68:	f003 0301 	and.w	r3, r3, #1
 8009f6c:	b2d9      	uxtb	r1, r3
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	7893      	ldrb	r3, [r2, #2]
 8009f72:	f361 0300 	bfi	r3, r1, #0, #1
 8009f76:	7093      	strb	r3, [r2, #2]
  r->prefix_en = (uint8_t) ((val & 0x40000U) >> 18U);
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	0c9b      	lsrs	r3, r3, #18
 8009f7c:	f003 0301 	and.w	r3, r3, #1
 8009f80:	b2d9      	uxtb	r1, r3
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	7893      	ldrb	r3, [r2, #2]
 8009f86:	f361 0341 	bfi	r3, r1, #1, #1
 8009f8a:	7093      	strb	r3, [r2, #2]
  r->pad_mode = (uint8_t) ((val & 0x80000U) >> 19U);
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	0cdb      	lsrs	r3, r3, #19
 8009f90:	f003 0301 	and.w	r3, r3, #1
 8009f94:	b2d9      	uxtb	r1, r3
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	7893      	ldrb	r3, [r2, #2]
 8009f9a:	f361 0382 	bfi	r3, r1, #2, #1
 8009f9e:	7093      	strb	r3, [r2, #2]
}
 8009fa0:	bf00      	nop
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr

08009fac <bgt60utr13d_init>:
// ======== Public Functions =================================================================

// Init

bgt60utr13d_err_t bgt60utr13d_init(const struct bgt60utr13d_h *h) 
{
 8009fac:	b590      	push	{r4, r7, lr}
 8009fae:	b085      	sub	sp, #20
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  bgt60utr13d_err_t err = E_BGT60UTR13D_SUCCESS;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	73fb      	strb	r3, [r7, #15]

  DRVR_LOG("[INIT] Started");
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d00a      	beq.n	8009fd4 <bgt60utr13d_init+0x28>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d006      	beq.n	8009fd4 <bgt60utr13d_init+0x28>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	68dc      	ldr	r4, [r3, #12]
 8009fca:	2300      	movs	r3, #0
 8009fcc:	2200      	movs	r2, #0
 8009fce:	2100      	movs	r1, #0
 8009fd0:	4847      	ldr	r0, [pc, #284]	@ (800a0f0 <bgt60utr13d_init+0x144>)
 8009fd2:	47a0      	blx	r4

  err |= validate_handle(h);
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 f8e1 	bl	800a19c <validate_handle>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	461a      	mov	r2, r3
 8009fde:	7bfb      	ldrb	r3, [r7, #15]
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	73fb      	strb	r3, [r7, #15]
  if (err) {
 8009fe4:	7bfb      	ldrb	r3, [r7, #15]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d00f      	beq.n	800a00a <bgt60utr13d_init+0x5e>
    DRVR_LOG("[INIT] Check handle: Failed");
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d00a      	beq.n	800a006 <bgt60utr13d_init+0x5a>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d006      	beq.n	800a006 <bgt60utr13d_init+0x5a>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	68dc      	ldr	r4, [r3, #12]
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	2200      	movs	r2, #0
 800a000:	2100      	movs	r1, #0
 800a002:	483c      	ldr	r0, [pc, #240]	@ (800a0f4 <bgt60utr13d_init+0x148>)
 800a004:	47a0      	blx	r4
    return err;
 800a006:	7bfb      	ldrb	r3, [r7, #15]
 800a008:	e06e      	b.n	800a0e8 <bgt60utr13d_init+0x13c>
  }
  DRVR_LOG("[INIT] Check handle: Success");
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d00a      	beq.n	800a026 <bgt60utr13d_init+0x7a>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	68db      	ldr	r3, [r3, #12]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d006      	beq.n	800a026 <bgt60utr13d_init+0x7a>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	68dc      	ldr	r4, [r3, #12]
 800a01c:	2300      	movs	r3, #0
 800a01e:	2200      	movs	r2, #0
 800a020:	2100      	movs	r1, #0
 800a022:	4835      	ldr	r0, [pc, #212]	@ (800a0f8 <bgt60utr13d_init+0x14c>)
 800a024:	47a0      	blx	r4

  err |= bgt60utr13d_hard_reset(h);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 f872 	bl	800a110 <bgt60utr13d_hard_reset>
 800a02c:	4603      	mov	r3, r0
 800a02e:	461a      	mov	r2, r3
 800a030:	7bfb      	ldrb	r3, [r7, #15]
 800a032:	4313      	orrs	r3, r2
 800a034:	73fb      	strb	r3, [r7, #15]
  if (err) {
 800a036:	7bfb      	ldrb	r3, [r7, #15]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d00f      	beq.n	800a05c <bgt60utr13d_init+0xb0>
    DRVR_LOG("[INIT] Hardware reset: Failed");
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d00a      	beq.n	800a058 <bgt60utr13d_init+0xac>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	68db      	ldr	r3, [r3, #12]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d006      	beq.n	800a058 <bgt60utr13d_init+0xac>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	68dc      	ldr	r4, [r3, #12]
 800a04e:	2300      	movs	r3, #0
 800a050:	2200      	movs	r2, #0
 800a052:	2100      	movs	r1, #0
 800a054:	4829      	ldr	r0, [pc, #164]	@ (800a0fc <bgt60utr13d_init+0x150>)
 800a056:	47a0      	blx	r4
    return err;
 800a058:	7bfb      	ldrb	r3, [r7, #15]
 800a05a:	e045      	b.n	800a0e8 <bgt60utr13d_init+0x13c>
  }
  DRVR_LOG("[INIT] Hardware reset: Success");
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d00a      	beq.n	800a078 <bgt60utr13d_init+0xcc>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	68db      	ldr	r3, [r3, #12]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d006      	beq.n	800a078 <bgt60utr13d_init+0xcc>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	68dc      	ldr	r4, [r3, #12]
 800a06e:	2300      	movs	r3, #0
 800a070:	2200      	movs	r2, #0
 800a072:	2100      	movs	r1, #0
 800a074:	4822      	ldr	r0, [pc, #136]	@ (800a100 <bgt60utr13d_init+0x154>)
 800a076:	47a0      	blx	r4
  
  err |= check_connection(h);
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 f8f7 	bl	800a26c <check_connection>
 800a07e:	4603      	mov	r3, r0
 800a080:	461a      	mov	r2, r3
 800a082:	7bfb      	ldrb	r3, [r7, #15]
 800a084:	4313      	orrs	r3, r2
 800a086:	73fb      	strb	r3, [r7, #15]
  if (err) {
 800a088:	7bfb      	ldrb	r3, [r7, #15]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d00f      	beq.n	800a0ae <bgt60utr13d_init+0x102>
    DRVR_LOG("[INIT] Read/Write test: Failed");
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d00a      	beq.n	800a0aa <bgt60utr13d_init+0xfe>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d006      	beq.n	800a0aa <bgt60utr13d_init+0xfe>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	68dc      	ldr	r4, [r3, #12]
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	2100      	movs	r1, #0
 800a0a6:	4817      	ldr	r0, [pc, #92]	@ (800a104 <bgt60utr13d_init+0x158>)
 800a0a8:	47a0      	blx	r4
    return err;
 800a0aa:	7bfb      	ldrb	r3, [r7, #15]
 800a0ac:	e01c      	b.n	800a0e8 <bgt60utr13d_init+0x13c>
  }
  DRVR_LOG("[INIT] Read/Write test: Success");
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d00a      	beq.n	800a0ca <bgt60utr13d_init+0x11e>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d006      	beq.n	800a0ca <bgt60utr13d_init+0x11e>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	68dc      	ldr	r4, [r3, #12]
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	2100      	movs	r1, #0
 800a0c6:	4810      	ldr	r0, [pc, #64]	@ (800a108 <bgt60utr13d_init+0x15c>)
 800a0c8:	47a0      	blx	r4

  DRVR_LOG("[Init] Success");
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d00a      	beq.n	800a0e6 <bgt60utr13d_init+0x13a>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	68db      	ldr	r3, [r3, #12]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d006      	beq.n	800a0e6 <bgt60utr13d_init+0x13a>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	68dc      	ldr	r4, [r3, #12]
 800a0dc:	2300      	movs	r3, #0
 800a0de:	2200      	movs	r2, #0
 800a0e0:	2100      	movs	r1, #0
 800a0e2:	480a      	ldr	r0, [pc, #40]	@ (800a10c <bgt60utr13d_init+0x160>)
 800a0e4:	47a0      	blx	r4

  return err;
 800a0e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3714      	adds	r7, #20
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd90      	pop	{r4, r7, pc}
 800a0f0:	0800b810 	.word	0x0800b810
 800a0f4:	0800b820 	.word	0x0800b820
 800a0f8:	0800b83c 	.word	0x0800b83c
 800a0fc:	0800b85c 	.word	0x0800b85c
 800a100:	0800b87c 	.word	0x0800b87c
 800a104:	0800b89c 	.word	0x0800b89c
 800a108:	0800b8bc 	.word	0x0800b8bc
 800a10c:	0800b8dc 	.word	0x0800b8dc

0800a110 <bgt60utr13d_hard_reset>:


// Resets

bgt60utr13d_err_t bgt60utr13d_hard_reset(const struct bgt60utr13d_h *h)
{
 800a110:	b590      	push	{r4, r7, lr}
 800a112:	b085      	sub	sp, #20
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  bgt60utr13d_err_t err = E_BGT60UTR13D_SUCCESS;
 800a118:	2300      	movs	r3, #0
 800a11a:	73fb      	strb	r3, [r7, #15]

  // Check handle
  err |= validate_handle(h);
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 f83d 	bl	800a19c <validate_handle>
 800a122:	4603      	mov	r3, r0
 800a124:	461a      	mov	r2, r3
 800a126:	7bfb      	ldrb	r3, [r7, #15]
 800a128:	4313      	orrs	r3, r2
 800a12a:	73fb      	strb	r3, [r7, #15]
  if(err) return err;
 800a12c:	7bfb      	ldrb	r3, [r7, #15]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d001      	beq.n	800a136 <bgt60utr13d_hard_reset+0x26>
 800a132:	7bfb      	ldrb	r3, [r7, #15]
 800a134:	e029      	b.n	800a18a <bgt60utr13d_hard_reset+0x7a>

  err |= h->hard_reset();
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	689b      	ldr	r3, [r3, #8]
 800a13a:	4798      	blx	r3
 800a13c:	4603      	mov	r3, r0
 800a13e:	461a      	mov	r2, r3
 800a140:	7bfb      	ldrb	r3, [r7, #15]
 800a142:	4313      	orrs	r3, r2
 800a144:	73fb      	strb	r3, [r7, #15]
  if(err) {
 800a146:	7bfb      	ldrb	r3, [r7, #15]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d00f      	beq.n	800a16c <bgt60utr13d_hard_reset+0x5c>
    DRVR_ERR("Hardware reset failed");
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d00a      	beq.n	800a168 <bgt60utr13d_hard_reset+0x58>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	68db      	ldr	r3, [r3, #12]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d006      	beq.n	800a168 <bgt60utr13d_hard_reset+0x58>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	68dc      	ldr	r4, [r3, #12]
 800a15e:	2300      	movs	r3, #0
 800a160:	2200      	movs	r2, #0
 800a162:	2101      	movs	r1, #1
 800a164:	480b      	ldr	r0, [pc, #44]	@ (800a194 <bgt60utr13d_hard_reset+0x84>)
 800a166:	47a0      	blx	r4
    return err;
 800a168:	7bfb      	ldrb	r3, [r7, #15]
 800a16a:	e00e      	b.n	800a18a <bgt60utr13d_hard_reset+0x7a>
  }

  DRVR_LOG("Performed hardware reset");
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d00a      	beq.n	800a188 <bgt60utr13d_hard_reset+0x78>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	68db      	ldr	r3, [r3, #12]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d006      	beq.n	800a188 <bgt60utr13d_hard_reset+0x78>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	68dc      	ldr	r4, [r3, #12]
 800a17e:	2300      	movs	r3, #0
 800a180:	2200      	movs	r2, #0
 800a182:	2100      	movs	r1, #0
 800a184:	4804      	ldr	r0, [pc, #16]	@ (800a198 <bgt60utr13d_hard_reset+0x88>)
 800a186:	47a0      	blx	r4

  return err;
 800a188:	7bfb      	ldrb	r3, [r7, #15]
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3714      	adds	r7, #20
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd90      	pop	{r4, r7, pc}
 800a192:	bf00      	nop
 800a194:	0800b8ec 	.word	0x0800b8ec
 800a198:	0800b904 	.word	0x0800b904

0800a19c <validate_handle>:
// ======== Private Functions =================================================================

// General functions

bgt60utr13d_err_t validate_handle(const struct bgt60utr13d_h *h) 
{
 800a19c:	b590      	push	{r4, r7, lr}
 800a19e:	b085      	sub	sp, #20
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  bgt60utr13d_err_t err = E_BGT60UTR13D_SUCCESS;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	73fb      	strb	r3, [r7, #15]

  if (h == 0) {
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d10f      	bne.n	800a1ce <validate_handle+0x32>
    DRVR_ERR("Handle is nullptr!")
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d00a      	beq.n	800a1ca <validate_handle+0x2e>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	68db      	ldr	r3, [r3, #12]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d006      	beq.n	800a1ca <validate_handle+0x2e>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	68dc      	ldr	r4, [r3, #12]
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	2101      	movs	r1, #1
 800a1c6:	4825      	ldr	r0, [pc, #148]	@ (800a25c <validate_handle+0xc0>)
 800a1c8:	47a0      	blx	r4
    return E_BGT60UTR13D_NULLPTR_ERR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	e042      	b.n	800a254 <validate_handle+0xb8>
  }

  if (h->read_regs == 0) {
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d111      	bne.n	800a1fa <validate_handle+0x5e>
    DRVR_ERR("Read_regs is nullptr!")
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d00a      	beq.n	800a1f2 <validate_handle+0x56>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	68db      	ldr	r3, [r3, #12]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d006      	beq.n	800a1f2 <validate_handle+0x56>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	68dc      	ldr	r4, [r3, #12]
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	2101      	movs	r1, #1
 800a1ee:	481c      	ldr	r0, [pc, #112]	@ (800a260 <validate_handle+0xc4>)
 800a1f0:	47a0      	blx	r4
    err |= E_BGT60UTR13D_NULLPTR_ERR;
 800a1f2:	7bfb      	ldrb	r3, [r7, #15]
 800a1f4:	f043 0301 	orr.w	r3, r3, #1
 800a1f8:	73fb      	strb	r3, [r7, #15]
  }

  if (h->write_regs == 0) {
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d111      	bne.n	800a226 <validate_handle+0x8a>
    DRVR_ERR("Write_regs is nullptr!")
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d00a      	beq.n	800a21e <validate_handle+0x82>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	68db      	ldr	r3, [r3, #12]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d006      	beq.n	800a21e <validate_handle+0x82>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	68dc      	ldr	r4, [r3, #12]
 800a214:	2300      	movs	r3, #0
 800a216:	2200      	movs	r2, #0
 800a218:	2101      	movs	r1, #1
 800a21a:	4812      	ldr	r0, [pc, #72]	@ (800a264 <validate_handle+0xc8>)
 800a21c:	47a0      	blx	r4
    err |= E_BGT60UTR13D_NULLPTR_ERR;
 800a21e:	7bfb      	ldrb	r3, [r7, #15]
 800a220:	f043 0301 	orr.w	r3, r3, #1
 800a224:	73fb      	strb	r3, [r7, #15]
  }

  if (h->hard_reset == 0) {
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d111      	bne.n	800a252 <validate_handle+0xb6>
    DRVR_ERR("Hard_reset is nullptr!")
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d00a      	beq.n	800a24a <validate_handle+0xae>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	68db      	ldr	r3, [r3, #12]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d006      	beq.n	800a24a <validate_handle+0xae>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	68dc      	ldr	r4, [r3, #12]
 800a240:	2300      	movs	r3, #0
 800a242:	2200      	movs	r2, #0
 800a244:	2101      	movs	r1, #1
 800a246:	4808      	ldr	r0, [pc, #32]	@ (800a268 <validate_handle+0xcc>)
 800a248:	47a0      	blx	r4
    err |= E_BGT60UTR13D_NULLPTR_ERR;
 800a24a:	7bfb      	ldrb	r3, [r7, #15]
 800a24c:	f043 0301 	orr.w	r3, r3, #1
 800a250:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800a252:	7bfb      	ldrb	r3, [r7, #15]
}
 800a254:	4618      	mov	r0, r3
 800a256:	3714      	adds	r7, #20
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd90      	pop	{r4, r7, pc}
 800a25c:	0800bb88 	.word	0x0800bb88
 800a260:	0800bb9c 	.word	0x0800bb9c
 800a264:	0800bbb4 	.word	0x0800bbb4
 800a268:	0800bbcc 	.word	0x0800bbcc

0800a26c <check_connection>:

bgt60utr13d_err_t check_connection(const struct bgt60utr13d_h *h) 
{
 800a26c:	b590      	push	{r4, r7, lr}
 800a26e:	b08b      	sub	sp, #44	@ 0x2c
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  bgt60utr13d_err_t err = E_BGT60UTR13D_SUCCESS;
 800a274:	2300      	movs	r3, #0
 800a276:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t transmit_buff[3];
  uint32_t packed_reg_buf;

  // *** Check implemented read function ***
  // Read CHIP_Version register:
  err |= read_regs(h, BGT60UTR13D_REG_CHIP_VERSION, SINGLE_REG_MODE, (uint8_t *) receive_buff);
 800a27a:	f107 0318 	add.w	r3, r7, #24
 800a27e:	2200      	movs	r2, #0
 800a280:	2102      	movs	r1, #2
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 f984 	bl	800a590 <read_regs>
 800a288:	4603      	mov	r3, r0
 800a28a:	461a      	mov	r2, r3
 800a28c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a290:	4313      	orrs	r3, r2
 800a292:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(err){
 800a296:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d010      	beq.n	800a2c0 <check_connection+0x54>
    DRVR_ERR("Failed to read CHIP_Version register!");
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d00a      	beq.n	800a2ba <check_connection+0x4e>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d006      	beq.n	800a2ba <check_connection+0x4e>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	68dc      	ldr	r4, [r3, #12]
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	2101      	movs	r1, #1
 800a2b6:	486d      	ldr	r0, [pc, #436]	@ (800a46c <check_connection+0x200>)
 800a2b8:	47a0      	blx	r4
    return err;
 800a2ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2be:	e0d0      	b.n	800a462 <check_connection+0x1f6>
  }

  // Check WHO_AM_I (CHIP_Version:DIGITAL_ID and CHIP_Version:RF_ID) value
  uint32_t who_am_i = EXTRACT_REGISTER(receive_buff) & 0xffff; // Only last 16 bits
 800a2c0:	7e7b      	ldrb	r3, [r7, #25]
 800a2c2:	041a      	lsls	r2, r3, #16
 800a2c4:	7ebb      	ldrb	r3, [r7, #26]
 800a2c6:	021b      	lsls	r3, r3, #8
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	7efa      	ldrb	r2, [r7, #27]
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	623b      	str	r3, [r7, #32]
  if(who_am_i != (BGT60UTR13D_REG_CHIP_VERSION__RESETVAL & 0xffff)){
 800a2d2:	6a3b      	ldr	r3, [r7, #32]
 800a2d4:	f240 6206 	movw	r2, #1542	@ 0x606
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d01e      	beq.n	800a31a <check_connection+0xae>
    DRVR_ERR_VAR("Wrong CHIP_Version value: ", who_am_i);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d00a      	beq.n	800a2f8 <check_connection+0x8c>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	68db      	ldr	r3, [r3, #12]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d006      	beq.n	800a2f8 <check_connection+0x8c>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	68dc      	ldr	r4, [r3, #12]
 800a2ee:	6a3b      	ldr	r3, [r7, #32]
 800a2f0:	2201      	movs	r2, #1
 800a2f2:	2101      	movs	r1, #1
 800a2f4:	485e      	ldr	r0, [pc, #376]	@ (800a470 <check_connection+0x204>)
 800a2f6:	47a0      	blx	r4
    DRVR_ERR_VAR("Expected CHIP_Version value: ", (BGT60UTR13D_REG_CHIP_VERSION__RESETVAL & 0xffff));
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00b      	beq.n	800a316 <check_connection+0xaa>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d007      	beq.n	800a316 <check_connection+0xaa>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	68dc      	ldr	r4, [r3, #12]
 800a30a:	f240 6306 	movw	r3, #1542	@ 0x606
 800a30e:	2201      	movs	r2, #1
 800a310:	2101      	movs	r1, #1
 800a312:	4858      	ldr	r0, [pc, #352]	@ (800a474 <check_connection+0x208>)
 800a314:	47a0      	blx	r4
    return E_BGT60UTR13D_COM_ERR;
 800a316:	2302      	movs	r3, #2
 800a318:	e0a3      	b.n	800a462 <check_connection+0x1f6>
  }
  DRVR_LOG("Correct CHIP_Version value");
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d00a      	beq.n	800a336 <check_connection+0xca>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	68db      	ldr	r3, [r3, #12]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d006      	beq.n	800a336 <check_connection+0xca>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	68dc      	ldr	r4, [r3, #12]
 800a32c:	2300      	movs	r3, #0
 800a32e:	2200      	movs	r2, #0
 800a330:	2100      	movs	r1, #0
 800a332:	4851      	ldr	r0, [pc, #324]	@ (800a478 <check_connection+0x20c>)
 800a334:	47a0      	blx	r4

  // *** Check implemented write function *** 
  // Disable high_speed_read in SFCTL, reset value is enabled
  struct bgt60utr13d_reg_sfctl reg_sfctl;
  GET_SINGLE_REG(&reg_sfctl, BGT60UTR13D_REG_SFCTL, bgt60utr13d_unpack_sfctl, receive_buff);
 800a336:	f107 0318 	add.w	r3, r7, #24
 800a33a:	2200      	movs	r2, #0
 800a33c:	2106      	movs	r1, #6
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 f926 	bl	800a590 <read_regs>
 800a344:	4603      	mov	r3, r0
 800a346:	461a      	mov	r2, r3
 800a348:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a34c:	4313      	orrs	r3, r2
 800a34e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a352:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a356:	2b00      	cmp	r3, #0
 800a358:	d002      	beq.n	800a360 <check_connection+0xf4>
 800a35a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a35e:	e080      	b.n	800a462 <check_connection+0x1f6>
 800a360:	7e7b      	ldrb	r3, [r7, #25]
 800a362:	041a      	lsls	r2, r3, #16
 800a364:	7ebb      	ldrb	r3, [r7, #26]
 800a366:	021b      	lsls	r3, r3, #8
 800a368:	4313      	orrs	r3, r2
 800a36a:	7efa      	ldrb	r2, [r7, #27]
 800a36c:	4313      	orrs	r3, r2
 800a36e:	461a      	mov	r2, r3
 800a370:	f107 0310 	add.w	r3, r7, #16
 800a374:	4611      	mov	r1, r2
 800a376:	4618      	mov	r0, r3
 800a378:	f7ff fdd2 	bl	8009f20 <bgt60utr13d_unpack_sfctl>
  reg_sfctl.miso_hs_read = 0;
 800a37c:	7c7b      	ldrb	r3, [r7, #17]
 800a37e:	f36f 13c7 	bfc	r3, #7, #1
 800a382:	747b      	strb	r3, [r7, #17]
  SET_SINGLE_REG(&reg_sfctl, BGT60UTR13D_REG_SFCTL, bgt60utr13d_pack_sfctl, packed_reg_buf, transmit_buff);
 800a384:	f107 0310 	add.w	r3, r7, #16
 800a388:	4618      	mov	r0, r3
 800a38a:	f7ff fdbc 	bl	8009f06 <bgt60utr13d_pack_sfctl>
 800a38e:	61f8      	str	r0, [r7, #28]
 800a390:	69fb      	ldr	r3, [r7, #28]
 800a392:	0c1b      	lsrs	r3, r3, #16
 800a394:	b2db      	uxtb	r3, r3
 800a396:	753b      	strb	r3, [r7, #20]
 800a398:	69fb      	ldr	r3, [r7, #28]
 800a39a:	0a1b      	lsrs	r3, r3, #8
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	757b      	strb	r3, [r7, #21]
 800a3a0:	69fb      	ldr	r3, [r7, #28]
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	75bb      	strb	r3, [r7, #22]
 800a3a6:	f107 0314 	add.w	r3, r7, #20
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	2106      	movs	r1, #6
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 f95e 	bl	800a670 <write_regs>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a3c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d002      	beq.n	800a3d0 <check_connection+0x164>
 800a3ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a3ce:	e048      	b.n	800a462 <check_connection+0x1f6>

  // Read SFCTL:MISO_HS_READ to check if changes applied
  struct bgt60utr13d_reg_sfctl reg_sfctl_test;
  GET_SINGLE_REG(&reg_sfctl_test, BGT60UTR13D_REG_SFCTL, bgt60utr13d_unpack_sfctl, receive_buff);
 800a3d0:	f107 0318 	add.w	r3, r7, #24
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	2106      	movs	r1, #6
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 f8d9 	bl	800a590 <read_regs>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a3ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d002      	beq.n	800a3fa <check_connection+0x18e>
 800a3f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a3f8:	e033      	b.n	800a462 <check_connection+0x1f6>
 800a3fa:	7e7b      	ldrb	r3, [r7, #25]
 800a3fc:	041a      	lsls	r2, r3, #16
 800a3fe:	7ebb      	ldrb	r3, [r7, #26]
 800a400:	021b      	lsls	r3, r3, #8
 800a402:	4313      	orrs	r3, r2
 800a404:	7efa      	ldrb	r2, [r7, #27]
 800a406:	4313      	orrs	r3, r2
 800a408:	461a      	mov	r2, r3
 800a40a:	f107 030c 	add.w	r3, r7, #12
 800a40e:	4611      	mov	r1, r2
 800a410:	4618      	mov	r0, r3
 800a412:	f7ff fd85 	bl	8009f20 <bgt60utr13d_unpack_sfctl>
  if(reg_sfctl.miso_hs_read != 0)
 800a416:	7c7b      	ldrb	r3, [r7, #17]
 800a418:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d00f      	beq.n	800a442 <check_connection+0x1d6>
  {
    DRVR_ERR("Write to SFCTL failed!")
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d00a      	beq.n	800a43e <check_connection+0x1d2>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	68db      	ldr	r3, [r3, #12]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d006      	beq.n	800a43e <check_connection+0x1d2>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	68dc      	ldr	r4, [r3, #12]
 800a434:	2300      	movs	r3, #0
 800a436:	2200      	movs	r2, #0
 800a438:	2101      	movs	r1, #1
 800a43a:	4810      	ldr	r0, [pc, #64]	@ (800a47c <check_connection+0x210>)
 800a43c:	47a0      	blx	r4
    return E_BGT60UTR13D_COM_ERR;
 800a43e:	2302      	movs	r3, #2
 800a440:	e00f      	b.n	800a462 <check_connection+0x1f6>
  }
  DRVR_LOG("Disabled high speed read");
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d00a      	beq.n	800a45e <check_connection+0x1f2>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	68db      	ldr	r3, [r3, #12]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d006      	beq.n	800a45e <check_connection+0x1f2>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	68dc      	ldr	r4, [r3, #12]
 800a454:	2300      	movs	r3, #0
 800a456:	2200      	movs	r2, #0
 800a458:	2100      	movs	r1, #0
 800a45a:	4809      	ldr	r0, [pc, #36]	@ (800a480 <check_connection+0x214>)
 800a45c:	47a0      	blx	r4

  return err;
 800a45e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a462:	4618      	mov	r0, r3
 800a464:	372c      	adds	r7, #44	@ 0x2c
 800a466:	46bd      	mov	sp, r7
 800a468:	bd90      	pop	{r4, r7, pc}
 800a46a:	bf00      	nop
 800a46c:	0800bbe4 	.word	0x0800bbe4
 800a470:	0800bc0c 	.word	0x0800bc0c
 800a474:	0800bc28 	.word	0x0800bc28
 800a478:	0800bc48 	.word	0x0800bc48
 800a47c:	0800bc64 	.word	0x0800bc64
 800a480:	0800bc7c 	.word	0x0800bc7c

0800a484 <check_global_status>:

bgt60utr13d_err_t check_global_status(const struct bgt60utr13d_h *h, uint8_t glob_stat)
{
 800a484:	b590      	push	{r4, r7, lr}
 800a486:	b085      	sub	sp, #20
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	460b      	mov	r3, r1
 800a48e:	70fb      	strb	r3, [r7, #3]
  bgt60utr13d_err_t err = E_BGT60UTR13D_SUCCESS;
 800a490:	2300      	movs	r3, #0
 800a492:	73fb      	strb	r3, [r7, #15]

  glob_stat &= 0x0f; // Mask to ignore the reserved parts of GSR0
 800a494:	78fb      	ldrb	r3, [r7, #3]
 800a496:	f003 030f 	and.w	r3, r3, #15
 800a49a:	70fb      	strb	r3, [r7, #3]

  if(glob_stat != BGT60UTR13D_GLOBAL_STATUS_OK)
 800a49c:	78fb      	ldrb	r3, [r7, #3]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d058      	beq.n	800a554 <check_global_status+0xd0>
  {
    // Warnings:
    if((glob_stat & BGT60UTR13D_GLOBAL_STATUS_MISO_HS_READ) != 0){
 800a4a2:	78fb      	ldrb	r3, [r7, #3]
 800a4a4:	f003 0304 	and.w	r3, r3, #4
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d00d      	beq.n	800a4c8 <check_global_status+0x44>
      DRVR_LOG("[GLOBAL STATUS] Warning: MISO High Speed Read enabled");
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d00a      	beq.n	800a4c8 <check_global_status+0x44>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	68db      	ldr	r3, [r3, #12]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d006      	beq.n	800a4c8 <check_global_status+0x44>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	68dc      	ldr	r4, [r3, #12]
 800a4be:	2300      	movs	r3, #0
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	2100      	movs	r1, #0
 800a4c4:	482d      	ldr	r0, [pc, #180]	@ (800a57c <check_global_status+0xf8>)
 800a4c6:	47a0      	blx	r4
    }
    
    // Errors:
    if((glob_stat & BGT60UTR13D_GLOBAL_STATUS_CLK_NUM_ERROR) != 0){
 800a4c8:	78fb      	ldrb	r3, [r7, #3]
 800a4ca:	f003 0301 	and.w	r3, r3, #1
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d011      	beq.n	800a4f6 <check_global_status+0x72>
      DRVR_ERR("[GLOBAL STATUS] Clock number error");
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d00a      	beq.n	800a4ee <check_global_status+0x6a>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	68db      	ldr	r3, [r3, #12]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d006      	beq.n	800a4ee <check_global_status+0x6a>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	68dc      	ldr	r4, [r3, #12]
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	2101      	movs	r1, #1
 800a4ea:	4825      	ldr	r0, [pc, #148]	@ (800a580 <check_global_status+0xfc>)
 800a4ec:	47a0      	blx	r4
      err |= E_BGT60UTR13D_ERR;
 800a4ee:	7bfb      	ldrb	r3, [r7, #15]
 800a4f0:	f043 0308 	orr.w	r3, r3, #8
 800a4f4:	73fb      	strb	r3, [r7, #15]
    }

    if((glob_stat & BGT60UTR13D_GLOBAL_STATUS_SPI_BURST_ERROR) != 0){
 800a4f6:	78fb      	ldrb	r3, [r7, #3]
 800a4f8:	f003 0302 	and.w	r3, r3, #2
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d011      	beq.n	800a524 <check_global_status+0xa0>
      DRVR_ERR("[GLOBAL STATUS] SPI burst error");
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d00a      	beq.n	800a51c <check_global_status+0x98>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	68db      	ldr	r3, [r3, #12]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d006      	beq.n	800a51c <check_global_status+0x98>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	68dc      	ldr	r4, [r3, #12]
 800a512:	2300      	movs	r3, #0
 800a514:	2200      	movs	r2, #0
 800a516:	2101      	movs	r1, #1
 800a518:	481a      	ldr	r0, [pc, #104]	@ (800a584 <check_global_status+0x100>)
 800a51a:	47a0      	blx	r4
      err |= E_BGT60UTR13D_ERR;
 800a51c:	7bfb      	ldrb	r3, [r7, #15]
 800a51e:	f043 0308 	orr.w	r3, r3, #8
 800a522:	73fb      	strb	r3, [r7, #15]
    }

    if((glob_stat & BGT60UTR13D_GLOBAL_STATUS_FOU_ERROR) != 0){
 800a524:	78fb      	ldrb	r3, [r7, #3]
 800a526:	f003 0308 	and.w	r3, r3, #8
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d020      	beq.n	800a570 <check_global_status+0xec>
      DRVR_ERR("[GLOBAL STATUS] FIFO Under-/Overflow error");
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d00a      	beq.n	800a54a <check_global_status+0xc6>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d006      	beq.n	800a54a <check_global_status+0xc6>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	68dc      	ldr	r4, [r3, #12]
 800a540:	2300      	movs	r3, #0
 800a542:	2200      	movs	r2, #0
 800a544:	2101      	movs	r1, #1
 800a546:	4810      	ldr	r0, [pc, #64]	@ (800a588 <check_global_status+0x104>)
 800a548:	47a0      	blx	r4
      err |= E_BGT60UTR13D_ERR;
 800a54a:	7bfb      	ldrb	r3, [r7, #15]
 800a54c:	f043 0308 	orr.w	r3, r3, #8
 800a550:	73fb      	strb	r3, [r7, #15]
 800a552:	e00d      	b.n	800a570 <check_global_status+0xec>
    }
  }
  else
  {
    DRVR_LOG("[GLOBAL STATUS] OK");
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d00a      	beq.n	800a570 <check_global_status+0xec>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	68db      	ldr	r3, [r3, #12]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d006      	beq.n	800a570 <check_global_status+0xec>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	68dc      	ldr	r4, [r3, #12]
 800a566:	2300      	movs	r3, #0
 800a568:	2200      	movs	r2, #0
 800a56a:	2100      	movs	r1, #0
 800a56c:	4807      	ldr	r0, [pc, #28]	@ (800a58c <check_global_status+0x108>)
 800a56e:	47a0      	blx	r4
  }

  return err;
 800a570:	7bfb      	ldrb	r3, [r7, #15]
}
 800a572:	4618      	mov	r0, r3
 800a574:	3714      	adds	r7, #20
 800a576:	46bd      	mov	sp, r7
 800a578:	bd90      	pop	{r4, r7, pc}
 800a57a:	bf00      	nop
 800a57c:	0800bc98 	.word	0x0800bc98
 800a580:	0800bcd0 	.word	0x0800bcd0
 800a584:	0800bcf4 	.word	0x0800bcf4
 800a588:	0800bd14 	.word	0x0800bd14
 800a58c:	0800bd40 	.word	0x0800bd40

0800a590 <read_regs>:


// R/W wrapper functions

bgt60utr13d_err_t read_regs(const struct bgt60utr13d_h *h, uint8_t reg_adr, uint32_t n, uint8_t *buf) 
{
 800a590:	b590      	push	{r4, r7, lr}
 800a592:	b087      	sub	sp, #28
 800a594:	af00      	add	r7, sp, #0
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	607a      	str	r2, [r7, #4]
 800a59a:	603b      	str	r3, [r7, #0]
 800a59c:	460b      	mov	r3, r1
 800a59e:	72fb      	strb	r3, [r7, #11]
  bgt60utr13d_err_t err = E_BGT60UTR13D_SUCCESS;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	75fb      	strb	r3, [r7, #23]

  uint8_t send_buf[4];

  if(n == SINGLE_REG_MODE){ 
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d118      	bne.n	800a5dc <read_regs+0x4c>
    // Single-register read
    send_buf[0] = BGT60UTR13D_READ_ADDRESS(reg_adr);
 800a5aa:	7afb      	ldrb	r3, [r7, #11]
 800a5ac:	005b      	lsls	r3, r3, #1
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	743b      	strb	r3, [r7, #16]
    send_buf[1] = 0;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	747b      	strb	r3, [r7, #17]
    send_buf[2] = 0;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	74bb      	strb	r3, [r7, #18]
    send_buf[3] = 0;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	74fb      	strb	r3, [r7, #19]

    DRVR_LOG_VAR("[READ WRAPPER] Single read, reg_adr: ", reg_adr);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d02b      	beq.n	800a61c <read_regs+0x8c>
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	68db      	ldr	r3, [r3, #12]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d027      	beq.n	800a61c <read_regs+0x8c>
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	68dc      	ldr	r4, [r3, #12]
 800a5d0:	7afb      	ldrb	r3, [r7, #11]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	2100      	movs	r1, #0
 800a5d6:	4824      	ldr	r0, [pc, #144]	@ (800a668 <read_regs+0xd8>)
 800a5d8:	47a0      	blx	r4
 800a5da:	e01f      	b.n	800a61c <read_regs+0x8c>
  }
  else{ 
    // Burst read
    send_buf[0] = BGT60UTR13D_WRITE_ADDRESS(BGT60UTR13D_BURST_MODE_ADDRESS);
 800a5dc:	23ff      	movs	r3, #255	@ 0xff
 800a5de:	743b      	strb	r3, [r7, #16]
    send_buf[1] = BGT60UTR13D_READ_ADDRESS(reg_adr);
 800a5e0:	7afb      	ldrb	r3, [r7, #11]
 800a5e2:	005b      	lsls	r3, r3, #1
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	747b      	strb	r3, [r7, #17]
    send_buf[2] = (reg_adr == BGT60UTR13D_FIFO_ADDRESS) ? 0 : (n << 1); // Don't use n for FIFO access --> 0 = "unlimited read"
 800a5e8:	7afb      	ldrb	r3, [r7, #11]
 800a5ea:	2b63      	cmp	r3, #99	@ 0x63
 800a5ec:	d004      	beq.n	800a5f8 <read_regs+0x68>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	005b      	lsls	r3, r3, #1
 800a5f4:	b2db      	uxtb	r3, r3
 800a5f6:	e000      	b.n	800a5fa <read_regs+0x6a>
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	74bb      	strb	r3, [r7, #18]
    send_buf[3] = 0;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	74fb      	strb	r3, [r7, #19]

    DRVR_LOG_VAR("[READ WRAPPER] Burst read, starting at reg_adr: ", reg_adr);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d00a      	beq.n	800a61c <read_regs+0x8c>
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d006      	beq.n	800a61c <read_regs+0x8c>
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	68dc      	ldr	r4, [r3, #12]
 800a612:	7afb      	ldrb	r3, [r7, #11]
 800a614:	2201      	movs	r2, #1
 800a616:	2100      	movs	r1, #0
 800a618:	4814      	ldr	r0, [pc, #80]	@ (800a66c <read_regs+0xdc>)
 800a61a:	47a0      	blx	r4
  }
  
  err |= h->read_regs((uint8_t *)send_buf, 4 + 3*n, buf);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681c      	ldr	r4, [r3, #0]
 800a620:	687a      	ldr	r2, [r7, #4]
 800a622:	4613      	mov	r3, r2
 800a624:	005b      	lsls	r3, r3, #1
 800a626:	4413      	add	r3, r2
 800a628:	1d19      	adds	r1, r3, #4
 800a62a:	f107 0310 	add.w	r3, r7, #16
 800a62e:	683a      	ldr	r2, [r7, #0]
 800a630:	4618      	mov	r0, r3
 800a632:	47a0      	blx	r4
 800a634:	4603      	mov	r3, r0
 800a636:	461a      	mov	r2, r3
 800a638:	7dfb      	ldrb	r3, [r7, #23]
 800a63a:	4313      	orrs	r3, r2
 800a63c:	75fb      	strb	r3, [r7, #23]
  if(err) return err;
 800a63e:	7dfb      	ldrb	r3, [r7, #23]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d001      	beq.n	800a648 <read_regs+0xb8>
 800a644:	7dfb      	ldrb	r3, [r7, #23]
 800a646:	e00b      	b.n	800a660 <read_regs+0xd0>

  err |= check_global_status(h, EXTRACT_GLOBAL_STATUS(buf));
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	781b      	ldrb	r3, [r3, #0]
 800a64c:	4619      	mov	r1, r3
 800a64e:	68f8      	ldr	r0, [r7, #12]
 800a650:	f7ff ff18 	bl	800a484 <check_global_status>
 800a654:	4603      	mov	r3, r0
 800a656:	461a      	mov	r2, r3
 800a658:	7dfb      	ldrb	r3, [r7, #23]
 800a65a:	4313      	orrs	r3, r2
 800a65c:	75fb      	strb	r3, [r7, #23]

  return err;
 800a65e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a660:	4618      	mov	r0, r3
 800a662:	371c      	adds	r7, #28
 800a664:	46bd      	mov	sp, r7
 800a666:	bd90      	pop	{r4, r7, pc}
 800a668:	0800bd54 	.word	0x0800bd54
 800a66c:	0800bd7c 	.word	0x0800bd7c

0800a670 <write_regs>:

bgt60utr13d_err_t write_regs(const struct bgt60utr13d_h *h, uint8_t reg_adr, uint32_t n, const uint8_t *buf) 
{
 800a670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a674:	b089      	sub	sp, #36	@ 0x24
 800a676:	af00      	add	r7, sp, #0
 800a678:	60f8      	str	r0, [r7, #12]
 800a67a:	607a      	str	r2, [r7, #4]
 800a67c:	603b      	str	r3, [r7, #0]
 800a67e:	460b      	mov	r3, r1
 800a680:	72fb      	strb	r3, [r7, #11]
 800a682:	466b      	mov	r3, sp
 800a684:	461e      	mov	r6, r3
  uint32_t n_bytes = 4 + 3*n;
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	4613      	mov	r3, r2
 800a68a:	005b      	lsls	r3, r3, #1
 800a68c:	4413      	add	r3, r2
 800a68e:	3304      	adds	r3, #4
 800a690:	61fb      	str	r3, [r7, #28]
  uint8_t send_buf[n_bytes];
 800a692:	69f9      	ldr	r1, [r7, #28]
 800a694:	460b      	mov	r3, r1
 800a696:	3b01      	subs	r3, #1
 800a698:	61bb      	str	r3, [r7, #24]
 800a69a:	2300      	movs	r3, #0
 800a69c:	4688      	mov	r8, r1
 800a69e:	4699      	mov	r9, r3
 800a6a0:	f04f 0200 	mov.w	r2, #0
 800a6a4:	f04f 0300 	mov.w	r3, #0
 800a6a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a6ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a6b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	460c      	mov	r4, r1
 800a6b8:	461d      	mov	r5, r3
 800a6ba:	f04f 0200 	mov.w	r2, #0
 800a6be:	f04f 0300 	mov.w	r3, #0
 800a6c2:	00eb      	lsls	r3, r5, #3
 800a6c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a6c8:	00e2      	lsls	r2, r4, #3
 800a6ca:	1dcb      	adds	r3, r1, #7
 800a6cc:	08db      	lsrs	r3, r3, #3
 800a6ce:	00db      	lsls	r3, r3, #3
 800a6d0:	ebad 0d03 	sub.w	sp, sp, r3
 800a6d4:	466b      	mov	r3, sp
 800a6d6:	3300      	adds	r3, #0
 800a6d8:	617b      	str	r3, [r7, #20]

  if(n == SINGLE_REG_MODE){ 
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d132      	bne.n	800a746 <write_regs+0xd6>
    // Single-register write
    send_buf[0] = BGT60UTR13D_WRITE_ADDRESS(reg_adr);
 800a6e0:	7afb      	ldrb	r3, [r7, #11]
 800a6e2:	005b      	lsls	r3, r3, #1
 800a6e4:	b25b      	sxtb	r3, r3
 800a6e6:	f043 0301 	orr.w	r3, r3, #1
 800a6ea:	b25b      	sxtb	r3, r3
 800a6ec:	b2da      	uxtb	r2, r3
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	701a      	strb	r2, [r3, #0]
    send_buf[1] = buf[0];
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	781a      	ldrb	r2, [r3, #0]
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	705a      	strb	r2, [r3, #1]
    send_buf[2] = buf[1];
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	781a      	ldrb	r2, [r3, #0]
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	709a      	strb	r2, [r3, #2]
    send_buf[3] = buf[2];
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	3302      	adds	r3, #2
 800a708:	781a      	ldrb	r2, [r3, #0]
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	70da      	strb	r2, [r3, #3]

    DRVR_LOG_VAR("[WRITE WRAPPER] Single write, send buf: ", UINT8_ARR_TO_UINT32(send_buf));
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d045      	beq.n	800a7a0 <write_regs+0x130>
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	68db      	ldr	r3, [r3, #12]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d041      	beq.n	800a7a0 <write_regs+0x130>
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	68dc      	ldr	r4, [r3, #12]
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	061a      	lsls	r2, r3, #24
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	785b      	ldrb	r3, [r3, #1]
 800a72a:	041b      	lsls	r3, r3, #16
 800a72c:	431a      	orrs	r2, r3
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	789b      	ldrb	r3, [r3, #2]
 800a732:	021b      	lsls	r3, r3, #8
 800a734:	4313      	orrs	r3, r2
 800a736:	697a      	ldr	r2, [r7, #20]
 800a738:	78d2      	ldrb	r2, [r2, #3]
 800a73a:	4313      	orrs	r3, r2
 800a73c:	2201      	movs	r2, #1
 800a73e:	2100      	movs	r1, #0
 800a740:	481d      	ldr	r0, [pc, #116]	@ (800a7b8 <write_regs+0x148>)
 800a742:	47a0      	blx	r4
 800a744:	e02c      	b.n	800a7a0 <write_regs+0x130>
  }
  else{ 
    // Burst write
    send_buf[0] = BGT60UTR13D_WRITE_ADDRESS(BGT60UTR13D_BURST_MODE_ADDRESS);
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	22ff      	movs	r2, #255	@ 0xff
 800a74a:	701a      	strb	r2, [r3, #0]
    send_buf[1] = BGT60UTR13D_WRITE_ADDRESS(reg_adr);
 800a74c:	7afb      	ldrb	r3, [r7, #11]
 800a74e:	005b      	lsls	r3, r3, #1
 800a750:	b25b      	sxtb	r3, r3
 800a752:	f043 0301 	orr.w	r3, r3, #1
 800a756:	b25b      	sxtb	r3, r3
 800a758:	b2da      	uxtb	r2, r3
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	705a      	strb	r2, [r3, #1]
    send_buf[2] = n << 1;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	b2db      	uxtb	r3, r3
 800a762:	005b      	lsls	r3, r3, #1
 800a764:	b2da      	uxtb	r2, r3
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	709a      	strb	r2, [r3, #2]
    send_buf[3] = 0;
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	2200      	movs	r2, #0
 800a76e:	70da      	strb	r2, [r3, #3]

    memcpy(&send_buf[4], buf, 3*n);
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	1d18      	adds	r0, r3, #4
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	4613      	mov	r3, r2
 800a778:	005b      	lsls	r3, r3, #1
 800a77a:	4413      	add	r3, r2
 800a77c:	461a      	mov	r2, r3
 800a77e:	6839      	ldr	r1, [r7, #0]
 800a780:	f000 faa3 	bl	800acca <memcpy>

    DRVR_LOG_VAR("[WRITE WRAPPER] Burst write, starting at reg_adr: ", reg_adr);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d00a      	beq.n	800a7a0 <write_regs+0x130>
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	68db      	ldr	r3, [r3, #12]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d006      	beq.n	800a7a0 <write_regs+0x130>
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	68dc      	ldr	r4, [r3, #12]
 800a796:	7afb      	ldrb	r3, [r7, #11]
 800a798:	2201      	movs	r2, #1
 800a79a:	2100      	movs	r1, #0
 800a79c:	4807      	ldr	r0, [pc, #28]	@ (800a7bc <write_regs+0x14c>)
 800a79e:	47a0      	blx	r4
  }

  return h->write_regs((uint8_t *)send_buf, n_bytes);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	69f9      	ldr	r1, [r7, #28]
 800a7a6:	6978      	ldr	r0, [r7, #20]
 800a7a8:	4798      	blx	r3
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	46b5      	mov	sp, r6
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3724      	adds	r7, #36	@ 0x24
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7b8:	0800bdb0 	.word	0x0800bdb0
 800a7bc:	0800bddc 	.word	0x0800bddc

0800a7c0 <std>:
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	b510      	push	{r4, lr}
 800a7c4:	4604      	mov	r4, r0
 800a7c6:	6083      	str	r3, [r0, #8]
 800a7c8:	8181      	strh	r1, [r0, #12]
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	6643      	str	r3, [r0, #100]	@ 0x64
 800a7ce:	81c2      	strh	r2, [r0, #14]
 800a7d0:	2208      	movs	r2, #8
 800a7d2:	6183      	str	r3, [r0, #24]
 800a7d4:	e9c0 3300 	strd	r3, r3, [r0]
 800a7d8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a7dc:	305c      	adds	r0, #92	@ 0x5c
 800a7de:	f000 f9f9 	bl	800abd4 <memset>
 800a7e2:	4b0d      	ldr	r3, [pc, #52]	@ (800a818 <std+0x58>)
 800a7e4:	6224      	str	r4, [r4, #32]
 800a7e6:	6263      	str	r3, [r4, #36]	@ 0x24
 800a7e8:	4b0c      	ldr	r3, [pc, #48]	@ (800a81c <std+0x5c>)
 800a7ea:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a7ec:	4b0c      	ldr	r3, [pc, #48]	@ (800a820 <std+0x60>)
 800a7ee:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a7f0:	4b0c      	ldr	r3, [pc, #48]	@ (800a824 <std+0x64>)
 800a7f2:	6323      	str	r3, [r4, #48]	@ 0x30
 800a7f4:	4b0c      	ldr	r3, [pc, #48]	@ (800a828 <std+0x68>)
 800a7f6:	429c      	cmp	r4, r3
 800a7f8:	d006      	beq.n	800a808 <std+0x48>
 800a7fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a7fe:	4294      	cmp	r4, r2
 800a800:	d002      	beq.n	800a808 <std+0x48>
 800a802:	33d0      	adds	r3, #208	@ 0xd0
 800a804:	429c      	cmp	r4, r3
 800a806:	d105      	bne.n	800a814 <std+0x54>
 800a808:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a80c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a810:	f000 ba58 	b.w	800acc4 <__retarget_lock_init_recursive>
 800a814:	bd10      	pop	{r4, pc}
 800a816:	bf00      	nop
 800a818:	0800aa25 	.word	0x0800aa25
 800a81c:	0800aa47 	.word	0x0800aa47
 800a820:	0800aa7f 	.word	0x0800aa7f
 800a824:	0800aaa3 	.word	0x0800aaa3
 800a828:	20008e38 	.word	0x20008e38

0800a82c <stdio_exit_handler>:
 800a82c:	4a02      	ldr	r2, [pc, #8]	@ (800a838 <stdio_exit_handler+0xc>)
 800a82e:	4903      	ldr	r1, [pc, #12]	@ (800a83c <stdio_exit_handler+0x10>)
 800a830:	4803      	ldr	r0, [pc, #12]	@ (800a840 <stdio_exit_handler+0x14>)
 800a832:	f000 b869 	b.w	800a908 <_fwalk_sglue>
 800a836:	bf00      	nop
 800a838:	2000000c 	.word	0x2000000c
 800a83c:	0800b585 	.word	0x0800b585
 800a840:	2000001c 	.word	0x2000001c

0800a844 <cleanup_stdio>:
 800a844:	6841      	ldr	r1, [r0, #4]
 800a846:	4b0c      	ldr	r3, [pc, #48]	@ (800a878 <cleanup_stdio+0x34>)
 800a848:	4299      	cmp	r1, r3
 800a84a:	b510      	push	{r4, lr}
 800a84c:	4604      	mov	r4, r0
 800a84e:	d001      	beq.n	800a854 <cleanup_stdio+0x10>
 800a850:	f000 fe98 	bl	800b584 <_fflush_r>
 800a854:	68a1      	ldr	r1, [r4, #8]
 800a856:	4b09      	ldr	r3, [pc, #36]	@ (800a87c <cleanup_stdio+0x38>)
 800a858:	4299      	cmp	r1, r3
 800a85a:	d002      	beq.n	800a862 <cleanup_stdio+0x1e>
 800a85c:	4620      	mov	r0, r4
 800a85e:	f000 fe91 	bl	800b584 <_fflush_r>
 800a862:	68e1      	ldr	r1, [r4, #12]
 800a864:	4b06      	ldr	r3, [pc, #24]	@ (800a880 <cleanup_stdio+0x3c>)
 800a866:	4299      	cmp	r1, r3
 800a868:	d004      	beq.n	800a874 <cleanup_stdio+0x30>
 800a86a:	4620      	mov	r0, r4
 800a86c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a870:	f000 be88 	b.w	800b584 <_fflush_r>
 800a874:	bd10      	pop	{r4, pc}
 800a876:	bf00      	nop
 800a878:	20008e38 	.word	0x20008e38
 800a87c:	20008ea0 	.word	0x20008ea0
 800a880:	20008f08 	.word	0x20008f08

0800a884 <global_stdio_init.part.0>:
 800a884:	b510      	push	{r4, lr}
 800a886:	4b0b      	ldr	r3, [pc, #44]	@ (800a8b4 <global_stdio_init.part.0+0x30>)
 800a888:	2104      	movs	r1, #4
 800a88a:	4c0b      	ldr	r4, [pc, #44]	@ (800a8b8 <global_stdio_init.part.0+0x34>)
 800a88c:	4a0b      	ldr	r2, [pc, #44]	@ (800a8bc <global_stdio_init.part.0+0x38>)
 800a88e:	4620      	mov	r0, r4
 800a890:	601a      	str	r2, [r3, #0]
 800a892:	2200      	movs	r2, #0
 800a894:	f7ff ff94 	bl	800a7c0 <std>
 800a898:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a89c:	2201      	movs	r2, #1
 800a89e:	2109      	movs	r1, #9
 800a8a0:	f7ff ff8e 	bl	800a7c0 <std>
 800a8a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a8a8:	2202      	movs	r2, #2
 800a8aa:	2112      	movs	r1, #18
 800a8ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8b0:	f7ff bf86 	b.w	800a7c0 <std>
 800a8b4:	20008f70 	.word	0x20008f70
 800a8b8:	20008e38 	.word	0x20008e38
 800a8bc:	0800a82d 	.word	0x0800a82d

0800a8c0 <__sfp_lock_acquire>:
 800a8c0:	4801      	ldr	r0, [pc, #4]	@ (800a8c8 <__sfp_lock_acquire+0x8>)
 800a8c2:	f000 ba00 	b.w	800acc6 <__retarget_lock_acquire_recursive>
 800a8c6:	bf00      	nop
 800a8c8:	20008f79 	.word	0x20008f79

0800a8cc <__sfp_lock_release>:
 800a8cc:	4801      	ldr	r0, [pc, #4]	@ (800a8d4 <__sfp_lock_release+0x8>)
 800a8ce:	f000 b9fb 	b.w	800acc8 <__retarget_lock_release_recursive>
 800a8d2:	bf00      	nop
 800a8d4:	20008f79 	.word	0x20008f79

0800a8d8 <__sinit>:
 800a8d8:	b510      	push	{r4, lr}
 800a8da:	4604      	mov	r4, r0
 800a8dc:	f7ff fff0 	bl	800a8c0 <__sfp_lock_acquire>
 800a8e0:	6a23      	ldr	r3, [r4, #32]
 800a8e2:	b11b      	cbz	r3, 800a8ec <__sinit+0x14>
 800a8e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8e8:	f7ff bff0 	b.w	800a8cc <__sfp_lock_release>
 800a8ec:	4b04      	ldr	r3, [pc, #16]	@ (800a900 <__sinit+0x28>)
 800a8ee:	6223      	str	r3, [r4, #32]
 800a8f0:	4b04      	ldr	r3, [pc, #16]	@ (800a904 <__sinit+0x2c>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d1f5      	bne.n	800a8e4 <__sinit+0xc>
 800a8f8:	f7ff ffc4 	bl	800a884 <global_stdio_init.part.0>
 800a8fc:	e7f2      	b.n	800a8e4 <__sinit+0xc>
 800a8fe:	bf00      	nop
 800a900:	0800a845 	.word	0x0800a845
 800a904:	20008f70 	.word	0x20008f70

0800a908 <_fwalk_sglue>:
 800a908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a90c:	4607      	mov	r7, r0
 800a90e:	4688      	mov	r8, r1
 800a910:	4614      	mov	r4, r2
 800a912:	2600      	movs	r6, #0
 800a914:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a918:	f1b9 0901 	subs.w	r9, r9, #1
 800a91c:	d505      	bpl.n	800a92a <_fwalk_sglue+0x22>
 800a91e:	6824      	ldr	r4, [r4, #0]
 800a920:	2c00      	cmp	r4, #0
 800a922:	d1f7      	bne.n	800a914 <_fwalk_sglue+0xc>
 800a924:	4630      	mov	r0, r6
 800a926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a92a:	89ab      	ldrh	r3, [r5, #12]
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d907      	bls.n	800a940 <_fwalk_sglue+0x38>
 800a930:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a934:	3301      	adds	r3, #1
 800a936:	d003      	beq.n	800a940 <_fwalk_sglue+0x38>
 800a938:	4629      	mov	r1, r5
 800a93a:	4638      	mov	r0, r7
 800a93c:	47c0      	blx	r8
 800a93e:	4306      	orrs	r6, r0
 800a940:	3568      	adds	r5, #104	@ 0x68
 800a942:	e7e9      	b.n	800a918 <_fwalk_sglue+0x10>

0800a944 <iprintf>:
 800a944:	b40f      	push	{r0, r1, r2, r3}
 800a946:	b507      	push	{r0, r1, r2, lr}
 800a948:	4906      	ldr	r1, [pc, #24]	@ (800a964 <iprintf+0x20>)
 800a94a:	ab04      	add	r3, sp, #16
 800a94c:	6808      	ldr	r0, [r1, #0]
 800a94e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a952:	6881      	ldr	r1, [r0, #8]
 800a954:	9301      	str	r3, [sp, #4]
 800a956:	f000 fae7 	bl	800af28 <_vfiprintf_r>
 800a95a:	b003      	add	sp, #12
 800a95c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a960:	b004      	add	sp, #16
 800a962:	4770      	bx	lr
 800a964:	20000018 	.word	0x20000018

0800a968 <_puts_r>:
 800a968:	6a03      	ldr	r3, [r0, #32]
 800a96a:	b570      	push	{r4, r5, r6, lr}
 800a96c:	4605      	mov	r5, r0
 800a96e:	460e      	mov	r6, r1
 800a970:	6884      	ldr	r4, [r0, #8]
 800a972:	b90b      	cbnz	r3, 800a978 <_puts_r+0x10>
 800a974:	f7ff ffb0 	bl	800a8d8 <__sinit>
 800a978:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a97a:	07db      	lsls	r3, r3, #31
 800a97c:	d405      	bmi.n	800a98a <_puts_r+0x22>
 800a97e:	89a3      	ldrh	r3, [r4, #12]
 800a980:	0598      	lsls	r0, r3, #22
 800a982:	d402      	bmi.n	800a98a <_puts_r+0x22>
 800a984:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a986:	f000 f99e 	bl	800acc6 <__retarget_lock_acquire_recursive>
 800a98a:	89a3      	ldrh	r3, [r4, #12]
 800a98c:	0719      	lsls	r1, r3, #28
 800a98e:	d502      	bpl.n	800a996 <_puts_r+0x2e>
 800a990:	6923      	ldr	r3, [r4, #16]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d135      	bne.n	800aa02 <_puts_r+0x9a>
 800a996:	4621      	mov	r1, r4
 800a998:	4628      	mov	r0, r5
 800a99a:	f000 f8c5 	bl	800ab28 <__swsetup_r>
 800a99e:	b380      	cbz	r0, 800aa02 <_puts_r+0x9a>
 800a9a0:	f04f 35ff 	mov.w	r5, #4294967295
 800a9a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9a6:	07da      	lsls	r2, r3, #31
 800a9a8:	d405      	bmi.n	800a9b6 <_puts_r+0x4e>
 800a9aa:	89a3      	ldrh	r3, [r4, #12]
 800a9ac:	059b      	lsls	r3, r3, #22
 800a9ae:	d402      	bmi.n	800a9b6 <_puts_r+0x4e>
 800a9b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9b2:	f000 f989 	bl	800acc8 <__retarget_lock_release_recursive>
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	bd70      	pop	{r4, r5, r6, pc}
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	da04      	bge.n	800a9c8 <_puts_r+0x60>
 800a9be:	69a2      	ldr	r2, [r4, #24]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	dc17      	bgt.n	800a9f4 <_puts_r+0x8c>
 800a9c4:	290a      	cmp	r1, #10
 800a9c6:	d015      	beq.n	800a9f4 <_puts_r+0x8c>
 800a9c8:	6823      	ldr	r3, [r4, #0]
 800a9ca:	1c5a      	adds	r2, r3, #1
 800a9cc:	6022      	str	r2, [r4, #0]
 800a9ce:	7019      	strb	r1, [r3, #0]
 800a9d0:	68a3      	ldr	r3, [r4, #8]
 800a9d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a9d6:	3b01      	subs	r3, #1
 800a9d8:	60a3      	str	r3, [r4, #8]
 800a9da:	2900      	cmp	r1, #0
 800a9dc:	d1ed      	bne.n	800a9ba <_puts_r+0x52>
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	da11      	bge.n	800aa06 <_puts_r+0x9e>
 800a9e2:	4622      	mov	r2, r4
 800a9e4:	210a      	movs	r1, #10
 800a9e6:	4628      	mov	r0, r5
 800a9e8:	f000 f85f 	bl	800aaaa <__swbuf_r>
 800a9ec:	3001      	adds	r0, #1
 800a9ee:	d0d7      	beq.n	800a9a0 <_puts_r+0x38>
 800a9f0:	250a      	movs	r5, #10
 800a9f2:	e7d7      	b.n	800a9a4 <_puts_r+0x3c>
 800a9f4:	4622      	mov	r2, r4
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	f000 f857 	bl	800aaaa <__swbuf_r>
 800a9fc:	3001      	adds	r0, #1
 800a9fe:	d1e7      	bne.n	800a9d0 <_puts_r+0x68>
 800aa00:	e7ce      	b.n	800a9a0 <_puts_r+0x38>
 800aa02:	3e01      	subs	r6, #1
 800aa04:	e7e4      	b.n	800a9d0 <_puts_r+0x68>
 800aa06:	6823      	ldr	r3, [r4, #0]
 800aa08:	1c5a      	adds	r2, r3, #1
 800aa0a:	6022      	str	r2, [r4, #0]
 800aa0c:	220a      	movs	r2, #10
 800aa0e:	701a      	strb	r2, [r3, #0]
 800aa10:	e7ee      	b.n	800a9f0 <_puts_r+0x88>
	...

0800aa14 <puts>:
 800aa14:	4b02      	ldr	r3, [pc, #8]	@ (800aa20 <puts+0xc>)
 800aa16:	4601      	mov	r1, r0
 800aa18:	6818      	ldr	r0, [r3, #0]
 800aa1a:	f7ff bfa5 	b.w	800a968 <_puts_r>
 800aa1e:	bf00      	nop
 800aa20:	20000018 	.word	0x20000018

0800aa24 <__sread>:
 800aa24:	b510      	push	{r4, lr}
 800aa26:	460c      	mov	r4, r1
 800aa28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa2c:	f000 f8fc 	bl	800ac28 <_read_r>
 800aa30:	2800      	cmp	r0, #0
 800aa32:	bfab      	itete	ge
 800aa34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aa36:	89a3      	ldrhlt	r3, [r4, #12]
 800aa38:	181b      	addge	r3, r3, r0
 800aa3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aa3e:	bfac      	ite	ge
 800aa40:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aa42:	81a3      	strhlt	r3, [r4, #12]
 800aa44:	bd10      	pop	{r4, pc}

0800aa46 <__swrite>:
 800aa46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa4a:	461f      	mov	r7, r3
 800aa4c:	898b      	ldrh	r3, [r1, #12]
 800aa4e:	4605      	mov	r5, r0
 800aa50:	460c      	mov	r4, r1
 800aa52:	05db      	lsls	r3, r3, #23
 800aa54:	4616      	mov	r6, r2
 800aa56:	d505      	bpl.n	800aa64 <__swrite+0x1e>
 800aa58:	2302      	movs	r3, #2
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa60:	f000 f8d0 	bl	800ac04 <_lseek_r>
 800aa64:	89a3      	ldrh	r3, [r4, #12]
 800aa66:	4632      	mov	r2, r6
 800aa68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aa72:	81a3      	strh	r3, [r4, #12]
 800aa74:	463b      	mov	r3, r7
 800aa76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa7a:	f000 b8e7 	b.w	800ac4c <_write_r>

0800aa7e <__sseek>:
 800aa7e:	b510      	push	{r4, lr}
 800aa80:	460c      	mov	r4, r1
 800aa82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa86:	f000 f8bd 	bl	800ac04 <_lseek_r>
 800aa8a:	1c43      	adds	r3, r0, #1
 800aa8c:	89a3      	ldrh	r3, [r4, #12]
 800aa8e:	bf15      	itete	ne
 800aa90:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aa92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aa96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aa9a:	81a3      	strheq	r3, [r4, #12]
 800aa9c:	bf18      	it	ne
 800aa9e:	81a3      	strhne	r3, [r4, #12]
 800aaa0:	bd10      	pop	{r4, pc}

0800aaa2 <__sclose>:
 800aaa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaa6:	f000 b89d 	b.w	800abe4 <_close_r>

0800aaaa <__swbuf_r>:
 800aaaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaac:	460e      	mov	r6, r1
 800aaae:	4614      	mov	r4, r2
 800aab0:	4605      	mov	r5, r0
 800aab2:	b118      	cbz	r0, 800aabc <__swbuf_r+0x12>
 800aab4:	6a03      	ldr	r3, [r0, #32]
 800aab6:	b90b      	cbnz	r3, 800aabc <__swbuf_r+0x12>
 800aab8:	f7ff ff0e 	bl	800a8d8 <__sinit>
 800aabc:	69a3      	ldr	r3, [r4, #24]
 800aabe:	60a3      	str	r3, [r4, #8]
 800aac0:	89a3      	ldrh	r3, [r4, #12]
 800aac2:	071a      	lsls	r2, r3, #28
 800aac4:	d501      	bpl.n	800aaca <__swbuf_r+0x20>
 800aac6:	6923      	ldr	r3, [r4, #16]
 800aac8:	b943      	cbnz	r3, 800aadc <__swbuf_r+0x32>
 800aaca:	4621      	mov	r1, r4
 800aacc:	4628      	mov	r0, r5
 800aace:	f000 f82b 	bl	800ab28 <__swsetup_r>
 800aad2:	b118      	cbz	r0, 800aadc <__swbuf_r+0x32>
 800aad4:	f04f 37ff 	mov.w	r7, #4294967295
 800aad8:	4638      	mov	r0, r7
 800aada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aadc:	6823      	ldr	r3, [r4, #0]
 800aade:	b2f6      	uxtb	r6, r6
 800aae0:	6922      	ldr	r2, [r4, #16]
 800aae2:	4637      	mov	r7, r6
 800aae4:	1a98      	subs	r0, r3, r2
 800aae6:	6963      	ldr	r3, [r4, #20]
 800aae8:	4283      	cmp	r3, r0
 800aaea:	dc05      	bgt.n	800aaf8 <__swbuf_r+0x4e>
 800aaec:	4621      	mov	r1, r4
 800aaee:	4628      	mov	r0, r5
 800aaf0:	f000 fd48 	bl	800b584 <_fflush_r>
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	d1ed      	bne.n	800aad4 <__swbuf_r+0x2a>
 800aaf8:	68a3      	ldr	r3, [r4, #8]
 800aafa:	3b01      	subs	r3, #1
 800aafc:	60a3      	str	r3, [r4, #8]
 800aafe:	6823      	ldr	r3, [r4, #0]
 800ab00:	1c5a      	adds	r2, r3, #1
 800ab02:	6022      	str	r2, [r4, #0]
 800ab04:	701e      	strb	r6, [r3, #0]
 800ab06:	1c43      	adds	r3, r0, #1
 800ab08:	6962      	ldr	r2, [r4, #20]
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	d004      	beq.n	800ab18 <__swbuf_r+0x6e>
 800ab0e:	89a3      	ldrh	r3, [r4, #12]
 800ab10:	07db      	lsls	r3, r3, #31
 800ab12:	d5e1      	bpl.n	800aad8 <__swbuf_r+0x2e>
 800ab14:	2e0a      	cmp	r6, #10
 800ab16:	d1df      	bne.n	800aad8 <__swbuf_r+0x2e>
 800ab18:	4621      	mov	r1, r4
 800ab1a:	4628      	mov	r0, r5
 800ab1c:	f000 fd32 	bl	800b584 <_fflush_r>
 800ab20:	2800      	cmp	r0, #0
 800ab22:	d0d9      	beq.n	800aad8 <__swbuf_r+0x2e>
 800ab24:	e7d6      	b.n	800aad4 <__swbuf_r+0x2a>
	...

0800ab28 <__swsetup_r>:
 800ab28:	b538      	push	{r3, r4, r5, lr}
 800ab2a:	4b29      	ldr	r3, [pc, #164]	@ (800abd0 <__swsetup_r+0xa8>)
 800ab2c:	4605      	mov	r5, r0
 800ab2e:	460c      	mov	r4, r1
 800ab30:	6818      	ldr	r0, [r3, #0]
 800ab32:	b118      	cbz	r0, 800ab3c <__swsetup_r+0x14>
 800ab34:	6a03      	ldr	r3, [r0, #32]
 800ab36:	b90b      	cbnz	r3, 800ab3c <__swsetup_r+0x14>
 800ab38:	f7ff fece 	bl	800a8d8 <__sinit>
 800ab3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab40:	0719      	lsls	r1, r3, #28
 800ab42:	d422      	bmi.n	800ab8a <__swsetup_r+0x62>
 800ab44:	06da      	lsls	r2, r3, #27
 800ab46:	d407      	bmi.n	800ab58 <__swsetup_r+0x30>
 800ab48:	2209      	movs	r2, #9
 800ab4a:	602a      	str	r2, [r5, #0]
 800ab4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab50:	f04f 30ff 	mov.w	r0, #4294967295
 800ab54:	81a3      	strh	r3, [r4, #12]
 800ab56:	e033      	b.n	800abc0 <__swsetup_r+0x98>
 800ab58:	0758      	lsls	r0, r3, #29
 800ab5a:	d512      	bpl.n	800ab82 <__swsetup_r+0x5a>
 800ab5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab5e:	b141      	cbz	r1, 800ab72 <__swsetup_r+0x4a>
 800ab60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab64:	4299      	cmp	r1, r3
 800ab66:	d002      	beq.n	800ab6e <__swsetup_r+0x46>
 800ab68:	4628      	mov	r0, r5
 800ab6a:	f000 f8bb 	bl	800ace4 <_free_r>
 800ab6e:	2300      	movs	r3, #0
 800ab70:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab72:	89a3      	ldrh	r3, [r4, #12]
 800ab74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ab78:	81a3      	strh	r3, [r4, #12]
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	6063      	str	r3, [r4, #4]
 800ab7e:	6923      	ldr	r3, [r4, #16]
 800ab80:	6023      	str	r3, [r4, #0]
 800ab82:	89a3      	ldrh	r3, [r4, #12]
 800ab84:	f043 0308 	orr.w	r3, r3, #8
 800ab88:	81a3      	strh	r3, [r4, #12]
 800ab8a:	6923      	ldr	r3, [r4, #16]
 800ab8c:	b94b      	cbnz	r3, 800aba2 <__swsetup_r+0x7a>
 800ab8e:	89a3      	ldrh	r3, [r4, #12]
 800ab90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ab94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab98:	d003      	beq.n	800aba2 <__swsetup_r+0x7a>
 800ab9a:	4621      	mov	r1, r4
 800ab9c:	4628      	mov	r0, r5
 800ab9e:	f000 fd3e 	bl	800b61e <__smakebuf_r>
 800aba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aba6:	f013 0201 	ands.w	r2, r3, #1
 800abaa:	d00a      	beq.n	800abc2 <__swsetup_r+0x9a>
 800abac:	2200      	movs	r2, #0
 800abae:	60a2      	str	r2, [r4, #8]
 800abb0:	6962      	ldr	r2, [r4, #20]
 800abb2:	4252      	negs	r2, r2
 800abb4:	61a2      	str	r2, [r4, #24]
 800abb6:	6922      	ldr	r2, [r4, #16]
 800abb8:	b942      	cbnz	r2, 800abcc <__swsetup_r+0xa4>
 800abba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800abbe:	d1c5      	bne.n	800ab4c <__swsetup_r+0x24>
 800abc0:	bd38      	pop	{r3, r4, r5, pc}
 800abc2:	0799      	lsls	r1, r3, #30
 800abc4:	bf58      	it	pl
 800abc6:	6962      	ldrpl	r2, [r4, #20]
 800abc8:	60a2      	str	r2, [r4, #8]
 800abca:	e7f4      	b.n	800abb6 <__swsetup_r+0x8e>
 800abcc:	2000      	movs	r0, #0
 800abce:	e7f7      	b.n	800abc0 <__swsetup_r+0x98>
 800abd0:	20000018 	.word	0x20000018

0800abd4 <memset>:
 800abd4:	4402      	add	r2, r0
 800abd6:	4603      	mov	r3, r0
 800abd8:	4293      	cmp	r3, r2
 800abda:	d100      	bne.n	800abde <memset+0xa>
 800abdc:	4770      	bx	lr
 800abde:	f803 1b01 	strb.w	r1, [r3], #1
 800abe2:	e7f9      	b.n	800abd8 <memset+0x4>

0800abe4 <_close_r>:
 800abe4:	b538      	push	{r3, r4, r5, lr}
 800abe6:	2300      	movs	r3, #0
 800abe8:	4d05      	ldr	r5, [pc, #20]	@ (800ac00 <_close_r+0x1c>)
 800abea:	4604      	mov	r4, r0
 800abec:	4608      	mov	r0, r1
 800abee:	602b      	str	r3, [r5, #0]
 800abf0:	f7f6 fefa 	bl	80019e8 <_close>
 800abf4:	1c43      	adds	r3, r0, #1
 800abf6:	d102      	bne.n	800abfe <_close_r+0x1a>
 800abf8:	682b      	ldr	r3, [r5, #0]
 800abfa:	b103      	cbz	r3, 800abfe <_close_r+0x1a>
 800abfc:	6023      	str	r3, [r4, #0]
 800abfe:	bd38      	pop	{r3, r4, r5, pc}
 800ac00:	20008f74 	.word	0x20008f74

0800ac04 <_lseek_r>:
 800ac04:	b538      	push	{r3, r4, r5, lr}
 800ac06:	4604      	mov	r4, r0
 800ac08:	4d06      	ldr	r5, [pc, #24]	@ (800ac24 <_lseek_r+0x20>)
 800ac0a:	4608      	mov	r0, r1
 800ac0c:	4611      	mov	r1, r2
 800ac0e:	2200      	movs	r2, #0
 800ac10:	602a      	str	r2, [r5, #0]
 800ac12:	461a      	mov	r2, r3
 800ac14:	f7f6 ff0f 	bl	8001a36 <_lseek>
 800ac18:	1c43      	adds	r3, r0, #1
 800ac1a:	d102      	bne.n	800ac22 <_lseek_r+0x1e>
 800ac1c:	682b      	ldr	r3, [r5, #0]
 800ac1e:	b103      	cbz	r3, 800ac22 <_lseek_r+0x1e>
 800ac20:	6023      	str	r3, [r4, #0]
 800ac22:	bd38      	pop	{r3, r4, r5, pc}
 800ac24:	20008f74 	.word	0x20008f74

0800ac28 <_read_r>:
 800ac28:	b538      	push	{r3, r4, r5, lr}
 800ac2a:	4604      	mov	r4, r0
 800ac2c:	4d06      	ldr	r5, [pc, #24]	@ (800ac48 <_read_r+0x20>)
 800ac2e:	4608      	mov	r0, r1
 800ac30:	4611      	mov	r1, r2
 800ac32:	2200      	movs	r2, #0
 800ac34:	602a      	str	r2, [r5, #0]
 800ac36:	461a      	mov	r2, r3
 800ac38:	f7f6 fe9d 	bl	8001976 <_read>
 800ac3c:	1c43      	adds	r3, r0, #1
 800ac3e:	d102      	bne.n	800ac46 <_read_r+0x1e>
 800ac40:	682b      	ldr	r3, [r5, #0]
 800ac42:	b103      	cbz	r3, 800ac46 <_read_r+0x1e>
 800ac44:	6023      	str	r3, [r4, #0]
 800ac46:	bd38      	pop	{r3, r4, r5, pc}
 800ac48:	20008f74 	.word	0x20008f74

0800ac4c <_write_r>:
 800ac4c:	b538      	push	{r3, r4, r5, lr}
 800ac4e:	4604      	mov	r4, r0
 800ac50:	4d06      	ldr	r5, [pc, #24]	@ (800ac6c <_write_r+0x20>)
 800ac52:	4608      	mov	r0, r1
 800ac54:	4611      	mov	r1, r2
 800ac56:	2200      	movs	r2, #0
 800ac58:	602a      	str	r2, [r5, #0]
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	f7f6 fea8 	bl	80019b0 <_write>
 800ac60:	1c43      	adds	r3, r0, #1
 800ac62:	d102      	bne.n	800ac6a <_write_r+0x1e>
 800ac64:	682b      	ldr	r3, [r5, #0]
 800ac66:	b103      	cbz	r3, 800ac6a <_write_r+0x1e>
 800ac68:	6023      	str	r3, [r4, #0]
 800ac6a:	bd38      	pop	{r3, r4, r5, pc}
 800ac6c:	20008f74 	.word	0x20008f74

0800ac70 <__errno>:
 800ac70:	4b01      	ldr	r3, [pc, #4]	@ (800ac78 <__errno+0x8>)
 800ac72:	6818      	ldr	r0, [r3, #0]
 800ac74:	4770      	bx	lr
 800ac76:	bf00      	nop
 800ac78:	20000018 	.word	0x20000018

0800ac7c <__libc_init_array>:
 800ac7c:	b570      	push	{r4, r5, r6, lr}
 800ac7e:	4d0d      	ldr	r5, [pc, #52]	@ (800acb4 <__libc_init_array+0x38>)
 800ac80:	2600      	movs	r6, #0
 800ac82:	4c0d      	ldr	r4, [pc, #52]	@ (800acb8 <__libc_init_array+0x3c>)
 800ac84:	1b64      	subs	r4, r4, r5
 800ac86:	10a4      	asrs	r4, r4, #2
 800ac88:	42a6      	cmp	r6, r4
 800ac8a:	d109      	bne.n	800aca0 <__libc_init_array+0x24>
 800ac8c:	4d0b      	ldr	r5, [pc, #44]	@ (800acbc <__libc_init_array+0x40>)
 800ac8e:	2600      	movs	r6, #0
 800ac90:	4c0b      	ldr	r4, [pc, #44]	@ (800acc0 <__libc_init_array+0x44>)
 800ac92:	f000 fd41 	bl	800b718 <_init>
 800ac96:	1b64      	subs	r4, r4, r5
 800ac98:	10a4      	asrs	r4, r4, #2
 800ac9a:	42a6      	cmp	r6, r4
 800ac9c:	d105      	bne.n	800acaa <__libc_init_array+0x2e>
 800ac9e:	bd70      	pop	{r4, r5, r6, pc}
 800aca0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aca4:	3601      	adds	r6, #1
 800aca6:	4798      	blx	r3
 800aca8:	e7ee      	b.n	800ac88 <__libc_init_array+0xc>
 800acaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800acae:	3601      	adds	r6, #1
 800acb0:	4798      	blx	r3
 800acb2:	e7f2      	b.n	800ac9a <__libc_init_array+0x1e>
 800acb4:	0800bf7c 	.word	0x0800bf7c
 800acb8:	0800bf7c 	.word	0x0800bf7c
 800acbc:	0800bf7c 	.word	0x0800bf7c
 800acc0:	0800bf80 	.word	0x0800bf80

0800acc4 <__retarget_lock_init_recursive>:
 800acc4:	4770      	bx	lr

0800acc6 <__retarget_lock_acquire_recursive>:
 800acc6:	4770      	bx	lr

0800acc8 <__retarget_lock_release_recursive>:
 800acc8:	4770      	bx	lr

0800acca <memcpy>:
 800acca:	440a      	add	r2, r1
 800accc:	1e43      	subs	r3, r0, #1
 800acce:	4291      	cmp	r1, r2
 800acd0:	d100      	bne.n	800acd4 <memcpy+0xa>
 800acd2:	4770      	bx	lr
 800acd4:	b510      	push	{r4, lr}
 800acd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acda:	4291      	cmp	r1, r2
 800acdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ace0:	d1f9      	bne.n	800acd6 <memcpy+0xc>
 800ace2:	bd10      	pop	{r4, pc}

0800ace4 <_free_r>:
 800ace4:	b538      	push	{r3, r4, r5, lr}
 800ace6:	4605      	mov	r5, r0
 800ace8:	2900      	cmp	r1, #0
 800acea:	d041      	beq.n	800ad70 <_free_r+0x8c>
 800acec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acf0:	1f0c      	subs	r4, r1, #4
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	bfb8      	it	lt
 800acf6:	18e4      	addlt	r4, r4, r3
 800acf8:	f000 f8e0 	bl	800aebc <__malloc_lock>
 800acfc:	4a1d      	ldr	r2, [pc, #116]	@ (800ad74 <_free_r+0x90>)
 800acfe:	6813      	ldr	r3, [r2, #0]
 800ad00:	b933      	cbnz	r3, 800ad10 <_free_r+0x2c>
 800ad02:	6063      	str	r3, [r4, #4]
 800ad04:	6014      	str	r4, [r2, #0]
 800ad06:	4628      	mov	r0, r5
 800ad08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad0c:	f000 b8dc 	b.w	800aec8 <__malloc_unlock>
 800ad10:	42a3      	cmp	r3, r4
 800ad12:	d908      	bls.n	800ad26 <_free_r+0x42>
 800ad14:	6820      	ldr	r0, [r4, #0]
 800ad16:	1821      	adds	r1, r4, r0
 800ad18:	428b      	cmp	r3, r1
 800ad1a:	bf01      	itttt	eq
 800ad1c:	6819      	ldreq	r1, [r3, #0]
 800ad1e:	685b      	ldreq	r3, [r3, #4]
 800ad20:	1809      	addeq	r1, r1, r0
 800ad22:	6021      	streq	r1, [r4, #0]
 800ad24:	e7ed      	b.n	800ad02 <_free_r+0x1e>
 800ad26:	461a      	mov	r2, r3
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	b10b      	cbz	r3, 800ad30 <_free_r+0x4c>
 800ad2c:	42a3      	cmp	r3, r4
 800ad2e:	d9fa      	bls.n	800ad26 <_free_r+0x42>
 800ad30:	6811      	ldr	r1, [r2, #0]
 800ad32:	1850      	adds	r0, r2, r1
 800ad34:	42a0      	cmp	r0, r4
 800ad36:	d10b      	bne.n	800ad50 <_free_r+0x6c>
 800ad38:	6820      	ldr	r0, [r4, #0]
 800ad3a:	4401      	add	r1, r0
 800ad3c:	1850      	adds	r0, r2, r1
 800ad3e:	6011      	str	r1, [r2, #0]
 800ad40:	4283      	cmp	r3, r0
 800ad42:	d1e0      	bne.n	800ad06 <_free_r+0x22>
 800ad44:	6818      	ldr	r0, [r3, #0]
 800ad46:	685b      	ldr	r3, [r3, #4]
 800ad48:	4408      	add	r0, r1
 800ad4a:	6053      	str	r3, [r2, #4]
 800ad4c:	6010      	str	r0, [r2, #0]
 800ad4e:	e7da      	b.n	800ad06 <_free_r+0x22>
 800ad50:	d902      	bls.n	800ad58 <_free_r+0x74>
 800ad52:	230c      	movs	r3, #12
 800ad54:	602b      	str	r3, [r5, #0]
 800ad56:	e7d6      	b.n	800ad06 <_free_r+0x22>
 800ad58:	6820      	ldr	r0, [r4, #0]
 800ad5a:	1821      	adds	r1, r4, r0
 800ad5c:	428b      	cmp	r3, r1
 800ad5e:	bf02      	ittt	eq
 800ad60:	6819      	ldreq	r1, [r3, #0]
 800ad62:	685b      	ldreq	r3, [r3, #4]
 800ad64:	1809      	addeq	r1, r1, r0
 800ad66:	6063      	str	r3, [r4, #4]
 800ad68:	bf08      	it	eq
 800ad6a:	6021      	streq	r1, [r4, #0]
 800ad6c:	6054      	str	r4, [r2, #4]
 800ad6e:	e7ca      	b.n	800ad06 <_free_r+0x22>
 800ad70:	bd38      	pop	{r3, r4, r5, pc}
 800ad72:	bf00      	nop
 800ad74:	20008f80 	.word	0x20008f80

0800ad78 <sbrk_aligned>:
 800ad78:	b570      	push	{r4, r5, r6, lr}
 800ad7a:	4e0f      	ldr	r6, [pc, #60]	@ (800adb8 <sbrk_aligned+0x40>)
 800ad7c:	460c      	mov	r4, r1
 800ad7e:	4605      	mov	r5, r0
 800ad80:	6831      	ldr	r1, [r6, #0]
 800ad82:	b911      	cbnz	r1, 800ad8a <sbrk_aligned+0x12>
 800ad84:	f000 fcaa 	bl	800b6dc <_sbrk_r>
 800ad88:	6030      	str	r0, [r6, #0]
 800ad8a:	4621      	mov	r1, r4
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	f000 fca5 	bl	800b6dc <_sbrk_r>
 800ad92:	1c43      	adds	r3, r0, #1
 800ad94:	d103      	bne.n	800ad9e <sbrk_aligned+0x26>
 800ad96:	f04f 34ff 	mov.w	r4, #4294967295
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	bd70      	pop	{r4, r5, r6, pc}
 800ad9e:	1cc4      	adds	r4, r0, #3
 800ada0:	f024 0403 	bic.w	r4, r4, #3
 800ada4:	42a0      	cmp	r0, r4
 800ada6:	d0f8      	beq.n	800ad9a <sbrk_aligned+0x22>
 800ada8:	1a21      	subs	r1, r4, r0
 800adaa:	4628      	mov	r0, r5
 800adac:	f000 fc96 	bl	800b6dc <_sbrk_r>
 800adb0:	3001      	adds	r0, #1
 800adb2:	d1f2      	bne.n	800ad9a <sbrk_aligned+0x22>
 800adb4:	e7ef      	b.n	800ad96 <sbrk_aligned+0x1e>
 800adb6:	bf00      	nop
 800adb8:	20008f7c 	.word	0x20008f7c

0800adbc <_malloc_r>:
 800adbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adc0:	1ccd      	adds	r5, r1, #3
 800adc2:	4606      	mov	r6, r0
 800adc4:	f025 0503 	bic.w	r5, r5, #3
 800adc8:	3508      	adds	r5, #8
 800adca:	2d0c      	cmp	r5, #12
 800adcc:	bf38      	it	cc
 800adce:	250c      	movcc	r5, #12
 800add0:	2d00      	cmp	r5, #0
 800add2:	db01      	blt.n	800add8 <_malloc_r+0x1c>
 800add4:	42a9      	cmp	r1, r5
 800add6:	d904      	bls.n	800ade2 <_malloc_r+0x26>
 800add8:	230c      	movs	r3, #12
 800adda:	6033      	str	r3, [r6, #0]
 800addc:	2000      	movs	r0, #0
 800adde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ade2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aeb8 <_malloc_r+0xfc>
 800ade6:	f000 f869 	bl	800aebc <__malloc_lock>
 800adea:	f8d8 3000 	ldr.w	r3, [r8]
 800adee:	461c      	mov	r4, r3
 800adf0:	bb44      	cbnz	r4, 800ae44 <_malloc_r+0x88>
 800adf2:	4629      	mov	r1, r5
 800adf4:	4630      	mov	r0, r6
 800adf6:	f7ff ffbf 	bl	800ad78 <sbrk_aligned>
 800adfa:	1c43      	adds	r3, r0, #1
 800adfc:	4604      	mov	r4, r0
 800adfe:	d158      	bne.n	800aeb2 <_malloc_r+0xf6>
 800ae00:	f8d8 4000 	ldr.w	r4, [r8]
 800ae04:	4627      	mov	r7, r4
 800ae06:	2f00      	cmp	r7, #0
 800ae08:	d143      	bne.n	800ae92 <_malloc_r+0xd6>
 800ae0a:	2c00      	cmp	r4, #0
 800ae0c:	d04b      	beq.n	800aea6 <_malloc_r+0xea>
 800ae0e:	6823      	ldr	r3, [r4, #0]
 800ae10:	4639      	mov	r1, r7
 800ae12:	4630      	mov	r0, r6
 800ae14:	eb04 0903 	add.w	r9, r4, r3
 800ae18:	f000 fc60 	bl	800b6dc <_sbrk_r>
 800ae1c:	4581      	cmp	r9, r0
 800ae1e:	d142      	bne.n	800aea6 <_malloc_r+0xea>
 800ae20:	6821      	ldr	r1, [r4, #0]
 800ae22:	4630      	mov	r0, r6
 800ae24:	1a6d      	subs	r5, r5, r1
 800ae26:	4629      	mov	r1, r5
 800ae28:	f7ff ffa6 	bl	800ad78 <sbrk_aligned>
 800ae2c:	3001      	adds	r0, #1
 800ae2e:	d03a      	beq.n	800aea6 <_malloc_r+0xea>
 800ae30:	6823      	ldr	r3, [r4, #0]
 800ae32:	442b      	add	r3, r5
 800ae34:	6023      	str	r3, [r4, #0]
 800ae36:	f8d8 3000 	ldr.w	r3, [r8]
 800ae3a:	685a      	ldr	r2, [r3, #4]
 800ae3c:	bb62      	cbnz	r2, 800ae98 <_malloc_r+0xdc>
 800ae3e:	f8c8 7000 	str.w	r7, [r8]
 800ae42:	e00f      	b.n	800ae64 <_malloc_r+0xa8>
 800ae44:	6822      	ldr	r2, [r4, #0]
 800ae46:	1b52      	subs	r2, r2, r5
 800ae48:	d420      	bmi.n	800ae8c <_malloc_r+0xd0>
 800ae4a:	2a0b      	cmp	r2, #11
 800ae4c:	d917      	bls.n	800ae7e <_malloc_r+0xc2>
 800ae4e:	1961      	adds	r1, r4, r5
 800ae50:	42a3      	cmp	r3, r4
 800ae52:	6025      	str	r5, [r4, #0]
 800ae54:	bf18      	it	ne
 800ae56:	6059      	strne	r1, [r3, #4]
 800ae58:	6863      	ldr	r3, [r4, #4]
 800ae5a:	bf08      	it	eq
 800ae5c:	f8c8 1000 	streq.w	r1, [r8]
 800ae60:	5162      	str	r2, [r4, r5]
 800ae62:	604b      	str	r3, [r1, #4]
 800ae64:	4630      	mov	r0, r6
 800ae66:	f000 f82f 	bl	800aec8 <__malloc_unlock>
 800ae6a:	f104 000b 	add.w	r0, r4, #11
 800ae6e:	1d23      	adds	r3, r4, #4
 800ae70:	f020 0007 	bic.w	r0, r0, #7
 800ae74:	1ac2      	subs	r2, r0, r3
 800ae76:	bf1c      	itt	ne
 800ae78:	1a1b      	subne	r3, r3, r0
 800ae7a:	50a3      	strne	r3, [r4, r2]
 800ae7c:	e7af      	b.n	800adde <_malloc_r+0x22>
 800ae7e:	6862      	ldr	r2, [r4, #4]
 800ae80:	42a3      	cmp	r3, r4
 800ae82:	bf0c      	ite	eq
 800ae84:	f8c8 2000 	streq.w	r2, [r8]
 800ae88:	605a      	strne	r2, [r3, #4]
 800ae8a:	e7eb      	b.n	800ae64 <_malloc_r+0xa8>
 800ae8c:	4623      	mov	r3, r4
 800ae8e:	6864      	ldr	r4, [r4, #4]
 800ae90:	e7ae      	b.n	800adf0 <_malloc_r+0x34>
 800ae92:	463c      	mov	r4, r7
 800ae94:	687f      	ldr	r7, [r7, #4]
 800ae96:	e7b6      	b.n	800ae06 <_malloc_r+0x4a>
 800ae98:	461a      	mov	r2, r3
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	42a3      	cmp	r3, r4
 800ae9e:	d1fb      	bne.n	800ae98 <_malloc_r+0xdc>
 800aea0:	2300      	movs	r3, #0
 800aea2:	6053      	str	r3, [r2, #4]
 800aea4:	e7de      	b.n	800ae64 <_malloc_r+0xa8>
 800aea6:	230c      	movs	r3, #12
 800aea8:	4630      	mov	r0, r6
 800aeaa:	6033      	str	r3, [r6, #0]
 800aeac:	f000 f80c 	bl	800aec8 <__malloc_unlock>
 800aeb0:	e794      	b.n	800addc <_malloc_r+0x20>
 800aeb2:	6005      	str	r5, [r0, #0]
 800aeb4:	e7d6      	b.n	800ae64 <_malloc_r+0xa8>
 800aeb6:	bf00      	nop
 800aeb8:	20008f80 	.word	0x20008f80

0800aebc <__malloc_lock>:
 800aebc:	4801      	ldr	r0, [pc, #4]	@ (800aec4 <__malloc_lock+0x8>)
 800aebe:	f7ff bf02 	b.w	800acc6 <__retarget_lock_acquire_recursive>
 800aec2:	bf00      	nop
 800aec4:	20008f78 	.word	0x20008f78

0800aec8 <__malloc_unlock>:
 800aec8:	4801      	ldr	r0, [pc, #4]	@ (800aed0 <__malloc_unlock+0x8>)
 800aeca:	f7ff befd 	b.w	800acc8 <__retarget_lock_release_recursive>
 800aece:	bf00      	nop
 800aed0:	20008f78 	.word	0x20008f78

0800aed4 <__sfputc_r>:
 800aed4:	6893      	ldr	r3, [r2, #8]
 800aed6:	3b01      	subs	r3, #1
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	6093      	str	r3, [r2, #8]
 800aedc:	b410      	push	{r4}
 800aede:	da08      	bge.n	800aef2 <__sfputc_r+0x1e>
 800aee0:	6994      	ldr	r4, [r2, #24]
 800aee2:	42a3      	cmp	r3, r4
 800aee4:	db01      	blt.n	800aeea <__sfputc_r+0x16>
 800aee6:	290a      	cmp	r1, #10
 800aee8:	d103      	bne.n	800aef2 <__sfputc_r+0x1e>
 800aeea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aeee:	f7ff bddc 	b.w	800aaaa <__swbuf_r>
 800aef2:	6813      	ldr	r3, [r2, #0]
 800aef4:	1c58      	adds	r0, r3, #1
 800aef6:	6010      	str	r0, [r2, #0]
 800aef8:	4608      	mov	r0, r1
 800aefa:	7019      	strb	r1, [r3, #0]
 800aefc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af00:	4770      	bx	lr

0800af02 <__sfputs_r>:
 800af02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af04:	4606      	mov	r6, r0
 800af06:	460f      	mov	r7, r1
 800af08:	4614      	mov	r4, r2
 800af0a:	18d5      	adds	r5, r2, r3
 800af0c:	42ac      	cmp	r4, r5
 800af0e:	d101      	bne.n	800af14 <__sfputs_r+0x12>
 800af10:	2000      	movs	r0, #0
 800af12:	e007      	b.n	800af24 <__sfputs_r+0x22>
 800af14:	463a      	mov	r2, r7
 800af16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af1a:	4630      	mov	r0, r6
 800af1c:	f7ff ffda 	bl	800aed4 <__sfputc_r>
 800af20:	1c43      	adds	r3, r0, #1
 800af22:	d1f3      	bne.n	800af0c <__sfputs_r+0xa>
 800af24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af28 <_vfiprintf_r>:
 800af28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af2c:	460d      	mov	r5, r1
 800af2e:	b09d      	sub	sp, #116	@ 0x74
 800af30:	4614      	mov	r4, r2
 800af32:	4698      	mov	r8, r3
 800af34:	4606      	mov	r6, r0
 800af36:	b118      	cbz	r0, 800af40 <_vfiprintf_r+0x18>
 800af38:	6a03      	ldr	r3, [r0, #32]
 800af3a:	b90b      	cbnz	r3, 800af40 <_vfiprintf_r+0x18>
 800af3c:	f7ff fccc 	bl	800a8d8 <__sinit>
 800af40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af42:	07d9      	lsls	r1, r3, #31
 800af44:	d405      	bmi.n	800af52 <_vfiprintf_r+0x2a>
 800af46:	89ab      	ldrh	r3, [r5, #12]
 800af48:	059a      	lsls	r2, r3, #22
 800af4a:	d402      	bmi.n	800af52 <_vfiprintf_r+0x2a>
 800af4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af4e:	f7ff feba 	bl	800acc6 <__retarget_lock_acquire_recursive>
 800af52:	89ab      	ldrh	r3, [r5, #12]
 800af54:	071b      	lsls	r3, r3, #28
 800af56:	d501      	bpl.n	800af5c <_vfiprintf_r+0x34>
 800af58:	692b      	ldr	r3, [r5, #16]
 800af5a:	b99b      	cbnz	r3, 800af84 <_vfiprintf_r+0x5c>
 800af5c:	4629      	mov	r1, r5
 800af5e:	4630      	mov	r0, r6
 800af60:	f7ff fde2 	bl	800ab28 <__swsetup_r>
 800af64:	b170      	cbz	r0, 800af84 <_vfiprintf_r+0x5c>
 800af66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af68:	07dc      	lsls	r4, r3, #31
 800af6a:	d504      	bpl.n	800af76 <_vfiprintf_r+0x4e>
 800af6c:	f04f 30ff 	mov.w	r0, #4294967295
 800af70:	b01d      	add	sp, #116	@ 0x74
 800af72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af76:	89ab      	ldrh	r3, [r5, #12]
 800af78:	0598      	lsls	r0, r3, #22
 800af7a:	d4f7      	bmi.n	800af6c <_vfiprintf_r+0x44>
 800af7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af7e:	f7ff fea3 	bl	800acc8 <__retarget_lock_release_recursive>
 800af82:	e7f3      	b.n	800af6c <_vfiprintf_r+0x44>
 800af84:	2300      	movs	r3, #0
 800af86:	f8cd 800c 	str.w	r8, [sp, #12]
 800af8a:	f04f 0901 	mov.w	r9, #1
 800af8e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800b144 <_vfiprintf_r+0x21c>
 800af92:	9309      	str	r3, [sp, #36]	@ 0x24
 800af94:	2320      	movs	r3, #32
 800af96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af9a:	2330      	movs	r3, #48	@ 0x30
 800af9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800afa0:	4623      	mov	r3, r4
 800afa2:	469a      	mov	sl, r3
 800afa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afa8:	b10a      	cbz	r2, 800afae <_vfiprintf_r+0x86>
 800afaa:	2a25      	cmp	r2, #37	@ 0x25
 800afac:	d1f9      	bne.n	800afa2 <_vfiprintf_r+0x7a>
 800afae:	ebba 0b04 	subs.w	fp, sl, r4
 800afb2:	d00b      	beq.n	800afcc <_vfiprintf_r+0xa4>
 800afb4:	465b      	mov	r3, fp
 800afb6:	4622      	mov	r2, r4
 800afb8:	4629      	mov	r1, r5
 800afba:	4630      	mov	r0, r6
 800afbc:	f7ff ffa1 	bl	800af02 <__sfputs_r>
 800afc0:	3001      	adds	r0, #1
 800afc2:	f000 80a7 	beq.w	800b114 <_vfiprintf_r+0x1ec>
 800afc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afc8:	445a      	add	r2, fp
 800afca:	9209      	str	r2, [sp, #36]	@ 0x24
 800afcc:	f89a 3000 	ldrb.w	r3, [sl]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	f000 809f 	beq.w	800b114 <_vfiprintf_r+0x1ec>
 800afd6:	2300      	movs	r3, #0
 800afd8:	f04f 32ff 	mov.w	r2, #4294967295
 800afdc:	f10a 0a01 	add.w	sl, sl, #1
 800afe0:	9304      	str	r3, [sp, #16]
 800afe2:	9307      	str	r3, [sp, #28]
 800afe4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800afe8:	931a      	str	r3, [sp, #104]	@ 0x68
 800afea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afee:	4654      	mov	r4, sl
 800aff0:	2205      	movs	r2, #5
 800aff2:	4854      	ldr	r0, [pc, #336]	@ (800b144 <_vfiprintf_r+0x21c>)
 800aff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aff8:	f000 fb80 	bl	800b6fc <memchr>
 800affc:	9a04      	ldr	r2, [sp, #16]
 800affe:	b9d8      	cbnz	r0, 800b038 <_vfiprintf_r+0x110>
 800b000:	06d1      	lsls	r1, r2, #27
 800b002:	bf44      	itt	mi
 800b004:	2320      	movmi	r3, #32
 800b006:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b00a:	0713      	lsls	r3, r2, #28
 800b00c:	bf44      	itt	mi
 800b00e:	232b      	movmi	r3, #43	@ 0x2b
 800b010:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b014:	f89a 3000 	ldrb.w	r3, [sl]
 800b018:	2b2a      	cmp	r3, #42	@ 0x2a
 800b01a:	d015      	beq.n	800b048 <_vfiprintf_r+0x120>
 800b01c:	9a07      	ldr	r2, [sp, #28]
 800b01e:	4654      	mov	r4, sl
 800b020:	2000      	movs	r0, #0
 800b022:	f04f 0c0a 	mov.w	ip, #10
 800b026:	4621      	mov	r1, r4
 800b028:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b02c:	3b30      	subs	r3, #48	@ 0x30
 800b02e:	2b09      	cmp	r3, #9
 800b030:	d94b      	bls.n	800b0ca <_vfiprintf_r+0x1a2>
 800b032:	b1b0      	cbz	r0, 800b062 <_vfiprintf_r+0x13a>
 800b034:	9207      	str	r2, [sp, #28]
 800b036:	e014      	b.n	800b062 <_vfiprintf_r+0x13a>
 800b038:	eba0 0308 	sub.w	r3, r0, r8
 800b03c:	46a2      	mov	sl, r4
 800b03e:	fa09 f303 	lsl.w	r3, r9, r3
 800b042:	4313      	orrs	r3, r2
 800b044:	9304      	str	r3, [sp, #16]
 800b046:	e7d2      	b.n	800afee <_vfiprintf_r+0xc6>
 800b048:	9b03      	ldr	r3, [sp, #12]
 800b04a:	1d19      	adds	r1, r3, #4
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	9103      	str	r1, [sp, #12]
 800b052:	bfbb      	ittet	lt
 800b054:	425b      	neglt	r3, r3
 800b056:	f042 0202 	orrlt.w	r2, r2, #2
 800b05a:	9307      	strge	r3, [sp, #28]
 800b05c:	9307      	strlt	r3, [sp, #28]
 800b05e:	bfb8      	it	lt
 800b060:	9204      	strlt	r2, [sp, #16]
 800b062:	7823      	ldrb	r3, [r4, #0]
 800b064:	2b2e      	cmp	r3, #46	@ 0x2e
 800b066:	d10a      	bne.n	800b07e <_vfiprintf_r+0x156>
 800b068:	7863      	ldrb	r3, [r4, #1]
 800b06a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b06c:	d132      	bne.n	800b0d4 <_vfiprintf_r+0x1ac>
 800b06e:	9b03      	ldr	r3, [sp, #12]
 800b070:	3402      	adds	r4, #2
 800b072:	1d1a      	adds	r2, r3, #4
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b07a:	9203      	str	r2, [sp, #12]
 800b07c:	9305      	str	r3, [sp, #20]
 800b07e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b154 <_vfiprintf_r+0x22c>
 800b082:	2203      	movs	r2, #3
 800b084:	7821      	ldrb	r1, [r4, #0]
 800b086:	4650      	mov	r0, sl
 800b088:	f000 fb38 	bl	800b6fc <memchr>
 800b08c:	b138      	cbz	r0, 800b09e <_vfiprintf_r+0x176>
 800b08e:	eba0 000a 	sub.w	r0, r0, sl
 800b092:	2240      	movs	r2, #64	@ 0x40
 800b094:	9b04      	ldr	r3, [sp, #16]
 800b096:	3401      	adds	r4, #1
 800b098:	4082      	lsls	r2, r0
 800b09a:	4313      	orrs	r3, r2
 800b09c:	9304      	str	r3, [sp, #16]
 800b09e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0a2:	2206      	movs	r2, #6
 800b0a4:	4828      	ldr	r0, [pc, #160]	@ (800b148 <_vfiprintf_r+0x220>)
 800b0a6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b0aa:	f000 fb27 	bl	800b6fc <memchr>
 800b0ae:	2800      	cmp	r0, #0
 800b0b0:	d03f      	beq.n	800b132 <_vfiprintf_r+0x20a>
 800b0b2:	4b26      	ldr	r3, [pc, #152]	@ (800b14c <_vfiprintf_r+0x224>)
 800b0b4:	bb1b      	cbnz	r3, 800b0fe <_vfiprintf_r+0x1d6>
 800b0b6:	9b03      	ldr	r3, [sp, #12]
 800b0b8:	3307      	adds	r3, #7
 800b0ba:	f023 0307 	bic.w	r3, r3, #7
 800b0be:	3308      	adds	r3, #8
 800b0c0:	9303      	str	r3, [sp, #12]
 800b0c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0c4:	443b      	add	r3, r7
 800b0c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0c8:	e76a      	b.n	800afa0 <_vfiprintf_r+0x78>
 800b0ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0ce:	460c      	mov	r4, r1
 800b0d0:	2001      	movs	r0, #1
 800b0d2:	e7a8      	b.n	800b026 <_vfiprintf_r+0xfe>
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	3401      	adds	r4, #1
 800b0d8:	f04f 0c0a 	mov.w	ip, #10
 800b0dc:	4619      	mov	r1, r3
 800b0de:	9305      	str	r3, [sp, #20]
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0e6:	3a30      	subs	r2, #48	@ 0x30
 800b0e8:	2a09      	cmp	r2, #9
 800b0ea:	d903      	bls.n	800b0f4 <_vfiprintf_r+0x1cc>
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d0c6      	beq.n	800b07e <_vfiprintf_r+0x156>
 800b0f0:	9105      	str	r1, [sp, #20]
 800b0f2:	e7c4      	b.n	800b07e <_vfiprintf_r+0x156>
 800b0f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0f8:	4604      	mov	r4, r0
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	e7f0      	b.n	800b0e0 <_vfiprintf_r+0x1b8>
 800b0fe:	ab03      	add	r3, sp, #12
 800b100:	462a      	mov	r2, r5
 800b102:	a904      	add	r1, sp, #16
 800b104:	4630      	mov	r0, r6
 800b106:	9300      	str	r3, [sp, #0]
 800b108:	4b11      	ldr	r3, [pc, #68]	@ (800b150 <_vfiprintf_r+0x228>)
 800b10a:	f3af 8000 	nop.w
 800b10e:	4607      	mov	r7, r0
 800b110:	1c78      	adds	r0, r7, #1
 800b112:	d1d6      	bne.n	800b0c2 <_vfiprintf_r+0x19a>
 800b114:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b116:	07d9      	lsls	r1, r3, #31
 800b118:	d405      	bmi.n	800b126 <_vfiprintf_r+0x1fe>
 800b11a:	89ab      	ldrh	r3, [r5, #12]
 800b11c:	059a      	lsls	r2, r3, #22
 800b11e:	d402      	bmi.n	800b126 <_vfiprintf_r+0x1fe>
 800b120:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b122:	f7ff fdd1 	bl	800acc8 <__retarget_lock_release_recursive>
 800b126:	89ab      	ldrh	r3, [r5, #12]
 800b128:	065b      	lsls	r3, r3, #25
 800b12a:	f53f af1f 	bmi.w	800af6c <_vfiprintf_r+0x44>
 800b12e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b130:	e71e      	b.n	800af70 <_vfiprintf_r+0x48>
 800b132:	ab03      	add	r3, sp, #12
 800b134:	462a      	mov	r2, r5
 800b136:	a904      	add	r1, sp, #16
 800b138:	4630      	mov	r0, r6
 800b13a:	9300      	str	r3, [sp, #0]
 800b13c:	4b04      	ldr	r3, [pc, #16]	@ (800b150 <_vfiprintf_r+0x228>)
 800b13e:	f000 f87d 	bl	800b23c <_printf_i>
 800b142:	e7e4      	b.n	800b10e <_vfiprintf_r+0x1e6>
 800b144:	0800bf40 	.word	0x0800bf40
 800b148:	0800bf4a 	.word	0x0800bf4a
 800b14c:	00000000 	.word	0x00000000
 800b150:	0800af03 	.word	0x0800af03
 800b154:	0800bf46 	.word	0x0800bf46

0800b158 <_printf_common>:
 800b158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b15c:	4616      	mov	r6, r2
 800b15e:	4698      	mov	r8, r3
 800b160:	688a      	ldr	r2, [r1, #8]
 800b162:	4607      	mov	r7, r0
 800b164:	690b      	ldr	r3, [r1, #16]
 800b166:	460c      	mov	r4, r1
 800b168:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b16c:	4293      	cmp	r3, r2
 800b16e:	bfb8      	it	lt
 800b170:	4613      	movlt	r3, r2
 800b172:	6033      	str	r3, [r6, #0]
 800b174:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b178:	b10a      	cbz	r2, 800b17e <_printf_common+0x26>
 800b17a:	3301      	adds	r3, #1
 800b17c:	6033      	str	r3, [r6, #0]
 800b17e:	6823      	ldr	r3, [r4, #0]
 800b180:	0699      	lsls	r1, r3, #26
 800b182:	bf42      	ittt	mi
 800b184:	6833      	ldrmi	r3, [r6, #0]
 800b186:	3302      	addmi	r3, #2
 800b188:	6033      	strmi	r3, [r6, #0]
 800b18a:	6825      	ldr	r5, [r4, #0]
 800b18c:	f015 0506 	ands.w	r5, r5, #6
 800b190:	d106      	bne.n	800b1a0 <_printf_common+0x48>
 800b192:	f104 0a19 	add.w	sl, r4, #25
 800b196:	68e3      	ldr	r3, [r4, #12]
 800b198:	6832      	ldr	r2, [r6, #0]
 800b19a:	1a9b      	subs	r3, r3, r2
 800b19c:	42ab      	cmp	r3, r5
 800b19e:	dc2b      	bgt.n	800b1f8 <_printf_common+0xa0>
 800b1a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b1a4:	6822      	ldr	r2, [r4, #0]
 800b1a6:	3b00      	subs	r3, #0
 800b1a8:	bf18      	it	ne
 800b1aa:	2301      	movne	r3, #1
 800b1ac:	0692      	lsls	r2, r2, #26
 800b1ae:	d430      	bmi.n	800b212 <_printf_common+0xba>
 800b1b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b1b4:	4641      	mov	r1, r8
 800b1b6:	4638      	mov	r0, r7
 800b1b8:	47c8      	blx	r9
 800b1ba:	3001      	adds	r0, #1
 800b1bc:	d023      	beq.n	800b206 <_printf_common+0xae>
 800b1be:	6823      	ldr	r3, [r4, #0]
 800b1c0:	341a      	adds	r4, #26
 800b1c2:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800b1c6:	f003 0306 	and.w	r3, r3, #6
 800b1ca:	2b04      	cmp	r3, #4
 800b1cc:	bf0a      	itet	eq
 800b1ce:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800b1d2:	2500      	movne	r5, #0
 800b1d4:	6833      	ldreq	r3, [r6, #0]
 800b1d6:	f04f 0600 	mov.w	r6, #0
 800b1da:	bf08      	it	eq
 800b1dc:	1aed      	subeq	r5, r5, r3
 800b1de:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b1e2:	bf08      	it	eq
 800b1e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	bfc4      	itt	gt
 800b1ec:	1a9b      	subgt	r3, r3, r2
 800b1ee:	18ed      	addgt	r5, r5, r3
 800b1f0:	42b5      	cmp	r5, r6
 800b1f2:	d11a      	bne.n	800b22a <_printf_common+0xd2>
 800b1f4:	2000      	movs	r0, #0
 800b1f6:	e008      	b.n	800b20a <_printf_common+0xb2>
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	4652      	mov	r2, sl
 800b1fc:	4641      	mov	r1, r8
 800b1fe:	4638      	mov	r0, r7
 800b200:	47c8      	blx	r9
 800b202:	3001      	adds	r0, #1
 800b204:	d103      	bne.n	800b20e <_printf_common+0xb6>
 800b206:	f04f 30ff 	mov.w	r0, #4294967295
 800b20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b20e:	3501      	adds	r5, #1
 800b210:	e7c1      	b.n	800b196 <_printf_common+0x3e>
 800b212:	18e1      	adds	r1, r4, r3
 800b214:	1c5a      	adds	r2, r3, #1
 800b216:	2030      	movs	r0, #48	@ 0x30
 800b218:	3302      	adds	r3, #2
 800b21a:	4422      	add	r2, r4
 800b21c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b220:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b224:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b228:	e7c2      	b.n	800b1b0 <_printf_common+0x58>
 800b22a:	2301      	movs	r3, #1
 800b22c:	4622      	mov	r2, r4
 800b22e:	4641      	mov	r1, r8
 800b230:	4638      	mov	r0, r7
 800b232:	47c8      	blx	r9
 800b234:	3001      	adds	r0, #1
 800b236:	d0e6      	beq.n	800b206 <_printf_common+0xae>
 800b238:	3601      	adds	r6, #1
 800b23a:	e7d9      	b.n	800b1f0 <_printf_common+0x98>

0800b23c <_printf_i>:
 800b23c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b240:	7e0f      	ldrb	r7, [r1, #24]
 800b242:	4691      	mov	r9, r2
 800b244:	4680      	mov	r8, r0
 800b246:	460c      	mov	r4, r1
 800b248:	2f78      	cmp	r7, #120	@ 0x78
 800b24a:	469a      	mov	sl, r3
 800b24c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b24e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b252:	d807      	bhi.n	800b264 <_printf_i+0x28>
 800b254:	2f62      	cmp	r7, #98	@ 0x62
 800b256:	d80a      	bhi.n	800b26e <_printf_i+0x32>
 800b258:	2f00      	cmp	r7, #0
 800b25a:	f000 80d2 	beq.w	800b402 <_printf_i+0x1c6>
 800b25e:	2f58      	cmp	r7, #88	@ 0x58
 800b260:	f000 80b9 	beq.w	800b3d6 <_printf_i+0x19a>
 800b264:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b268:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b26c:	e03a      	b.n	800b2e4 <_printf_i+0xa8>
 800b26e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b272:	2b15      	cmp	r3, #21
 800b274:	d8f6      	bhi.n	800b264 <_printf_i+0x28>
 800b276:	a101      	add	r1, pc, #4	@ (adr r1, 800b27c <_printf_i+0x40>)
 800b278:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b27c:	0800b2d5 	.word	0x0800b2d5
 800b280:	0800b2e9 	.word	0x0800b2e9
 800b284:	0800b265 	.word	0x0800b265
 800b288:	0800b265 	.word	0x0800b265
 800b28c:	0800b265 	.word	0x0800b265
 800b290:	0800b265 	.word	0x0800b265
 800b294:	0800b2e9 	.word	0x0800b2e9
 800b298:	0800b265 	.word	0x0800b265
 800b29c:	0800b265 	.word	0x0800b265
 800b2a0:	0800b265 	.word	0x0800b265
 800b2a4:	0800b265 	.word	0x0800b265
 800b2a8:	0800b3e9 	.word	0x0800b3e9
 800b2ac:	0800b313 	.word	0x0800b313
 800b2b0:	0800b3a3 	.word	0x0800b3a3
 800b2b4:	0800b265 	.word	0x0800b265
 800b2b8:	0800b265 	.word	0x0800b265
 800b2bc:	0800b40b 	.word	0x0800b40b
 800b2c0:	0800b265 	.word	0x0800b265
 800b2c4:	0800b313 	.word	0x0800b313
 800b2c8:	0800b265 	.word	0x0800b265
 800b2cc:	0800b265 	.word	0x0800b265
 800b2d0:	0800b3ab 	.word	0x0800b3ab
 800b2d4:	6833      	ldr	r3, [r6, #0]
 800b2d6:	1d1a      	adds	r2, r3, #4
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	6032      	str	r2, [r6, #0]
 800b2dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b2e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	e09d      	b.n	800b424 <_printf_i+0x1e8>
 800b2e8:	6833      	ldr	r3, [r6, #0]
 800b2ea:	6820      	ldr	r0, [r4, #0]
 800b2ec:	1d19      	adds	r1, r3, #4
 800b2ee:	6031      	str	r1, [r6, #0]
 800b2f0:	0606      	lsls	r6, r0, #24
 800b2f2:	d501      	bpl.n	800b2f8 <_printf_i+0xbc>
 800b2f4:	681d      	ldr	r5, [r3, #0]
 800b2f6:	e003      	b.n	800b300 <_printf_i+0xc4>
 800b2f8:	0645      	lsls	r5, r0, #25
 800b2fa:	d5fb      	bpl.n	800b2f4 <_printf_i+0xb8>
 800b2fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b300:	2d00      	cmp	r5, #0
 800b302:	da03      	bge.n	800b30c <_printf_i+0xd0>
 800b304:	232d      	movs	r3, #45	@ 0x2d
 800b306:	426d      	negs	r5, r5
 800b308:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b30c:	4859      	ldr	r0, [pc, #356]	@ (800b474 <_printf_i+0x238>)
 800b30e:	230a      	movs	r3, #10
 800b310:	e011      	b.n	800b336 <_printf_i+0xfa>
 800b312:	6821      	ldr	r1, [r4, #0]
 800b314:	6833      	ldr	r3, [r6, #0]
 800b316:	0608      	lsls	r0, r1, #24
 800b318:	f853 5b04 	ldr.w	r5, [r3], #4
 800b31c:	d402      	bmi.n	800b324 <_printf_i+0xe8>
 800b31e:	0649      	lsls	r1, r1, #25
 800b320:	bf48      	it	mi
 800b322:	b2ad      	uxthmi	r5, r5
 800b324:	2f6f      	cmp	r7, #111	@ 0x6f
 800b326:	6033      	str	r3, [r6, #0]
 800b328:	4852      	ldr	r0, [pc, #328]	@ (800b474 <_printf_i+0x238>)
 800b32a:	bf14      	ite	ne
 800b32c:	230a      	movne	r3, #10
 800b32e:	2308      	moveq	r3, #8
 800b330:	2100      	movs	r1, #0
 800b332:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b336:	6866      	ldr	r6, [r4, #4]
 800b338:	2e00      	cmp	r6, #0
 800b33a:	60a6      	str	r6, [r4, #8]
 800b33c:	bfa2      	ittt	ge
 800b33e:	6821      	ldrge	r1, [r4, #0]
 800b340:	f021 0104 	bicge.w	r1, r1, #4
 800b344:	6021      	strge	r1, [r4, #0]
 800b346:	b90d      	cbnz	r5, 800b34c <_printf_i+0x110>
 800b348:	2e00      	cmp	r6, #0
 800b34a:	d04b      	beq.n	800b3e4 <_printf_i+0x1a8>
 800b34c:	4616      	mov	r6, r2
 800b34e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b352:	fb03 5711 	mls	r7, r3, r1, r5
 800b356:	5dc7      	ldrb	r7, [r0, r7]
 800b358:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b35c:	462f      	mov	r7, r5
 800b35e:	460d      	mov	r5, r1
 800b360:	42bb      	cmp	r3, r7
 800b362:	d9f4      	bls.n	800b34e <_printf_i+0x112>
 800b364:	2b08      	cmp	r3, #8
 800b366:	d10b      	bne.n	800b380 <_printf_i+0x144>
 800b368:	6823      	ldr	r3, [r4, #0]
 800b36a:	07df      	lsls	r7, r3, #31
 800b36c:	d508      	bpl.n	800b380 <_printf_i+0x144>
 800b36e:	6923      	ldr	r3, [r4, #16]
 800b370:	6861      	ldr	r1, [r4, #4]
 800b372:	4299      	cmp	r1, r3
 800b374:	bfde      	ittt	le
 800b376:	2330      	movle	r3, #48	@ 0x30
 800b378:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b37c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b380:	1b92      	subs	r2, r2, r6
 800b382:	6122      	str	r2, [r4, #16]
 800b384:	464b      	mov	r3, r9
 800b386:	aa03      	add	r2, sp, #12
 800b388:	4621      	mov	r1, r4
 800b38a:	4640      	mov	r0, r8
 800b38c:	f8cd a000 	str.w	sl, [sp]
 800b390:	f7ff fee2 	bl	800b158 <_printf_common>
 800b394:	3001      	adds	r0, #1
 800b396:	d14a      	bne.n	800b42e <_printf_i+0x1f2>
 800b398:	f04f 30ff 	mov.w	r0, #4294967295
 800b39c:	b004      	add	sp, #16
 800b39e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3a2:	6823      	ldr	r3, [r4, #0]
 800b3a4:	f043 0320 	orr.w	r3, r3, #32
 800b3a8:	6023      	str	r3, [r4, #0]
 800b3aa:	2778      	movs	r7, #120	@ 0x78
 800b3ac:	4832      	ldr	r0, [pc, #200]	@ (800b478 <_printf_i+0x23c>)
 800b3ae:	6823      	ldr	r3, [r4, #0]
 800b3b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b3b4:	061f      	lsls	r7, r3, #24
 800b3b6:	6831      	ldr	r1, [r6, #0]
 800b3b8:	f851 5b04 	ldr.w	r5, [r1], #4
 800b3bc:	d402      	bmi.n	800b3c4 <_printf_i+0x188>
 800b3be:	065f      	lsls	r7, r3, #25
 800b3c0:	bf48      	it	mi
 800b3c2:	b2ad      	uxthmi	r5, r5
 800b3c4:	6031      	str	r1, [r6, #0]
 800b3c6:	07d9      	lsls	r1, r3, #31
 800b3c8:	bf44      	itt	mi
 800b3ca:	f043 0320 	orrmi.w	r3, r3, #32
 800b3ce:	6023      	strmi	r3, [r4, #0]
 800b3d0:	b11d      	cbz	r5, 800b3da <_printf_i+0x19e>
 800b3d2:	2310      	movs	r3, #16
 800b3d4:	e7ac      	b.n	800b330 <_printf_i+0xf4>
 800b3d6:	4827      	ldr	r0, [pc, #156]	@ (800b474 <_printf_i+0x238>)
 800b3d8:	e7e9      	b.n	800b3ae <_printf_i+0x172>
 800b3da:	6823      	ldr	r3, [r4, #0]
 800b3dc:	f023 0320 	bic.w	r3, r3, #32
 800b3e0:	6023      	str	r3, [r4, #0]
 800b3e2:	e7f6      	b.n	800b3d2 <_printf_i+0x196>
 800b3e4:	4616      	mov	r6, r2
 800b3e6:	e7bd      	b.n	800b364 <_printf_i+0x128>
 800b3e8:	6833      	ldr	r3, [r6, #0]
 800b3ea:	6825      	ldr	r5, [r4, #0]
 800b3ec:	1d18      	adds	r0, r3, #4
 800b3ee:	6961      	ldr	r1, [r4, #20]
 800b3f0:	6030      	str	r0, [r6, #0]
 800b3f2:	062e      	lsls	r6, r5, #24
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	d501      	bpl.n	800b3fc <_printf_i+0x1c0>
 800b3f8:	6019      	str	r1, [r3, #0]
 800b3fa:	e002      	b.n	800b402 <_printf_i+0x1c6>
 800b3fc:	0668      	lsls	r0, r5, #25
 800b3fe:	d5fb      	bpl.n	800b3f8 <_printf_i+0x1bc>
 800b400:	8019      	strh	r1, [r3, #0]
 800b402:	2300      	movs	r3, #0
 800b404:	4616      	mov	r6, r2
 800b406:	6123      	str	r3, [r4, #16]
 800b408:	e7bc      	b.n	800b384 <_printf_i+0x148>
 800b40a:	6833      	ldr	r3, [r6, #0]
 800b40c:	2100      	movs	r1, #0
 800b40e:	1d1a      	adds	r2, r3, #4
 800b410:	6032      	str	r2, [r6, #0]
 800b412:	681e      	ldr	r6, [r3, #0]
 800b414:	6862      	ldr	r2, [r4, #4]
 800b416:	4630      	mov	r0, r6
 800b418:	f000 f970 	bl	800b6fc <memchr>
 800b41c:	b108      	cbz	r0, 800b422 <_printf_i+0x1e6>
 800b41e:	1b80      	subs	r0, r0, r6
 800b420:	6060      	str	r0, [r4, #4]
 800b422:	6863      	ldr	r3, [r4, #4]
 800b424:	6123      	str	r3, [r4, #16]
 800b426:	2300      	movs	r3, #0
 800b428:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b42c:	e7aa      	b.n	800b384 <_printf_i+0x148>
 800b42e:	6923      	ldr	r3, [r4, #16]
 800b430:	4632      	mov	r2, r6
 800b432:	4649      	mov	r1, r9
 800b434:	4640      	mov	r0, r8
 800b436:	47d0      	blx	sl
 800b438:	3001      	adds	r0, #1
 800b43a:	d0ad      	beq.n	800b398 <_printf_i+0x15c>
 800b43c:	6823      	ldr	r3, [r4, #0]
 800b43e:	079b      	lsls	r3, r3, #30
 800b440:	d413      	bmi.n	800b46a <_printf_i+0x22e>
 800b442:	68e0      	ldr	r0, [r4, #12]
 800b444:	9b03      	ldr	r3, [sp, #12]
 800b446:	4298      	cmp	r0, r3
 800b448:	bfb8      	it	lt
 800b44a:	4618      	movlt	r0, r3
 800b44c:	e7a6      	b.n	800b39c <_printf_i+0x160>
 800b44e:	2301      	movs	r3, #1
 800b450:	4632      	mov	r2, r6
 800b452:	4649      	mov	r1, r9
 800b454:	4640      	mov	r0, r8
 800b456:	47d0      	blx	sl
 800b458:	3001      	adds	r0, #1
 800b45a:	d09d      	beq.n	800b398 <_printf_i+0x15c>
 800b45c:	3501      	adds	r5, #1
 800b45e:	68e3      	ldr	r3, [r4, #12]
 800b460:	9903      	ldr	r1, [sp, #12]
 800b462:	1a5b      	subs	r3, r3, r1
 800b464:	42ab      	cmp	r3, r5
 800b466:	dcf2      	bgt.n	800b44e <_printf_i+0x212>
 800b468:	e7eb      	b.n	800b442 <_printf_i+0x206>
 800b46a:	2500      	movs	r5, #0
 800b46c:	f104 0619 	add.w	r6, r4, #25
 800b470:	e7f5      	b.n	800b45e <_printf_i+0x222>
 800b472:	bf00      	nop
 800b474:	0800bf51 	.word	0x0800bf51
 800b478:	0800bf62 	.word	0x0800bf62

0800b47c <__sflush_r>:
 800b47c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b484:	0716      	lsls	r6, r2, #28
 800b486:	4605      	mov	r5, r0
 800b488:	460c      	mov	r4, r1
 800b48a:	d454      	bmi.n	800b536 <__sflush_r+0xba>
 800b48c:	684b      	ldr	r3, [r1, #4]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	dc02      	bgt.n	800b498 <__sflush_r+0x1c>
 800b492:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b494:	2b00      	cmp	r3, #0
 800b496:	dd48      	ble.n	800b52a <__sflush_r+0xae>
 800b498:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b49a:	2e00      	cmp	r6, #0
 800b49c:	d045      	beq.n	800b52a <__sflush_r+0xae>
 800b49e:	2300      	movs	r3, #0
 800b4a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b4a4:	682f      	ldr	r7, [r5, #0]
 800b4a6:	6a21      	ldr	r1, [r4, #32]
 800b4a8:	602b      	str	r3, [r5, #0]
 800b4aa:	d030      	beq.n	800b50e <__sflush_r+0x92>
 800b4ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b4ae:	89a3      	ldrh	r3, [r4, #12]
 800b4b0:	0759      	lsls	r1, r3, #29
 800b4b2:	d505      	bpl.n	800b4c0 <__sflush_r+0x44>
 800b4b4:	6863      	ldr	r3, [r4, #4]
 800b4b6:	1ad2      	subs	r2, r2, r3
 800b4b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b4ba:	b10b      	cbz	r3, 800b4c0 <__sflush_r+0x44>
 800b4bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b4be:	1ad2      	subs	r2, r2, r3
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b4c4:	6a21      	ldr	r1, [r4, #32]
 800b4c6:	4628      	mov	r0, r5
 800b4c8:	47b0      	blx	r6
 800b4ca:	1c43      	adds	r3, r0, #1
 800b4cc:	89a3      	ldrh	r3, [r4, #12]
 800b4ce:	d106      	bne.n	800b4de <__sflush_r+0x62>
 800b4d0:	6829      	ldr	r1, [r5, #0]
 800b4d2:	291d      	cmp	r1, #29
 800b4d4:	d82b      	bhi.n	800b52e <__sflush_r+0xb2>
 800b4d6:	4a2a      	ldr	r2, [pc, #168]	@ (800b580 <__sflush_r+0x104>)
 800b4d8:	410a      	asrs	r2, r1
 800b4da:	07d6      	lsls	r6, r2, #31
 800b4dc:	d427      	bmi.n	800b52e <__sflush_r+0xb2>
 800b4de:	2200      	movs	r2, #0
 800b4e0:	04d9      	lsls	r1, r3, #19
 800b4e2:	6062      	str	r2, [r4, #4]
 800b4e4:	6922      	ldr	r2, [r4, #16]
 800b4e6:	6022      	str	r2, [r4, #0]
 800b4e8:	d504      	bpl.n	800b4f4 <__sflush_r+0x78>
 800b4ea:	1c42      	adds	r2, r0, #1
 800b4ec:	d101      	bne.n	800b4f2 <__sflush_r+0x76>
 800b4ee:	682b      	ldr	r3, [r5, #0]
 800b4f0:	b903      	cbnz	r3, 800b4f4 <__sflush_r+0x78>
 800b4f2:	6560      	str	r0, [r4, #84]	@ 0x54
 800b4f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b4f6:	602f      	str	r7, [r5, #0]
 800b4f8:	b1b9      	cbz	r1, 800b52a <__sflush_r+0xae>
 800b4fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b4fe:	4299      	cmp	r1, r3
 800b500:	d002      	beq.n	800b508 <__sflush_r+0x8c>
 800b502:	4628      	mov	r0, r5
 800b504:	f7ff fbee 	bl	800ace4 <_free_r>
 800b508:	2300      	movs	r3, #0
 800b50a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b50c:	e00d      	b.n	800b52a <__sflush_r+0xae>
 800b50e:	2301      	movs	r3, #1
 800b510:	4628      	mov	r0, r5
 800b512:	47b0      	blx	r6
 800b514:	4602      	mov	r2, r0
 800b516:	1c50      	adds	r0, r2, #1
 800b518:	d1c9      	bne.n	800b4ae <__sflush_r+0x32>
 800b51a:	682b      	ldr	r3, [r5, #0]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d0c6      	beq.n	800b4ae <__sflush_r+0x32>
 800b520:	2b1d      	cmp	r3, #29
 800b522:	d001      	beq.n	800b528 <__sflush_r+0xac>
 800b524:	2b16      	cmp	r3, #22
 800b526:	d11d      	bne.n	800b564 <__sflush_r+0xe8>
 800b528:	602f      	str	r7, [r5, #0]
 800b52a:	2000      	movs	r0, #0
 800b52c:	e021      	b.n	800b572 <__sflush_r+0xf6>
 800b52e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b532:	b21b      	sxth	r3, r3
 800b534:	e01a      	b.n	800b56c <__sflush_r+0xf0>
 800b536:	690f      	ldr	r7, [r1, #16]
 800b538:	2f00      	cmp	r7, #0
 800b53a:	d0f6      	beq.n	800b52a <__sflush_r+0xae>
 800b53c:	0793      	lsls	r3, r2, #30
 800b53e:	680e      	ldr	r6, [r1, #0]
 800b540:	600f      	str	r7, [r1, #0]
 800b542:	bf0c      	ite	eq
 800b544:	694b      	ldreq	r3, [r1, #20]
 800b546:	2300      	movne	r3, #0
 800b548:	eba6 0807 	sub.w	r8, r6, r7
 800b54c:	608b      	str	r3, [r1, #8]
 800b54e:	f1b8 0f00 	cmp.w	r8, #0
 800b552:	ddea      	ble.n	800b52a <__sflush_r+0xae>
 800b554:	4643      	mov	r3, r8
 800b556:	463a      	mov	r2, r7
 800b558:	6a21      	ldr	r1, [r4, #32]
 800b55a:	4628      	mov	r0, r5
 800b55c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b55e:	47b0      	blx	r6
 800b560:	2800      	cmp	r0, #0
 800b562:	dc08      	bgt.n	800b576 <__sflush_r+0xfa>
 800b564:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b568:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b56c:	f04f 30ff 	mov.w	r0, #4294967295
 800b570:	81a3      	strh	r3, [r4, #12]
 800b572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b576:	4407      	add	r7, r0
 800b578:	eba8 0800 	sub.w	r8, r8, r0
 800b57c:	e7e7      	b.n	800b54e <__sflush_r+0xd2>
 800b57e:	bf00      	nop
 800b580:	dfbffffe 	.word	0xdfbffffe

0800b584 <_fflush_r>:
 800b584:	b538      	push	{r3, r4, r5, lr}
 800b586:	690b      	ldr	r3, [r1, #16]
 800b588:	4605      	mov	r5, r0
 800b58a:	460c      	mov	r4, r1
 800b58c:	b913      	cbnz	r3, 800b594 <_fflush_r+0x10>
 800b58e:	2500      	movs	r5, #0
 800b590:	4628      	mov	r0, r5
 800b592:	bd38      	pop	{r3, r4, r5, pc}
 800b594:	b118      	cbz	r0, 800b59e <_fflush_r+0x1a>
 800b596:	6a03      	ldr	r3, [r0, #32]
 800b598:	b90b      	cbnz	r3, 800b59e <_fflush_r+0x1a>
 800b59a:	f7ff f99d 	bl	800a8d8 <__sinit>
 800b59e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d0f3      	beq.n	800b58e <_fflush_r+0xa>
 800b5a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b5a8:	07d0      	lsls	r0, r2, #31
 800b5aa:	d404      	bmi.n	800b5b6 <_fflush_r+0x32>
 800b5ac:	0599      	lsls	r1, r3, #22
 800b5ae:	d402      	bmi.n	800b5b6 <_fflush_r+0x32>
 800b5b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b5b2:	f7ff fb88 	bl	800acc6 <__retarget_lock_acquire_recursive>
 800b5b6:	4628      	mov	r0, r5
 800b5b8:	4621      	mov	r1, r4
 800b5ba:	f7ff ff5f 	bl	800b47c <__sflush_r>
 800b5be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b5c0:	4605      	mov	r5, r0
 800b5c2:	07da      	lsls	r2, r3, #31
 800b5c4:	d4e4      	bmi.n	800b590 <_fflush_r+0xc>
 800b5c6:	89a3      	ldrh	r3, [r4, #12]
 800b5c8:	059b      	lsls	r3, r3, #22
 800b5ca:	d4e1      	bmi.n	800b590 <_fflush_r+0xc>
 800b5cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b5ce:	f7ff fb7b 	bl	800acc8 <__retarget_lock_release_recursive>
 800b5d2:	e7dd      	b.n	800b590 <_fflush_r+0xc>

0800b5d4 <__swhatbuf_r>:
 800b5d4:	b570      	push	{r4, r5, r6, lr}
 800b5d6:	460c      	mov	r4, r1
 800b5d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5dc:	b096      	sub	sp, #88	@ 0x58
 800b5de:	4615      	mov	r5, r2
 800b5e0:	2900      	cmp	r1, #0
 800b5e2:	461e      	mov	r6, r3
 800b5e4:	da0c      	bge.n	800b600 <__swhatbuf_r+0x2c>
 800b5e6:	89a3      	ldrh	r3, [r4, #12]
 800b5e8:	2100      	movs	r1, #0
 800b5ea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b5ee:	bf14      	ite	ne
 800b5f0:	2340      	movne	r3, #64	@ 0x40
 800b5f2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b5f6:	2000      	movs	r0, #0
 800b5f8:	6031      	str	r1, [r6, #0]
 800b5fa:	602b      	str	r3, [r5, #0]
 800b5fc:	b016      	add	sp, #88	@ 0x58
 800b5fe:	bd70      	pop	{r4, r5, r6, pc}
 800b600:	466a      	mov	r2, sp
 800b602:	f000 f849 	bl	800b698 <_fstat_r>
 800b606:	2800      	cmp	r0, #0
 800b608:	dbed      	blt.n	800b5e6 <__swhatbuf_r+0x12>
 800b60a:	9901      	ldr	r1, [sp, #4]
 800b60c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b610:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b614:	4259      	negs	r1, r3
 800b616:	4159      	adcs	r1, r3
 800b618:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b61c:	e7eb      	b.n	800b5f6 <__swhatbuf_r+0x22>

0800b61e <__smakebuf_r>:
 800b61e:	898b      	ldrh	r3, [r1, #12]
 800b620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b622:	079d      	lsls	r5, r3, #30
 800b624:	4606      	mov	r6, r0
 800b626:	460c      	mov	r4, r1
 800b628:	d507      	bpl.n	800b63a <__smakebuf_r+0x1c>
 800b62a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b62e:	6023      	str	r3, [r4, #0]
 800b630:	6123      	str	r3, [r4, #16]
 800b632:	2301      	movs	r3, #1
 800b634:	6163      	str	r3, [r4, #20]
 800b636:	b003      	add	sp, #12
 800b638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b63a:	ab01      	add	r3, sp, #4
 800b63c:	466a      	mov	r2, sp
 800b63e:	f7ff ffc9 	bl	800b5d4 <__swhatbuf_r>
 800b642:	9f00      	ldr	r7, [sp, #0]
 800b644:	4605      	mov	r5, r0
 800b646:	4630      	mov	r0, r6
 800b648:	4639      	mov	r1, r7
 800b64a:	f7ff fbb7 	bl	800adbc <_malloc_r>
 800b64e:	b948      	cbnz	r0, 800b664 <__smakebuf_r+0x46>
 800b650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b654:	059a      	lsls	r2, r3, #22
 800b656:	d4ee      	bmi.n	800b636 <__smakebuf_r+0x18>
 800b658:	f023 0303 	bic.w	r3, r3, #3
 800b65c:	f043 0302 	orr.w	r3, r3, #2
 800b660:	81a3      	strh	r3, [r4, #12]
 800b662:	e7e2      	b.n	800b62a <__smakebuf_r+0xc>
 800b664:	89a3      	ldrh	r3, [r4, #12]
 800b666:	6020      	str	r0, [r4, #0]
 800b668:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b66c:	81a3      	strh	r3, [r4, #12]
 800b66e:	9b01      	ldr	r3, [sp, #4]
 800b670:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b674:	b15b      	cbz	r3, 800b68e <__smakebuf_r+0x70>
 800b676:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b67a:	4630      	mov	r0, r6
 800b67c:	f000 f81e 	bl	800b6bc <_isatty_r>
 800b680:	b128      	cbz	r0, 800b68e <__smakebuf_r+0x70>
 800b682:	89a3      	ldrh	r3, [r4, #12]
 800b684:	f023 0303 	bic.w	r3, r3, #3
 800b688:	f043 0301 	orr.w	r3, r3, #1
 800b68c:	81a3      	strh	r3, [r4, #12]
 800b68e:	89a3      	ldrh	r3, [r4, #12]
 800b690:	431d      	orrs	r5, r3
 800b692:	81a5      	strh	r5, [r4, #12]
 800b694:	e7cf      	b.n	800b636 <__smakebuf_r+0x18>
	...

0800b698 <_fstat_r>:
 800b698:	b538      	push	{r3, r4, r5, lr}
 800b69a:	2300      	movs	r3, #0
 800b69c:	4d06      	ldr	r5, [pc, #24]	@ (800b6b8 <_fstat_r+0x20>)
 800b69e:	4604      	mov	r4, r0
 800b6a0:	4608      	mov	r0, r1
 800b6a2:	4611      	mov	r1, r2
 800b6a4:	602b      	str	r3, [r5, #0]
 800b6a6:	f7f6 f9ab 	bl	8001a00 <_fstat>
 800b6aa:	1c43      	adds	r3, r0, #1
 800b6ac:	d102      	bne.n	800b6b4 <_fstat_r+0x1c>
 800b6ae:	682b      	ldr	r3, [r5, #0]
 800b6b0:	b103      	cbz	r3, 800b6b4 <_fstat_r+0x1c>
 800b6b2:	6023      	str	r3, [r4, #0]
 800b6b4:	bd38      	pop	{r3, r4, r5, pc}
 800b6b6:	bf00      	nop
 800b6b8:	20008f74 	.word	0x20008f74

0800b6bc <_isatty_r>:
 800b6bc:	b538      	push	{r3, r4, r5, lr}
 800b6be:	2300      	movs	r3, #0
 800b6c0:	4d05      	ldr	r5, [pc, #20]	@ (800b6d8 <_isatty_r+0x1c>)
 800b6c2:	4604      	mov	r4, r0
 800b6c4:	4608      	mov	r0, r1
 800b6c6:	602b      	str	r3, [r5, #0]
 800b6c8:	f7f6 f9aa 	bl	8001a20 <_isatty>
 800b6cc:	1c43      	adds	r3, r0, #1
 800b6ce:	d102      	bne.n	800b6d6 <_isatty_r+0x1a>
 800b6d0:	682b      	ldr	r3, [r5, #0]
 800b6d2:	b103      	cbz	r3, 800b6d6 <_isatty_r+0x1a>
 800b6d4:	6023      	str	r3, [r4, #0]
 800b6d6:	bd38      	pop	{r3, r4, r5, pc}
 800b6d8:	20008f74 	.word	0x20008f74

0800b6dc <_sbrk_r>:
 800b6dc:	b538      	push	{r3, r4, r5, lr}
 800b6de:	2300      	movs	r3, #0
 800b6e0:	4d05      	ldr	r5, [pc, #20]	@ (800b6f8 <_sbrk_r+0x1c>)
 800b6e2:	4604      	mov	r4, r0
 800b6e4:	4608      	mov	r0, r1
 800b6e6:	602b      	str	r3, [r5, #0]
 800b6e8:	f7f6 f9b2 	bl	8001a50 <_sbrk>
 800b6ec:	1c43      	adds	r3, r0, #1
 800b6ee:	d102      	bne.n	800b6f6 <_sbrk_r+0x1a>
 800b6f0:	682b      	ldr	r3, [r5, #0]
 800b6f2:	b103      	cbz	r3, 800b6f6 <_sbrk_r+0x1a>
 800b6f4:	6023      	str	r3, [r4, #0]
 800b6f6:	bd38      	pop	{r3, r4, r5, pc}
 800b6f8:	20008f74 	.word	0x20008f74

0800b6fc <memchr>:
 800b6fc:	b2c9      	uxtb	r1, r1
 800b6fe:	4603      	mov	r3, r0
 800b700:	4402      	add	r2, r0
 800b702:	b510      	push	{r4, lr}
 800b704:	4293      	cmp	r3, r2
 800b706:	4618      	mov	r0, r3
 800b708:	d101      	bne.n	800b70e <memchr+0x12>
 800b70a:	2000      	movs	r0, #0
 800b70c:	e003      	b.n	800b716 <memchr+0x1a>
 800b70e:	7804      	ldrb	r4, [r0, #0]
 800b710:	3301      	adds	r3, #1
 800b712:	428c      	cmp	r4, r1
 800b714:	d1f6      	bne.n	800b704 <memchr+0x8>
 800b716:	bd10      	pop	{r4, pc}

0800b718 <_init>:
 800b718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b71a:	bf00      	nop
 800b71c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b71e:	bc08      	pop	{r3}
 800b720:	469e      	mov	lr, r3
 800b722:	4770      	bx	lr

0800b724 <_fini>:
 800b724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b726:	bf00      	nop
 800b728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b72a:	bc08      	pop	{r3}
 800b72c:	469e      	mov	lr, r3
 800b72e:	4770      	bx	lr
